<?php

namespace App\AdminApi\Chat\Controllers;

use App\Laravel\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use App\Core\Security\Entities\User;
use App\Core\Chat\Entities\ChatRoom;
use App\Core\Chat\Entities\ChatMessage;
use App\Core\Chat\Entities\ChatRoomUser;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Validator;
use App\Core\Internal\Services\OneSignalService;
use App\Core\Internal\Services\SocketioService;

class ChatController extends Controller 
{
    protected $OneSignalService;
    protected $SocketioService;
    public function __construct(OneSignalService $OneSignalService, SocketioService $SocketioService)
    {
        $this->SocketioService = $SocketioService;
        $this->OneSignalService= $OneSignalService;
    }
    public function history(Request $request)
    {
        $user = Auth::user();
        $data = null;
        if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
        if ($request->has('oid')) {
            $data = ChatRoom::findOrFail($request->input('oid'));
            foreach($data->Details as $row) $row->UserObj = $row->UserObj->UserProfileObj();
            // $data->Details = $data->Details()->with([
            //     'UserObj' => function ($query) {$query->addSelect('Oid', 'UserName', 'Name','Image');},
            //     ])->orderByRaw('CreatedAt')->get();
        } else {            
            // 'UserObj' => function ($query) {$query->addSelect('Oid', 'UserName', 'Name','Image');},
            $data = ChatRoom::with([
                'UserObj',
                'UserAdminObj' => function ($query) {$query->addSelect('Oid', 'UserName', 'Name','Image');},
                ])->whereHas('Users', function ($query) use ($user) {
                    $query->where('User', $user->Oid);
                });
            
            if ($request->has('oid')) $data = $data->where('Oid', $request->input('oid'));
            if ($request->has('status')) $data = $data->whereIn('Status', $request->input('status'))->limit(50);
            // if ($request->has('user')) $data = $data->where('UserAdmin', $request->input('user'))->limit(50);
            // $data = $data->where(function($query) use ($user)
            // {
            //     $query->whereNull('UserAdmin')
            //     ->orWhere('UserAdmin',$user->Oid);
            // });
            $data = $data->orderBy('CreatedAt','Desc')->limit(50)->get();
            foreach($data as $row) {
                $tmp = $row->UserObj ? $row->UserObj->UserProfileObj() : null;
                unset($row->UserObj);
                $row->UserObj = $tmp;                 
                $tmp = $row->UserAdminObj ? $row->UserAdminObj->UserProfileObj() : null;
                unset($row->UserAdminObj);
                $row->UserAdminObj = $tmp;
            }
        }
        return response()->json(
            $data,
            Response::HTTP_OK
        );
    }

    public function acceptRoom(Request $request)
    {
        $user = Auth::user();
        $data = ChatRoom::with([
            'Details.UserObj' => function ($query) {$query->addSelect('Oid', 'UserName', 'Name','Image');},
            ])->with(['Details', 'Users'])->findOrFail($request->input('oid'));
        if ($data->UserAdmin) throw new \Exception('Ticket has been handled by others');
        if ($data->Status == 'CLOSE') throw new \Exception('Ticket has been closed');
        
        $msg = $user->Name.' has accepted your request and start to server you now ('.now().')';
        
        $data->UserAdmin = $user->Oid;
        $data->LastMessage = $msg;
        $data->LastUser = $user->Oid;
        $data->Status = 'ACTIVE';
        $data->save();

        $detailmsg = new ChatMessage();
        $detailmsg->User = $user->Oid;
        $detailmsg->Message = $msg;
        $detailmsg->DeviceId = '';
        $detailmsg->ChatRoom = $data->Oid;
        $detailmsg->save();
            
        //kirim ke user
        // if ($data->RoomType == 'Support') $this->sendNotification($user->Name.' chat', $request['Message'], $data->Company, $data->User);

        DB::delete("DELETE FROM chatroomuser WHERE ChatRoom='{$data->Oid}' AND User NOT IN ('{$user->Oid}','{$data->User}')");
        // $chatRoomUser = ChatRoomUser::where('ChatRoom',$data->Oid)->get();
        // foreach($chatRoomUser as $row) {
        //     if ($row->User != $user->Oid && $row->User != $data->User) $row->delete();
        // }
        
        return response()->json(
            $data,
            Response::HTTP_OK
        );
    }

    public function privateNew(Request $request) {
        $userFrom = Auth::user();
        $userTo = User::findOrFail($request->input('user'));
        $device = $request->has('device') ? $request->input('device') : null;

        $data = DB::select("SELECT Oid FROM chatroom 
            WHERE (RoomType='Private' AND User='{$userFrom}' AND UserAdmin='{$userTo}' AND Status = 'Active') 
            OR (RoomType='Private' AND User='{$userTo}' AND UserAdmin='{$userFrom}' AND Status = 'Active')");
        if (!$data) $data = new ChatRoom();
        else {
            $data = ChatRoom::with([
                'Details.UserObj' => function ($query) {$query->addSelect('Oid', 'UserName', 'Name','Image');},
            ])->with(['Details', 'Users'])->findOrFail($data[0]->Oid)->first();
            if ($data) return $data;
        }

        $msg = $userFrom->UserName.' has requested a chat at '.now();
        $data->Company = $userFrom->Company;
        $data->LastMessage = $msg;
        $data->LastUser = $userFrom->Oid;
        $data->UserAdmin = $userFrom->Oid;
        $data->User = $userTo->Oid;
        $data->Status = 'Active';
        $data->DeviceId = $device;
        $data->RoomType = 'Private';
        $data->save();

        $detailmsg = new ChatMessage();
        $detailmsg->Company = $userFrom->Company;
        $detailmsg->User = $userFrom->Oid;
        $detailmsg->Message = $msg;
        $detailmsg->DeviceId = $device;
        $detailmsg->ChatRoom = $data->Oid;
        $detailmsg->save();
        
        $detailuser = new ChatRoomUser();
        $detailuser->Company = $userFrom->Company;
        $detailuser->User = $userFrom->Oid;
        $detailuser->ChatRoom = $data->Oid;
        $detailuser->save();
        
        $detailuser = new ChatRoomUser();
        $detailuser->Company = $userTo->Company;
        $detailuser->User = $userTo->Oid;
        $detailuser->ChatRoom = $data->Oid;
        $detailuser->save();
        $this->sendNotification('New Chat Request', $msg, $userTo->Company, $userTo->Oid);
        return $data;
    }

    private function sendNotification($title, $message, $company, $to) {    
        $user = Auth::user();    
        $param = [
            "Company"=> $user->Company,
            "Code"=> $user->UserName,
            "Date"=> now()->addHours(company_timezone())->toDateTimeString(),
            "Title"=> $title,
            "Message"=> $message,
            "Type"=> 'Chat',
            "Icon"=> 'IconBox',
            "Color"=> '#000000',
        ];
        // dd($company.'_'.$to);    
        $this->OneSignalService->sendNotification($title, $message, $company.'_'.$to, 'administrator');
        $this->SocketioService->sendNotificationChat($company.'_'.$to, $param);
    }

    public function sendMessage(Request $request)
    {      
        $validate = (array)json_decode($request->getContent());
        $validator = Validator::make($validate, [
            'Message'=>'required|max:2000',
            'Device'=>'required',
            'ChatRoom' => 'required|exists:chatroom,Oid',
        ],
        [
            'Message.required'=>'Message is required',
            'Message.max'=>'Message should not be more than 2000 characters',
            'Device.required'=>'Device is required',
            'ChatRoom.required'=>__('_.ChatRoom').__('error.required'),
            'ChatRoom.exists'=>__('_.ChatRoom').__('error.exists'),
        ]);
        if ($validator->fails()) {
            return response()->json(
                $validator->errors(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        $request = object_to_array(json_decode($request->getContent()));
        $data = new ChatMessage();
        DB::transaction(function () use ($request, &$data) {
            $user = Auth::user();
            $data->User = $user->Oid;
            $data->Message = $request['Message'];
            $data->DeviceId = $request['Device'];
            $data->ChatRoom = $request['ChatRoom'];
            $data->save();
            if(!$data) throw new \Exception('Data is failed to be saved');

            $dataParent = ChatRoom::findOrFail($data->ChatRoom);
            $dataParent->LastMessage = $request['Message'];
            $dataParent->LastUser = $data->User;
            $dataParent->save();
        });

        //kirim ke user
        $user = Auth::user();
        if ($data->RoomType == 'Support') $this->sendNotification($user->Name.' chat', $request['Message'], $data->Company, $data->User);
        else {
            $users = ChatRoomUser::where('ChatRoom',$data->ChatRoom)->where('User','!=',$user->Oid)->get();
            foreach ($users as $row) $this->sendNotification($user->Name.' chat', $request['Message'], $row->Company, $row->User);
        }
        
        return response()->json(
            $data,
            Response::HTTP_OK
        );
    }

    public function closeRoom(Request $request)
    {
        $user = Auth::user();
        $data = ChatRoom::with([
            'Details.UserObj' => function ($query) {$query->addSelect('Oid', 'UserName', 'Name','Image');},
            ])->with(['Details', 'Users'])->findOrFail($request->input('oid'));
        if ($data->Status == 'CLOSE') throw new \Exception('Ticket has been closed');
        $data->Status = 'CLOSE';
        $data->save();

        if ($data->RoomType == 'Support') $this->sendNotification('Chat is ended', 'Your chat has been ended', $data->Company, $data->User);

        return response()->json(
            $data,
            Response::HTTP_OK
        );
    }
}