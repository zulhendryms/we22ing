<?php

namespace App\AdminApi\Travel\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\Currency;
use App\Core\POS\Entities\PointOfSale;
use App\Core\POS\Entities\POSETicketLog;
use App\Core\Trading\Entities\SalesInvoice;
use App\Core\Trading\Entities\SalesInvoiceDetail;
use App\Core\POS\Resources\PointOfSaleResource;
use App\Core\Internal\Entities\PointOfSaleType;
use App\Core\Internal\Entities\Status;
use App\Core\Master\Entities\Item;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Core\POS\Services\POSStatusService;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Master\Entities\BusinessPartner;
use App\Core\Master\Entities\BusinessPartnerGroup;
use App\Core\Travel\Entities\TravelTransactionDetail;
use App\Core\POS\Services\POSETicketService;
use App\Core\Accounting\Services\SalesPOSService;
use App\Core\Accounting\Services\SalesPOSSessionService;
use App\Core\POS\Entities\POSSession;
use App\Core\Security\Entities\User;
use App\Core\Base\Services\HttpService;
use App\Core\Travel\Entities\TravelTransaction;
use App\Core\Travel\Entities\TravelTransactionFlight;
use App\Core\Travel\Entities\TravelTemplateNote;
use App\Core\Travel\Entities\TravelTransactionPassenger;
use App\Core\Travel\Entities\TravelTransactionItinerary;
use App\Core\Travel\Entities\TravelItemTourPackageItinerary;
use App\Core\POS\Entities\ETicket;
use App\Core\Master\Entities\BusinessPartnerGroupUser;
use App\Core\Travel\Entities\TravelType;
use Carbon\Carbon;
use App\Core\Internal\Services\AuditService;
use App\Core\Base\Services\TravelAPIService;
use Validator;

class TravelTransactionController extends Controller
{
    protected $posETicketService;
    protected $posStatusService;
    protected $roleService;
    protected $salesPosService;
    protected $salesPosSessionService;
    protected $httpService;
    private $auditService;
    private $travelAPIService;

    public function __construct(
        POSStatusService $posStatusService,
        POSETicketService $posETicketService,
        RoleModuleService $roleService,
        SalesPOSService $salesPosService,
        SalesPOSSessionService $salesPosSessionService,
        HttpService $httpService, AuditService $auditService,
        TravelAPIService $travelAPIService
    ) {
        $this->posStatusService = $posStatusService;
        $this->travelAPIService = $travelAPIService;
        $this->posETicketService = $posETicketService;
        $this->roleService = $roleService;
        $this->salesPosService = $salesPosService;
        $this->salesPosSessionService = $salesPosSessionService;
        $this->auditService = $auditService;
        $this->httpService = $httpService;
        $this->httpService
            // ->baseUrl(config('services.ezbmodule.url'))
            ->baseUrl('http://ezbpostest.ezbooking.co:888')
            ->json();
    }
    public function fields()
    {
        $fields = []; //f = 'FIELD, t = TITLE
        // $fields[] = serverSideConfigField('Oid');
        $fields[] = ['w' => 0, 'n' => 'Oid', 'f'=>'data.Oid'];
        $fields[] = ['w' => 100, 'n' => 'Company', 'f'=>'Company.Code'];
        $fields[] = ['w' => 150, 'n' => 'Code'];
        $fields[] = ['w' => 120, 'n' => 'Date'];
        $fields[] = ['w' => 250, 'n' => 'Customer', 'f' => 'bp.Name'];
        $fields[] = ['w' => 70, 'n' => 'Currency', 'f' => 'c.Code', 'ol' => 'Cur'];
        $fields[] = ['w' => 120, 'n' => 'TotalAmount'];
        $fields[] = serverSideConfigField('Status');
        $fields[] = ['w' => 150, 'n' => 'User', 'f' => 'u.UserName'];
        return $fields;
    }

    public function config(Request $request)
    {
        $fields = serverSideFields($this->fields());
        foreach ($fields as &$row) { //combosource
            if ($row['headerName']  == 'Company') $row['source'] = comboselect('company');
        };        
        $fields[0]['cellRenderer'] = 'actionCell';
        $fields[0]['topButton'] =[
            [
            'name' => 'Add New',
            'icon' => 'PlusIcon',
            'type' => 'add'
            ]
        ];
        return $fields;
    }
    public function list(Request $request)
    {
        $user = Auth::user();  

        $fields = $this->fields();
        $data = DB::table('pospointofsale as data')
            ->leftJoin('mstcurrency AS c', 'c.Oid', '=', 'data.Currency')
            ->leftJoin('traveltransaction AS tt', 'tt.Oid', '=', 'data.Oid')
            ->leftJoin('trvtraveltype AS tty', 'tty.Oid', '=', 'tt.TravelType')
            ->leftJoin('sysstatus AS s', 's.Oid', '=', 'data.Status')
            ->leftJoin('mstbusinesspartner AS bp', 'bp.Oid', '=', 'data.Customer')
            ->leftJoin('postable AS t', 't.Oid', '=', 'data.POSTable')
            ->leftJoin('mstwarehouse AS w', 'w.Oid', '=', 'data.Warehouse')
            ->leftJoin('mstemployee AS e', 'e.Oid', '=', 'data.Employee')
            ->leftJoin('user AS u', 'u.Oid', '=', 'data.User')
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->WhereNotNull('data.Status')->whereNull('data.GCRecord')
            ;
        if ($request->input('form') == 'traveltransactiongit') $ttype = 'git';
        elseif ($request->input('form') == 'traveltransactionfit') $ttype = 'fit';
        elseif ($request->input('form') == 'traveltransactionoutbound') $ttype = 'outbound';
        else $ttype = 'web';

        if ($ttype) $data->where('tty.Code', strtoupper($ttype));
        // filter businesspartnergroupuser
        $businessPartnerGroupUser = BusinessPartnerGroupUser::select('BusinessPartnerGroup')->where('User', $user->Oid)->pluck('BusinessPartnerGroup');
        if ($businessPartnerGroupUser->count() > 0) $data->whereIn('bp.BusinessPartnerGroup', $businessPartnerGroupUser);
        
        $data = serverSideQuery($data, $fields, $request, 'pospointofsale', 'Date');
        $role = $this->roleService->list('PurchaseInvoice');
        $action = $this->roleService->action('PurchaseInvoice');
        foreach ($data as $row) $row->Role = $this->roleService->generateRole($row, $role, $action);
        return $data;
        return serverSideReturn($data, $fields);
    }

    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = PointOfSale::whereNull('GCRecord');
            if ($type == 'list') $data->with(['CurrencyObj', 'CustomerObj', 'StatusObj', 'POSTableObj', 'UserObj']);

            if ($request->has('date')) {
                $data = $data
                    ->where('Date', '>=', Carbon::parse($request->date)->startOfMonth()->toDateString())
                    ->where('Date', '<', Carbon::parse($request->date)->startOfMonth()->addMonths(1)->toDateString());
            }
            $bp = BusinessPartnerGroup::findOrFail($user->BusinessPartnerObj->BusinessPartnerGroup);

            $role = $user->BusinessPartner ? $user->BusinessPartnerObj->BusinessPartnerGroupObj->BusinessPartnerRoleObj->Code : "Cash";
            if ($user->CompanyObj->BusinessPartner == $user->BusinessPartner) $data = $data->whereNull('GCRecord');
            elseif ($role == 'Customer' || $role == 'Agent') $data = $data->where('Customer', $user->BusinessPartner);
            elseif ($role == 'Supplier') $data = $data->where('Supplier', $user->BusinessPartner);

            $data = $data->orderBy('Date', 'Desc')->get();

            $result = [];
            $role = $this->roleService->list('POS');
            $action = $this->roleService->action('POS');
            foreach ($data as $row) {
                $result[] = [
                    'Oid' => $row->Oid,
                    'Code' => $row->Code,
                    'Date' => Carbon::parse($row->Date)->format('Y-m-d'),
                    'Source' => $row->Source,
                    'TotalAmount' => number_format($row->TotalAmount, $row->CurrencyObj->Decimal),
                    'CurrencyName' => $row->CurrencyObj ? $row->CurrencyObj->Code : null,
                    'CustomerName' => $row->CustomerObj ? $row->CustomerObj->Name . ' - ' . $row->CustomerObj->Code : null,
                    'TableName' => $row->POSTableObj ? $row->POSTableObj->Name . ' - ' . $row->POSTableObj->Code : null,
                    'StatusName' => $row->StatusObj ? $row->StatusObj->Name : null,
                    'Role' => $this->generateRole($row, $role, $action)
                ];
            }
            return $result;
            // return (new PointOfSaleCollection($data))->type($type);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    private function showSubDetail($data, $orderType) {
        $result = TravelTransactionDetail::with(['ItemObj','BusinessPartnerObj'])
            ->where('TravelTransaction', $data->Oid)
            ->whereIn('OrderType', $orderType)
            ->get();
        if ($result) {
            foreach ($result as $row) {
                $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;                        
                $row->BusinessPartnerName = $row->BusinessPartnerObj ? $row->BusinessPartnerObj->Name : null;
                $row->TravelHotelRoomTypeName = $row->TravelHotelRoomTypeObj ? $row->TravelHotelRoomTypeObj->Name : null;
                unset($row->TravelHotelRoomTypeObj);
                unset($row->ItemObj);
                unset($row->BusinessPartnerObj);
                if (!$row->ItemObj) continue;
                if ($row->ItemObj->ItemTypeObj->Code = 'Attraction') {
                    $stock = ETicket::where('TravelTransactionDetail',$row->Oid)->get();
                    if ($stock) $row->StockWithdrawed = $stock->count();
                }
            }
            return $result;
        } else return null;
    }

    public function show(PointOfSale $data)
    {
        try {
            logger($data->Oid);
            $data = PointOfSale::with('Details', 'TravelDetails', 'Logs')->with([
                'CompanyObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'SupplierObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'CustomerObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'Details.ItemObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'TravelDetails.ItemObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PointOfSaleTypeObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'POSTableObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'EmployeeObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'Employee2Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'ProjectObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'UserObj' => function ($query) { $query->addSelect('Oid', 'UserName', 'Name'); },
                'CurrencyObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'POSSessionObj' => function ($query) { $query->addSelect('Oid'); },
                'StatusObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PaymentMethodObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PaymentCurrencyObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PaymentMethod2Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PaymentMethod3Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PaymentMethod4Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'PaymentMethod5Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
            ])->findOrFail($data->Oid);
            $data->CompanyName = $data->CompanyObj ? $data->CompanyObj->Code : null;
            $data->Role = $this->generateRole($data);

            //etickets
            $query = "SELECT * FROM poseticket p WHERE p.PointOfSale = '{$data->Oid}' AND (p.IsInvoice = FALSE OR p.IsInvoice IS NULL) ORDER BY p.Code";
            $etickets = DB::select($query);
            $data->ETickets = [];
            if ($etickets) $data->ETickets = $etickets;
            
            //etickets
            $data->SalesInvoices = SalesInvoice::with('CurrencyObj')->where('PointOfSale', $data->Oid)->get();

            if ($data->TravelDetails) { // OrderType      
                $data->TravelIncomeExpenses = $this->showSubDetail($data,['Income','Expense']);
                $data->TravelAttractionDetails = $this->showSubDetail($data,['Attraction']);
                $data->TravelOutboundDetails = $this->showSubDetail($data,['Outbound']);
                $data->TravelTransportDetails = $this->showSubDetail($data,['Transport']);
                $data->TravelRestaurantDetails = $this->showSubDetail($data,['Restaurant']);
                $data->TravelHotelDetails = $this->showSubDetail($data,['Hotel']);
            }
            
            $data = (new PointOfSaleResource($data))->type('detail');
            if ($data->POSSession) {
                $session = POSSession::with('UserObj')->findOrFail($data->POSSession);
                $data->POSSessionObj->Name = Carbon::parse($session->Date)->format('Y-m-d') . ' ' . $session->UserObj->UserName;
            }

            $travelTransaction = TravelTransaction::with('Flights', 'Passengers', 'Itineraries')->with([
                'TravelItemTourPackageObj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'TravelGuide1Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
                'TravelGuide2Obj' => function ($query) { $query->addSelect('Oid', 'Code', 'Name'); },
            ])->findOrFail($data->Oid);
            unset($travelTransaction->Code);

            foreach($travelTransaction->Flights as $row) $row->TravelFlightNumberName = $row->TravelFlightNumberObj ? $row->TravelFlightNumberObj->Name : null;
            foreach($travelTransaction->Passengers as $row) $row->NationalityName = $row->NationalityObj ? $row->NationalityObj->Name : null;
            foreach($travelTransaction->Itineraries as $row) $row->BusinessPartnerHotelName = $row->BusinessPartnerHotelObj ? $row->BusinessPartnerHotelObj->Name : null;
            
            if ($travelTransaction->TravelTypeObj->Code == 'Outbound') { //salesinvoice
                $salesInvoice = SalesInvoice::with('Details','Details.Itemobj')->where('PointOfSale',$travelTransaction->Oid)->first();
                if ($salesInvoice) {
                    $travelTransaction->SalesInvoiceOid = $salesInvoice->Oid;
                    $travelTransaction->SalesInvoiceCode = $salesInvoice->Code;
                    $travelTransaction->SalesInvoiceDate = $salesInvoice->Date;
                    $travelTransaction->SalesInvoiceDetails = $salesInvoice->Details;
                    foreach($travelTransaction->SalesInvoiceDetails as $row) $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : '';
                }
            }

            $data1 = collect($data);
            $data2 = collect($travelTransaction);
            $data = $data1->merge($data2);

            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {        
        if ($request->input('form') == 'traveltransactiongit') $ttype = 'git';
        elseif ($request->input('form') == 'traveltransactionfit') $ttype = 'fit';
        elseif ($request->input('form') == 'traveltransactionoutbound') $ttype = 'outbound';
        else $ttype = 'web';
        $data;
        try {
            DB::transaction(function () use ($request, $Oid, &$data, $ttype) {

                $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
                if (!$Oid) $data = new PointOfSale();
                else $data = PointOfSale::findOrFail($Oid);
                $enabled = $this->httpService->get('/portal/api/development/table/getfield/pospointofsale');
                $company = Auth::user()->CompanyObj;
                if (!$Oid) {
                    if (!isset($request->Company)) $request->Company = $company->Oid;
                    if (!isset($request->Code)) $request->Code = '<<Auto>>';
                    if ($request->Code == '<<Auto>>') $request->Code = now()->format('ymdHis') . '-' . str_random(3);
                    if (!isset($request->Date)) $request->Date = now();
                    if (!isset($request->PointOfSaleType)) $request->PointOfSaleType = PointOfSaleType::where('Code', 'attraction')->first()->Oid;
                    if (!isset($request->Source)) $request->Source = 'Backend';
                    if (!isset($request->DateExpiry)) $request->DateExpiry = now()->addHour(10)->toDateTimeString();
                    if (!isset($request->Customer)) { //kalo tdk ada customer
                        if (!isset($request->User)) $request->Customer = $company->CustomerCash; //isi dari company
                        else $request->Customer = User::findOrFail($request->User)->BusinessPartner; //isi dari user
                    }
                    $customer = BusinessPartner::findOrFail($request->Customer);
                    if (!isset($request->User)) { //kalo tdk ada user
                        if (!isset($request->Customer)) $request->User = Auth::user()->Oid; //isi dari login
                        else { 
                            $bpuser = User::where('BusinessPartner', $request->Customer)->first(); //isi dari customer
                            $request->User = $bpuser ? $bpuser->Oid : null;
                        }                    
                    }
                    if (!isset($request->Currency)) $request->Currency = $customer->SalesCurrency;
                    $cur = Currency::findOrFail($request->Currency);
                    if (!isset($request->Warehouse)) $request->Warehouse = $company->Warehouse;
                    if (!isset($request->Status)) $request->Status = Status::entry()->first()->Oid;
                    if (!isset($request->RateAmount)) $request->RateAmount = $cur->getRate($request->Date) ? $cur->getRate($request->Date)->MidRate : 1;
                }

                if (isset($request->PaymentMethod)) $data->PaymentMethod = $request->PaymentMethod;
                if (isset($request->PaymentCurrency)) $data->PaymentCurrency = $request->PaymentCurrency;
                
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $data->{$field} = $request->{$field};
                }
                $cur = Currency::findOrFail($data->Currency);
                $customer = BusinessPartner::findOrFail($data->Customer);
                $data->save();
                if (!$Oid) $travelTransaction = new TravelTransaction();
                else $travelTransaction = TravelTransaction::findOrFail($Oid);
                $enabled = $this->httpService->get('/portal/api/development/table/getfield/traveltransaction');
                $travelTransaction->Oid = $data->Oid;
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $travelTransaction->{$field} = $request->{$field};
                }
                if (isset($request->TravelTemplateNoteGuide)) {
                    $tmp = TravelTemplateNote::where('Oid',$request->TravelTemplateNoteGuide)->first();
                    if ($tmp) $travelTransaction->NoteTourGuide = $tmp->Note;
                    $travelTransaction->TravelTemplateNoteGuide = null;
                }
                if (isset($request->TravelTemplateNote)) {
                    $tmp = TravelTemplateNote::where('Oid',$request->TravelTemplateNote)->first();
                    if ($tmp) $travelTransaction->Note = $tmp->Note;
                    $travelTransaction->TravelTemplateNote = null;
                }
                $travelType = TravelType::where('Code', strtoupper($ttype))->first();
                $travelTransaction->TravelType = $travelType->Oid;
                $travelTransaction->save();
                
                $this->calcTotal($data, $travelTransaction);


                if (!$Oid) {
                    // if ($travelTransaction->TravelItemTourPackage) {
                    //     $itemtourpackage = TravelItemTourPackage::findOrFail($travelTransaction->TravelItemTourPackage);
                    //     if ($itemtourpackage->Attractions()->count() != 0) {
                    //         $details = [];
                    //         foreach ($itemtourpackage->Attractions as $row) {
                    //             if ($travelTransaction->QtyAdult > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyAdult' => $travelTransaction->QtyAdult,
                    //                     'PurchaseAdult' => $row->PurchaseAdult,
                    //                     'SalesAdult' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyChild > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyChild' => $travelTransaction->QtyChild,
                    //                     'PurchaseChild' => $row->PurchaseChild,
                    //                     'SalesChild' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyInfant > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyInfant' => $travelTransaction->QtyInfant,
                    //                     'PurchaseInfant' => $row->PurchaseInfant,
                    //                     'SalesInfant' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //         }
                    //         $travelTransaction->Details()->saveMany($details);
                    //     }

                    //     if ($itemtourpackage->Restaurants()->count() != 0) {
                    //         $details = [];
                    //         foreach ($itemtourpackage->Restaurants as $row) {
                    //             if ($travelTransaction->QtyAdult > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyAdult' => $travelTransaction->QtyAdult,
                    //                     'PurchaseAdult' => $row->PurchaseAdult,
                    //                     'SalesAdult' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyChild > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyChild' => $travelTransaction->QtyChild,
                    //                     'PurchaseChild' => $row->PurchaseChild,
                    //                     'SalesChild' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyInfant > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyInfant' => $travelTransaction->QtyInfant,
                    //                     'PurchaseInfant' => $row->PurchaseInfant,
                    //                     'SalesInfant' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //         }
                    //         $travelTransaction->Details()->saveMany($details);
                    //     }

                    //     if ($itemtourpackage->Hotels()->count() != 0) {
                    //         $details = [];
                    //         foreach ($itemtourpackage->Hotels as $row) {
                    //             if ($travelTransaction->QtySGL > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtySGL' => $travelTransaction->QtySGL,
                    //                     'PurchaseSGL' => $row->PurchaseSGL,
                    //                     'SalesSGL' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyTWN > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyTWN' => $travelTransaction->QtyTWN,
                    //                     'PurchaseTWN' => $row->PurchaseTWN,
                    //                     'SalesTWN' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyTRP > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyTRP' => $travelTransaction->QtyTRP,
                    //                     'PurchaseTRP' => $row->PurchaseTRP,
                    //                     'SalesTRP' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //             if ($travelTransaction->QtyCWB > 0) {
                    //                 $details[] = new TravelTransactionDetail([
                    //                     'Item' => $row->Item,
                    //                     'QtyCWB' => $travelTransaction->QtyCWB,
                    //                     'PurchaseCWB' => $row->PurchaseCWB,
                    //                     'SalesCWB' => 0,
                    //                     'IncomeType' => $row->IncomeType,
                    //                     'ExpenseType' => $row->ExpenseType
                    //                 ]);
                    //             }
                    //         }
                    //         $travelTransaction->Details()->saveMany($details);
                    //     }

                    //     if ($itemtourpackage->Transports()->count() != 0) {
                    //         $details = [];
                    //         foreach ($itemtourpackage->Transports as $row) {
                    //             $details[] = new TravelTransactionDetail([
                    //                 'Item' => $row->Item,
                    //                 'Qty' => $row->Qty,
                    //                 'PurchaseAmount' => $row->PurchaseAmount,
                    //                 'SalesAmount' => 0,
                    //                 'IncomeType' => $row->IncomeType,
                    //                 'ExpenseType' => $row->ExpenseType
                    //             ]);
                    //         }
                    //         $travelTransaction->Details()->saveMany($details);
                    //     }

                    //     if ($itemtourpackage->Outbounds()->count() != 0) {
                    //         $details = [];
                    //         foreach ($itemtourpackage->Outbounds as $row) {
                    //             $details[] = new TravelTransactionDetail([
                    //                 'Item' => $row->Item,
                    //                 'Qty' => $row->Qty,
                    //                 'PurchaseAmount' => $row->PurchaseAmount,
                    //                 'SalesAmount' => 0,
                    //                 'IncomeType' => $row->IncomeType,
                    //                 'ExpenseType' => $row->ExpenseType
                    //             ]);
                    //         }
                    //         $travelTransaction->Details()->saveMany($details);
                    //     }
                    // }
                }
            });
            
            if ($ttype == 'outbound') {
                $salesInvoice = SalesInvoice::where('PointOfSale',$data->Oid)->first();
                if (!$salesInvoice) $salesInvoice = new SalesInvoice();
                if (isset($request->SalesInvoiceCode)) {
                    $salesInvoice->Code = $request->SalesInvoiceCode == '<<Auto>>' ? now()->format('ymdHis') . '-' . str_random(3) : $request->SalesInvoiceCode;
                } else $salesInvoice->Code = now()->format('ymdHis') . '-' . str_random(3);
                $salesInvoice->Date = isset($request->SalesInvoiceDate) ? $request->SalesInvoiceDate : now();
                $salesInvoice->PointOfSale = $data->Oid;
                $salesInvoice->BusinessPartner = $data->Customer;
                $salesInvoice->Currency = $data->Currency;
                $salesInvoice->Rate = $data->Rate;
                $salesInvoice->Status = Status::where('Code','entry')->first()->Oid;
                $salesInvoice->save();
            }

            $role = $this->generateRole($data);
            $data = $this->show($data);
            $data->Role = $role;
            
            // $data = new PointOfSaleResource($data);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function createInvoice(Request $request) {  
        $data;
        try {
            DB::transaction(function () use ($request, &$data) {
            $data = new SalesInvoice();
            $travelTransaction = PointOfSale::findOrFail($request->input('traveltransaction'));
            $data->Company = $travelTransaction->Company;
            $data->Code = now()->format('ymdHis') . '-' . str_random(3);
            $data->Date = now();
            $data->BusinessPartner = $travelTransaction->Customer;
            $bpag = $travelTransaction->CustomerObj->BusinessPartnerAccountGroupObj ? $travelTransaction->CustomerObj->BusinessPartnerAccountGroupObj : $travelTransaction->CustomerObj->BusinessPartnerGroupObj->BusinessPartnerAccountGroupObj;
            $data->Account = $bpag->SalesInvoice;
            $data->Currency = $travelTransaction->Currency;
            $data->PointOfSale = $travelTransaction->Oid;
            $data->Status = Status::where('Code','entry')->first()->Oid;
            $data->save();
        });
        
        // $data = new PointOfSaleResource($data);
        return response()->json(
            $data,
            Response::HTTP_CREATED
        );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listDetailTransaction(Request $request)
    {
        try {
            $pos = $request->input('pos');
            $itemtype = $request->input('itemtype');
            $data = TravelTransactionDetail::where('TravelTransaction', $pos)->where('OrderType', $itemtype);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function actionChangeItinerary(Request $request) {        
        if ($request->input('form') == 'traveltransactiongit') $ttype = 'git';
        elseif ($request->input('form') == 'traveltransactionfit') $ttype = 'fit';
        elseif ($request->input('form') == 'traveltransactionoutbound') $ttype = 'outbound';
        else $ttype = 'web';

        $data = TravelTransaction::with('Itineraries')->findOrFail($request->input('oid'));
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        $itineraries = TravelItemTourPackageItinerary::where('TravelItemTourPackage',$request->TravelItemTourPackage)->get();
        foreach($data->Itineraries as $row) $row->delete();
        foreach($itineraries as $row) {
            $tmp = new TravelTransactionItinerary();
            $tmp->Company = $data->Company;
            $tmp->TravelTransaction = $data->Oid;
            $date = isset($data->DateFrom) ? $data->DateFrom : $data->Date;
            $tmp->Date = Carbon::parse($date)->addDays($row->Sequence)->toDateString();
            $tmp->DescriptionEN = $data->Description;
            $tmp->save();
        }
        return $data;
    }

    public function saveFlight(Request $request, $Oid) {
        
    }

    public function saveDetail(Request $request)
    {
        if ($request->input('form') == 'traveltransactiongit') $ttype = 'git';
        elseif ($request->input('form') == 'traveltransactionfit') $ttype = 'fit';
        elseif ($request->input('form') == 'traveltransactionoutbound') $ttype = 'outbound';
        else $ttype = 'web';

        $pos = $request->input('pos');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));

        try {
            $data = TravelTransaction::where('Oid', $pos)->firstOrFail();
            $dataPOS = PointOfSale::where('Oid', $pos)->firstOrFail();
            DB::transaction(function () use ($request, &$data, &$dataPOS, $ttype) {

                if (isset($request->Flights)) {
                    if ($data->Flights()->count() != 0) {
                        $flight = TravelTransactionFlight::where('TravelTransaction', $data->Oid)->get();
                        foreach ($flight as $rowdb) {
                            $found = false;
                            foreach ($request->Flights as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionFlight::where('Oid', $rowdb->Oid)->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Flights as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionFlight::findOrFail($row->Oid);
                        else $detail = new TravelTransactionFlight();
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName','TravelFlightNumberName']);
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Flights');
                    $data->fresh();
                }
                
                if (isset($request->Itineraries)) {
                    if ($data->Itineraries()->count() != 0) {
                        $details = TravelTransactionItinerary::where('TravelTransaction', $data->Oid)->get();
                        foreach ($details as $rowdb) {
                            $found = false;
                            foreach ($request->Itineraries as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionItinerary::where('Oid', $rowdb->Oid)->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Itineraries as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionItinerary::findOrFail($row->Oid);
                        else $detail = new TravelTransactionItinerary();
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName']);
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Itineraries');
                    $data->fresh();
                }
                
                if ($ttype == 'outbound' && isset($request->SalesInvoiceDetails)) {
                    $salesInvoice = SalesInvoice::with('Details')->where('PointOfSale',$data->Oid)->first();
                    if ($salesInvoice->Details()->count() != 0) {
                        $details = SalesInvoiceDetail::where('SalesInvoice', $salesInvoice->Oid)->get();

                        foreach ($details as $rowdb) {
                            $found = false;
                            foreach ($request->SalesInvoiceDetails as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = SalesInvoiceDetail::where('Oid', $rowdb->Oid)->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->SalesInvoiceDetails as $row) {
                        if (isset($row->Oid)) $detail = SalesInvoiceDetail::findOrFail($row->Oid);
                        else $detail = new SalesInvoiceDetail();
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName','NationalityName']);
                        $detail->Company = $salesInvoice->Company;
                        $detail->SalesInvoice = $salesInvoice->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }
                
                if (isset($request->Passengers)) {
                    if ($data->Passengers()->count() != 0) {
                        $passenger = TravelTransactionPassenger::where('TravelTransaction', $data->Oid)->get();

                        foreach ($passenger as $rowdb) {
                            $found = false;
                            foreach ($request->Passengers as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionPassenger::where('Oid', $rowdb->Oid)->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Passengers as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionPassenger::findOrFail($row->Oid);
                        else $detail = new TravelTransactionPassenger();
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName','NationalityName']);
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->TravelIncomeExpenses)) {
                    if ($data->Details()->count() != 0) {
                        $trvtransactiondetails = TravelTransactionDetail::where('TravelTransaction', $data->Oid)->whereIn('OrderType', ['Income','Expense'])->get();

                        foreach ($trvtransactiondetails as $rowdb) {
                            $found = false;
                            foreach ($request->TravelIncomeExpenses as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionDetail::where('Oid', $rowdb->Oid)->whereIn('OrderType', ['Income','Expense'])->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->TravelIncomeExpenses as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionDetail::findOrFail($row->Oid);
                        else $detail = new TravelTransactionDetail();
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        $detail->Qty = 1;
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName']);                        

                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->OrderType = $detail->OrderType ?: 'Income';                        
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->TravelAttractionDetails)) {
                    if ($data->Details()->count() != 0) {
                        $trvtransactiondetails = TravelTransactionDetail::where('TravelTransaction', $data->Oid)->where('OrderType', 'Attraction')->get();

                        foreach ($trvtransactiondetails as $rowdb) {
                            $found = false;
                            foreach ($request->TravelAttractionDetails as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionDetail::where('Oid', $rowdb->Oid)->where('OrderType', 'Attraction')->firstOrFail();
                                $etickets = ETicket::where('PointOfSale', $data->Oid)->where('TravelTransactionDetail', $detail->Oid)->count();
                                if($etickets > 0) throw new \Exception('Data is failed to be delete');
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->TravelAttractionDetails as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionDetail::findOrFail($row->Oid);
                        else $detail = new TravelTransactionDetail();
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName','BusinessPartnerName']);
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->OrderType = 'Attraction';
                        $item = Item::with('ItemContentObj')->findOrFail($detail->Item);
                        $item->IsParent = $item->ItemContentObj->IsUsingContentFromParent == true && $item->ItemContentObj->ItemContentSource != null;
                        $item->ParentObj = !$item->IsParent ? $item->ItemContentObj : $item->ItemContentObj->SourceObj;
                        $detail->Name = $item->Subtitle;
                        $detail->Title = $item->ParentObj->Name;
                        $detail->BusinessPartner = $item->ParentObj->PurchaseBusinessPartner;
                        $detail->SalesDescription = substr($item->ParentObj->DescriptionEN, 0, 200);
                        $detail->PurchaseAdult = $item->PurchaseAdult;
                        $detail->PurchaseChild = $item->PurchaseChild;
                        $detail->PurchaseInfant = $item->PurchaseInfant;
                        $detail->PurchaseSenior = $item->PurchaseSenior;
                        $detail->Image = $item->ParentObj->Image1;
                        $detail->Date = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                        $detail->DateFrom = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                        $detail->DateUntil = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                        $detail->save();
                        $this->saveDetailSameField($detail, $item, $dataPOS);
                        $this->calculateDetailDateQty($detail);
                        $this->calculateDetailAmount($detail);
                        if(isset($row->APIType)) $detail->APIType = $row->APIType;
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }


                if ($ttype == 'web' && isset($request->TravelOutboundDetails)) {
                    if ($data->Details()->count() != 0) {
                        $trvtransactiondetails = TravelTransactionDetail::where('TravelTransaction', $data->Oid)->where('OrderType', 'Outbound')->get();
                        foreach ($trvtransactiondetails as $rowdb) {
                            $found = false;
                            foreach ($request->TravelOutboundDetails as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionDetail::where('Oid', $rowdb->Oid)->where('OrderType', 'Outbound')->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }
                    foreach ($request->TravelOutboundDetails as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionDetail::findOrFail($row->Oid);
                        else $detail = new TravelTransactionDetail();
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName']);   
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->OrderType = 'Outbound';
                        $item = Item::with('ItemContentObj')->findOrFail($detail->Item);
                        $item->IsParent = $item->ItemContentObj->IsUsingContentFromParent == true && $item->ItemContentObj->ItemContentSource != null;
                        $item->ParentObj = !$item->IsParent ? $item->ItemContentObj : $item->ItemContentObj->SourceObj;
                        $detail->Name = $item->Subtitle;
                        $detail->Title = $item->ParentObj->Name;
                        $detail->BusinessPartner = $item->ParentObj->PurchaseBusinessPartner;
                        $detail->SalesDescription = substr($item->ParentObj->DescriptionEN, 0, 200);
                        $detail->PurchaseSGL = $item->PurchaseSGL;
                        $detail->PurchaseTWN = $item->PurchaseTWN;
                        $detail->PurchaseTRP = $item->PurchaseTRP;
                        $detail->PurchaseQuad = $item->PurchaseQuad;
                        $detail->PurchaseQuint = $item->PurchaseQuint;
                        $detail->PurchaseCHT = $item->PurchaseCHT;
                        $detail->PurchaseCWB = $item->PurchaseCWB;
                        $detail->PurchaseCNB = $item->PurchaseCNB;
                        $detail->Image = $item->ParentObj->Image1;
                        $detail->Date = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                        $detail->DateFrom = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                        $detail->DateUntil = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                        $detail->save();
                        $this->saveDetailSameField($detail, $item, $dataPOS);
                        $this->calculateDetailDateQty($detail);
                        $this->calculateDetailAmount($detail);
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->TravelTransportDetails)) {
                    if ($data->Details()->count() != 0) {
                        $trvtransactiondetails = TravelTransactionDetail::where('TravelTransaction', $data->Oid)
                            ->where('OrderType', 'Transport')
                            ->get();

                        foreach ($trvtransactiondetails as $rowdb) {
                            $found = false;
                            foreach ($request->TravelTransportDetails as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionDetail::where('Oid', $rowdb->Oid)->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }
                    foreach ($request->TravelTransportDetails as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionDetail::findOrFail($row->Oid);
                        else $detail = new TravelTransactionDetail();
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName']);
                        if ($row->Qty == "") $row->Qty = 0;
                        if ($row->PurchaseAmount == "") $row->PurchaseAmount = 0;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->OrderType = 'Transport';
                        $detail->save();
                        if ($ttype == 'web') {
                            $item = Item::with('ItemContentObj')->findOrFail($detail->Item);
                            $item->IsParent = $item->ItemContentObj->IsUsingContentFromParent == true && $item->ItemContentObj->ItemContentSource != null;
                            $item->ParentObj = !$item->IsParent ? $item->ItemContentObj : $item->ItemContentObj->SourceObj;
                            $detail->Name = $item->Name;
                            $detail->Title = $item->ParentObj->Name;
                            $detail->BusinessPartner = $item->ParentObj->PurchaseBusinessPartner;
                            $detail->SalesDescription = $item->Description;
                            $detail->Image = $item->TravelItemTransportObj->TravelTransportBrandObj ? $item->TravelItemTransportObj->TravelTransportBrandObj->Image : null;
                            $detail->Date = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                            $detail->save();
                            $this->saveDetailSameField($detail, $item, $dataPOS);
                            $this->calculateDetailDateQty($detail);
                            $this->calculateDetailAmount($detail);
                        }
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->TravelRestaurantDetails)) {
                    if ($data->Details()->count() != 0) {
                        $trvtransactiondetails = TravelTransactionDetail::where('TravelTransaction', $data->Oid)->where('OrderType', 'Restaurant')->get();
                        foreach ($trvtransactiondetails as $rowdb) {
                            $found = false;
                            foreach ($request->TravelRestaurantDetails as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionDetail::where('Oid', $rowdb->Oid)->where('OrderType', 'Restaurant')->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->TravelRestaurantDetails as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionDetail::findOrFail($row->Oid);
                        else $detail = new TravelTransactionDetail();
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName']);
                        if ($row->QtyAdult == "") $row->QtyAdult = 0;

                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->OrderType = 'Restaurant';
                        $detail->save();
                        if ($ttype == 'web') {
                            $item = Item::with('ItemContentObj')->findOrFail($detail->Item);
                            $item->IsParent = $item->ItemContentObj->IsUsingContentFromParent == true && $item->ItemContentObj->ItemContentSource != null;
                            $item->ParentObj = !$item->IsParent ? $item->ItemContentObj : $item->ItemContentObj->SourceObj;
                            $detail->Name = $item->Subtitle;
                            $detail->Title = $item->ParentObj->Name;
                            $detail->BusinessPartner = $item->ParentObj->PurchaseBusinessPartner;
                            $detail->SalesDescription = substr($item->ParentObj->DescriptionEN, 0, 200);
                            $detail->PurchaseAdult = $item->PurchaseAdult;
                            $detail->PurchaseChild = $item->PurchaseChild;
                            $detail->PurchaseInfant = $item->PurchaseInfant;
                            $detail->PurchaseSenior = $item->PurchaseSenior;
                            $detail->Image = $item->ParentObj->Image1;
                            $detail->Date = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                            $detail->DateFrom = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                            $detail->DateUntil = Carbon::now()->addHours(company_timezone())->toDateTimeString();
                            $detail->save();
                            $this->saveDetailSameField($detail, $item, $dataPOS);
                            $this->calculateDetailDateQty($detail);
                            $this->calculateDetailAmount($detail);
                        }
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->TravelHotelDetails)) {  
                    if ($data->Details()->count() != 0) {
                        $trvtransactiondetails = TravelTransactionDetail::where('TravelTransaction', $data->Oid)->where('OrderType','Hotel')->get();
                        foreach ($trvtransactiondetails as $rowdb) {
                            $found = false;
                            foreach ($request->TravelHotelDetails as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelTransactionDetail::where('Oid', $rowdb->Oid)->where('OrderType', 'Hotel')->firstOrFail();
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->TravelHotelDetails as $row) {
                        if (isset($row->Oid)) $detail = TravelTransactionDetail::findOrFail($row->Oid);
                        else $detail = new TravelTransactionDetail();
                        $detail->Company = $dataPOS->Company;
                        $detail->TravelTransaction = $data->Oid;
                        $disabled = array_merge(disabledFieldsForEdit(), ['ItemName','ItemObj','BusinessPartnerObj','BusinessPartnerName','TravelHotelRoomTypeName']);
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->OrderType = 'Hotel';
                        $detail->save();
                        if ($ttype == 'web') {
                            $item = Item::with('ItemContentObj')->findOrFail($detail->Item);
                            $item->IsParent = $item->ItemContentObj->IsUsingContentFromParent == true && $item->ItemContentObj->ItemContentSource != null;
                            $item->ParentObj = !$item->IsParent ? $item->ItemContentObj : $item->ItemContentObj->SourceObj;
                            $detail->Name = $item->Name;
                            $detail->Title = $item->ParentObj->Name;
                            $detail->BusinessPartner = $item->ParentObj->PurchaseBusinessPartner;
                            $detail->Image = $item->ParentObj->Image1;
                            $detail->save();
                            $this->saveDetailSameField($detail, $item, $dataPOS);
                            $this->calculateDetailDateQty($detail);
                            $this->calculateDetailAmount($detail);
                        }
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                $subTotalAmount = 0;
                foreach ($data->Details as $row) $subTotalAmount += $row->SalesTotal;
                $dataPOS->SubtotalAmount = $subTotalAmount;
                $dataPOS->save();
                $this->calcTotal($dataPOS, $data);
                $data = $this->show($dataPOS);
            });

            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
    
    private function calcTotal(PointOfSale $data, TravelTransaction $travelTransaction)
    {
        $cur = Currency::findOrFail($data->Currency);

        $tt = $travelTransaction;
        $pos = $data;

        //main
        $tt->QtyTotalPax = $tt->QtyAdult + $tt->QtyCWB + $tt->QtyCNB + $tt->QtyInfant + $tt->QtyTL + $tt->QtyExBed;
        // $tt->AmountTourFarePerPax = user input
        $tt->AmountTourFareTotal = $tt->QtyTotalPax * $tt->AmountTourFarePerPax;
        $tt->AmountAgentCommission = $tt->QtyTotalPax * $tt->AmountAgentCommissionPerHead;
        //$tt->AmountTourFareNett

        //optional 1
        // $tmp = TravelTransactionDetail::where('TravelTransaction',$tt->Oid)->where('SalesIncludeOptional','Optional1')->where('OrderType','Attraction')->get();
        $tmp = TravelTransactionDetail::where('TravelTransaction',$tt->Oid)->where('SalesIncludeOptional','Optional1')->where('OrderType','Attraction')->get();
        $tmpAmount = 0;
        foreach($tmp as $row) $tmpAmount += $row->PurchaseAdult * $row->QtyAdult;
        $tt->OptionalTour1AmountTicket = $tmpAmount;
        $tt->OptionalTour1TicketAdultTotal = $tt->OptionalTour1TicketAdult * $tt->OptionalTour1TicketAdultAmount;
        $tt->OptionalTour1TicketChildTotal = $tt->OptionalTour1TicketChild * $tt->OptionalTour1TicketChildAmount;
        $tt->OptionalTour1TicketSeniorTotal = $tt->OptionalTour1TicketSenior * $tt->OptionalTour1TicketSeniorAmount;        
        $tt->OptionalTour1AmountTourBalanceTotal = $tt->OptionalTour1AmountTicket + $tt->OptionalTour1AmountTourBalance;
        
        //optional 2
        $tmp = TravelTransactionDetail::where('TravelTransaction',$tt->Oid)->where('SalesIncludeOptional','Optional2')->where('OrderType','Attraction')->get();
        $tmpAmount = 0;
        foreach($tmp as $row) $tmpAmount += $row->PurchaseAdult * $row->QtyAdult;
        $tt->OptionalTour2AmountTicket = $tmpAmount;
        $tt->OptionalTour2TicketAdultTotal = $tt->OptionalTour2TicketAdult * $tt->OptionalTour2TicketAdultAmount;
        $tt->OptionalTour2TicketChildTotal = $tt->OptionalTour2TicketChild * $tt->OptionalTour2TicketChildAmount;
        $tt->OptionalTour2TicketSeniorTotal = $tt->OptionalTour2TicketSenior * $tt->OptionalTour2TicketSeniorAmount;
        $tt->OptionalTour2AmountTourBalanceTotal = $tt->OptionalTour2AmountTicket + $tt->OptionalTour2AmountTourBalance;
        
        //Income
        $tmp = TravelTransactionDetail::where('TravelTransaction',$tt->Oid)->where('OrderType','Income')->get();
        $tmpAmount = 0;
        foreach($tmp as $row) $tmpAmount += $row->PurchaseAmount;
        $tt->IncomeOther = $tmpAmount;
        $tt->IncomeBalanceToCompany = $tt->IncomeTourLeader + $tt->IncomeTourGuide + $tt->IncomeToCompany + 
            $tt->IncomeExchangeRate + $tt->IncomeSerdiz + $tt->IncomeTipsToCompany + $tt->IncomeOther;
            
        //Expense
        $tmp = TravelTransactionDetail::where('TravelTransaction',$tt->Oid)->where('OrderType','Expense')->get();
        $tmpAmount = 0;
        foreach($tmp as $row) $tmpAmount += $row->PurchaseAmount;
        $tt->ExpenseOther = $tmpAmount;
        $tt->ExpenseBalanceToGuide = $tt->ExpenseDriver + $tt->ExpensePorter + $tt->ExpenseLuggage + 
            $tt->ExpenseWater + $tt->ExpenseTaxi + $tt->ExpenseCombiCoach + $tt->ExpenseTourGuideTips + 
            $tt->ExpenseTourGuideFee + $data->ExpenseOther;
        $tt->save();

        //pos
        $pos->TotalAmount = $pos->SubtotalAmount + $pos->AdditionalAmount - $pos->DiscountPercentageAmount - $pos->DiscountAmount + $pos->ConvenienceAmount + $pos->AdmissionAmount;
        $pos->SubtotalAmountBase = $cur->toBaseAmount($pos->SubtotalAmount, $pos->RateAmount);
        $pos->TotalAmount = $pos->SubtotalAmount + $pos->AdditionalAmount - $pos->DiscountPercentageAmount - $pos->DiscountAmount + $pos->ConvenienceAmount + $pos->AdmissionAmount;
        $pos->TotalAmountBase = $cur->toBaseAmount($pos->TotalAmount, $pos->RateAmount);
        $rate = $pos->RateAmount;
        $pos->DiscountAmountBase = $cur->toBaseAmount($pos->DiscountAmount, $rate) ?: 0;
        $pos->ConvenienceAmountBase = $cur->toBaseAmount($pos->ConvenienceAmount, $rate) ?: 0;
        $pos->AdditionalAmountBase = $cur->toBaseAmount($pos->AdditionalAmount, $rate) ?: 0;
        $pos->AdmissionAmountBase = $cur->toBaseAmount($pos->AdmissionAmount, $rate) ?: 0;
        $pos->TotalAmountBase = $cur->toBaseAmount($pos->TotalAmount, $rate) ?: 0;
        $pos->save();
        $pos->fresh();
    }

    public function entry(PointOfSale $data)
    {
        try {
            $this->posStatusService->setEntry($data);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function paid(PointOfSale $data)
    {
        try {
            $this->posStatusService->setPaid($data);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function completed(PointOfSale $data)
    {
        try {
            $this->posStatusService->setCompleted($data);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function cancelled(PointOfSale $data)
    {
        try {
            $this->posStatusService->setCancelled($data);
            $data->CancelledDate = Carbon::now();
            $data->save();
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }


    public function destroy(PointOfSale $data)
    {
        try {
            DB::transaction(function () use ($data) {
                // $data->Details()->delete();
                $data->ETickets()->delete();
                // $data->delete();
                $gcrecord = now()->format('ymdHi');
                $data->GCRecord = $gcrecord;
                $data->save();
                foreach ($data->Details as $row) {
                    $row->GCRecord = $gcrecord;
                    $row->save();
                }
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function upload(Request $request, $Oid = null)
    {
        $input = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF

        try {
            DB::transaction(function () use ($input, $request, &$data, $Oid) {

                // $request->file('POSEticketFile')->storeAs(
                //     '', $data->FileName);

                $files = $request->file('POSEticketFile');
                foreach ($files as $key => $value) {
                    $eticket = $this->posETicketService->create($value, [
                        'PointOfSale' => $Oid,
                        'Item' => null,
                        'CostPrice' => null,
                        'DateExpiry' => null,
                    ]);
                    $result[] = $eticket->Oid;
                }
            });

            $data = PointOfSale::with(['Details','ETickets','TravelDetails','Logs'])->findOrFail($Oid);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deleteEticket(Request $request, $Oid = null)
    {
        try {
            DB::transaction(function () use ($request, &$data, $Oid) {
                $data = POSETicketUpload::findOrFail($Oid);
                $data->delete();
            });

            return response()->json(
                null,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    private function generateRole(PointOfSale $data, $role = null, $action = null)
    {
        if ($data instanceof PointOfSale) $status = $data->StatusObj;
        else $status = $data->Status;
        if (!$role) $role = $this->roleService->list('TravelTransactionFIT');
        if (!$action) $action = $this->roleService->action('TravelTransactionFIT');

        return [
            'IsRead' => $role->IsRead,
            'IsAdd' => $role->IsAdd,
            'IsEdit' => $this->roleService->isAllowDelete($data->StatusObj, $role->IsEdit),
            'IsDelete' => 0, //$this->roleService->isAllowDelete($row->StatusObj, $role->IsDelete),
            'Cancel' => $this->roleService->isAllowCancel($data->StatusObj, $action->Cancel),
            'Complete' => $this->roleService->isAllowComplete($data->StatusObj, $action->Complete),
            'Entry' => $this->roleService->isAllowEntry($data->StatusObj, $action->Entry),
            'Paid' => $this->roleService->isAllowPaid($data->StatusObj, $action->Paid),
            // 'Post' => $this->roleService->isAllowPost($data->StatusObj, $action->Posted),
            'ViewJournal' => $this->roleService->isPosted($data->StatusObj, 1),
            'ViewStock' => $this->roleService->isPosted($data->StatusObj, 1),
            'Print' => $this->roleService->isPosted($data->StatusObj, 1),
        ];
    }

    public function calculateDetailDateQty(&$detail)
    {
        $item = $detail->ItemObj;
        $itemType = $item->ItemTypeObj->Code;

        if ($detail->Type == 5) {
            $detail->Quantity = 1;
        } else if ($detail->Type == 0) {
            $detail->Quantity = 1;
        } else {
            $detail->QtyWeekday = 0;
            $detail->QtyWeekend = 0;
            if ($itemType != 'Transport') {
                $detail->QtyDay = 0;
                if (isset($detail->DateFrom) && isset($detail->DateUntil)) {
                    $start = Carbon::parse($detail->DateFrom);
                    $end = Carbon::parse($detail->DateUntil);
                    while ($start->lt($end)) {
                        if ($start->isWeekday()) $detail->QtyWeekday++;
                        if ($start->isWeekend()) $detail->QtyWeekend++;
                        $start->addDay(1);
                        $detail->QtyDay++;
                    }
                }
            }
            if ($itemType == 'Ferry') $detail->QtyDay = 0;
            $detail->Quantity = ($detail->Qty * ($detail->QtyDay == 0 ? 1 : $detail->QtyDay)) + $detail->QtyAdult + $detail->QtyChild + $detail->QtyInfant +
                $detail->QtySGL + $detail->QtyTWN + $detail->QtyQuad + $detail->QtyQuint + $detail->QtyCHT + $detail->QtyCWB + $detail->QtyCNB;
        }
        $detail->save();
    }

    public function calculateDetailAmount(&$detail)
    {
        if (!is_null($detail->Item)) {
            // $currency = $detail->PointOfSaleObj->CurrencyObj;
            // $rate = $currency->getRate();
            $rate = $detail->SalesRate;
            if (empty($rate)) {
                $rate = $detail->PointOfSaleObj->CurrencyObj->getRate()->MidRate;
                $detail->SalesRate = $rate;
            }

            $item = $detail->ItemObj;
            $itemType = $item->ItemType ? $item->ItemTypeObj->Code : $item->ItemGroupObj->ItemTypeObj->Code;
            if ($itemType == 'Ferry') {
                if ($detail->Passengers->count() > 0) {
                    $detail->SalesAmount = 0;
                    $detail->PurchaseAmount = 0;
                    foreach ($detail->Passengers as $passenger) {
                        $detail->SalesAmount = $detail->SalesAmount + $passenger->FerryDeparture;
                        $detail->PurchaseAmount = $detail->PurchaseAmount + $passenger->FerryDepartureCost;
                    }
                } else $detail->SalesAmount = $detail->Qty * $detail->SalesAmount;
                $detail->Qty = 1;
            }
            $cur = Currency::findOrFail($detail->SalesCurrency);
            //BY WILLIAM SER 20191010 SEMENTARA TIDAK PAKE QTYWKEND QTYWKDAY SALESWKEND SALESWKDAY
            // $detail->SalesSubtotal = ($detail->SalesWeekday * ($detail->QtyWeekday * $detail->Qty)) + 
            // ($detail->SalesWeekend * ($detail->QtyWeekend * $detail->Qty)) + 
            // ($detail->SalesAdult * $detail->QtyAdult) + 
            // ($detail->SalesChild * $detail->QtyChild) + 
            // ($detail->SalesInfant * $detail->QtyInfant) + 
            // ($detail->SalesAmount * $detail->Qty);

            if ($itemType == 'Hotel' || $itemType == 'ApitudeH') { //($detail->QtyTRP * $detail->SalesTRP) +
                $detail->SalesSubtotal = ($detail->SalesAmount) + ($detail->SalesAdult * $detail->QtyAdult) + ($detail->SalesChild * $detail->QtyChild) + ($detail->SalesInfant * $detail->QtyInfant) + ($detail->SalesSenior * $detail->QtySenior);
                $detail->SalesSubtotal = $detail->SalesSubtotal + ($detail->QtySGL * $detail->SalesSGL) + ($detail->QtyTWN * $detail->SalesTWN) +  ($detail->QtyQuad * $detail->SalesQuad) + ($detail->QtyQuint * $detail->SalesQuint) + ($detail->QtyCHT * $detail->SalesCHT) + ($detail->QtyCWB * $detail->SalesCWB) + ($detail->QtyCNB * $detail->SalesCNB);
                $detail->SalesTotal = $detail->SalesSubtotal;
                $detail->SalesTotalBase = $cur->ToBaseAmount($detail->SalesTotal, $rate);
            } else {
                $detail->SalesSubtotal = ($detail->SalesAmount * (($detail->QtyDay ?: 1) * $detail->Qty)) + ($detail->SalesAdult * $detail->QtyAdult) + ($detail->SalesChild * $detail->QtyChild) + ($detail->SalesInfant * $detail->QtyInfant) + ($detail->SalesSenior * $detail->QtySenior);
                $detail->SalesSubtotal = $detail->SalesSubtotal + ($detail->QtySGL * $detail->SalesSGL) + ($detail->QtyTWN * $detail->SalesTWN) + ($detail->QtyTRP * $detail->SalesTRP) + ($detail->QtyQuad * $detail->SalesQuad) + ($detail->QtyQuint * $detail->SalesQuint) + ($detail->QtyCHT * $detail->SalesCHT) + ($detail->QtyCWB * $detail->SalesCWB) + ($detail->QtyCNB * $detail->SalesCNB);

                $detail->SalesTotal = $detail->SalesSubtotal;
                $detail->SalesTotalBase = $cur->ToBaseAmount($detail->SalesTotal, $rate);
            }

            $rate = $detail->PurchaseRate;
            if (empty($rate)) {
                $rate = $detail->ItemObj->PurchaseCurrencyObj->getRate()->MidRate;
                $detail->PurchaseRate = $rate;
            }

            $detail->PurchaseSubtotal = ($detail->PurchaseWeekday * ($detail->QtyWeekday * $detail->Qty)) + ($detail->PurchaseWeekend * ($detail->QtyWeekend * $detail->Qty)) + ($detail->PurchaseAdult * $detail->QtyAdult) + ($detail->PurchaseChild * $detail->QtyChild) + ($detail->PurchaseInfant * $detail->QtyInfant) + ($detail->PurchaseSenior * $detail->QtySenior) + ($detail->PurchaseAmount * $detail->Qty);
            $detail->PurchaseTotal = $detail->PurchaseSubtotal;
            $detail->PurchaseTotalBase = $cur->ToBaseAmount($detail->PurchaseTotal, $rate);

            $detail->save();
        }
    }

    private function saveDetailSameField($detail, $item, $pos)
    {
        $currency = $pos->CurrencyObj;
        $rate = $currency->getRate();
        $detail->ItemGroup = $item->ItemGroup;
        $detail->ItemType = $item->ItemGroupObj->ItemType;
        $detail->ItemContent = $item->ItemContent;
        $detail->ItemContentParent = $item->ItemContent ? $item->ItemContentObj->ItemContentParent : $item->ItemContent;
        $detail->ItemContentSource = $item->ItemContent ? $item->ItemContentObj->ItemContentSource : $item->ItemContent;
        $detail->SalesCurrency = $pos->Currency;
        $detail->Status = Status::entry()->value('Oid');
        $detail->SalesRate = $rate->MidRate;
        $detail->PurchaseCurrency = $item->ParentObj->PurchaseCurrency;
        $detail->PurchaseDate = now()->toDateString();
        $detail->PurchaseCurrency = isset($item->ItemContent) ? $item->ParentObj->PurchaseCurrency : $item->PurchaseCurrency;
        $detail->PurchaseRate = isset($item->ItemContent) ? $item->ParentObj->PurchaseCurrencyObj->getRate()->MidRate : $item->PurchaseCurrencyObj->getRate()->MidRate;
        $detail->APIType = isset($item->ItemContent) ? $item->ParentObj->APIType : $item->APIType;
        $detail->save();
    }   

    public function statusInhousePosted(Request $request){
        $data = PointOfSale::where('Oid',$request->input('traveltransaction'))->first();
        $user = Auth::user();
        try {
            DB::transaction(function () use (&$data) {
                $data->Status = Status::where('Code','posted')->first()->Oid;
                $data->save();
        });
        $this->auditService->create($data, [
            'Module' => 'Status',
            'Description' => 'Change status to be Posted',
            'Message' => 'Change status to be Posted',
            'User' => $user
        ]);

        return response()->json(
            $this->show($data),
            Response::HTTP_CREATED
        );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function statusInhouseEntry(Request $request){
        $data = PointOfSale::where('Oid',$request->input('traveltransaction'))->first();
        try {
            DB::transaction(function () use (&$data) {
                $data->Status = Status::where('Code','entry')->first()->Oid;
                $data->save();
        });
        $user = Auth::user();
        $this->auditService->create($data, [
            'Module' => 'Status',
            'Description' => 'Change status to be Entry',
            'Message' => 'Change status to be Entry',
            'User' => $user
        ]);

        return response()->json(
            $this->show($data),
            Response::HTTP_CREATED
        );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function eticketAttractionList($Oid) {
        $data = ETicket::with('ItemObj')->select(['Code','Item','DateValidFrom','DateExpiry','URL'])->where('TravelTransactionDetail',$Oid)->get();
        foreach($data as $row) {
            $action = $this->roleService->action('PurchaseInvoice');
            $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;            
            $row->Action = [
                [
                    'name' => 'Open',
                    'icon' => 'ViewIcon',
                    'type' => 'open_report',
                    'post' => $row->URL,
                ]
            ];
            unset($row->ItemObj);
            unset($row->URL);
        }
        return $data;
    }

    public function eticketmanualprocess(Request $request)
    {
        try {
            DB::transaction(function () use ($request, &$data) {
                $detail = TravelTransactionDetail::findOrFail($request->input('traveltransaction'));
                $req = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
                $etickets = []; // textarea multirow
                $eticketscount = 0;
                foreach (preg_split("/((\r?\n)|(\r\n?))/", $req->eticketlist) as $line) {
                    $etickets = array_merge($etickets, [$line]);
                    $eticketscount += 1;
                }
                $tmp = ETicket::where('PointOfSale',$detail->TravelTransaction)->where('TravelTransactionDetail',$detail->Oid)->where('Item',$detail->Item)->get();
                if ($detail->QtyAdult - $tmp->count() < $eticketscount) if (!$data) throw new \Exception('Too many tickets allocated');
                $data = ETicket::whereIn('Code',$etickets)->whereNull('PointOfSale')->whereNull('TravelTransactionDetail')->where('Item',$detail->Item)->get();
                foreach ($data as $row) {
                    $row->PointOfSale = $detail->TravelTransaction;
                    $row->TravelTransactionDetail = $detail->Oid;
                    $row->save();

                    $detail = new POSETicketLog();
                    $detail->POSEticket = $row->Oid;
                    $detail->PointOfSale = $detail->TravelTransaction;
                    $detail->CostPrice = $row->CostPrice;
                    $detail->DateValidFrom = Carbon::parse($row->DateValidFrom)->format('Y-m-d');
                    $detail->DateExpiry = Carbon::parse($row->DateExpiry)->format('Y-m-d');
                    $detail->Description = 'Manual Allocation Withdraw';
                    $detail->save();
                }
            });

            return response()->json(
                $data,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
