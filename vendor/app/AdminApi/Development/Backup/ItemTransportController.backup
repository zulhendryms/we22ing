<?php

namespace App\AdminApi\Master\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\Item;
use App\Core\Master\Entities\ItemContent;
use App\Core\Travel\Entities\TravelItemTransport;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Internal\Entities\ItemType;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;


class ItemTransportController extends Controller
{
    protected $roleService;
    public function __construct(RoleModuleService $roleService)
    {
        $this->roleService = $roleService;
    }
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE$fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Oid');
        $fields[] = ['w'=> 250, 'h'=>0, 't'=>'combo', 'n'=>'PurchaseBusinessPartner', 'f'=>'bp.Name',];
        $fields[] = ['w'=> 0, 'r'=>1, 't'=>'combo', 'n'=>'TravelTransportBrand', 'f'=>'ttb.Name', 'j'=>'tit.TravelTransportBrand'];
        $fields[] = ['w'=> 0, 'r'=>1, 't'=>'combo', 'n'=>'City', 'f'=>'cit.Name'];
        $fields[] = ['w'=> 250, 'r'=>1, 't'=>'text', 'n'=>'Subtitle'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'textarea', 'n'=>'Description'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'textarea', 'n'=>'DescriptionZH'];
        $fields[] = serverSideConfigField('IsActive');
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'date', 'n'=>'DateStart'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'date', 'n'=>'DateEnd'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'amount', 'n'=>'PurchaseAmount'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'int', 'n'=>'Year', 'f'=>'tit.Year',];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'int', 'n'=>'Capacity', 'f'=>'tit.Capacity',];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'amount', 'n'=>'PurchaseHourly', 'f'=>'tit.PurchaseHourly'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'amount', 'n'=>'PurchaseWeekday', 'f'=>'tit.PurchaseWeekday'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'amount', 'n'=>'PurchaseWeekend', 'f'=>'tit.PurchaseWeekend'];
        return $fields;
    }

    public function config(Request $request) {
        $fields = serverSideFields($this->fields());
        foreach ($fields as &$row) { //combosource
            if ($row['headerName'] == 'TravelTransportBrand') $row['source'] = comboSelect('trvtransportbrand');
            elseif ($row['headerName'] == 'City') $row['source'] = comboSelect('mstcity');
            elseif ($row['headerName']  == 'Company') $row['source'] = comboselect('company');
        }
        $fields[0]['cellRenderer'] = 'actionCell';
        $fields[0]['topButton'] =[
            [
            'name' => 'Add New',
            'icon' => 'PlusIcon',
            'type' => 'add'
            ]
        ];
        return $fields;
    }
    public function list(Request $request) {
        $itemType = ItemType::where('Code','Transport')->first()->Oid;
        $fields = $this->fields();
        $data = DB::table('mstitem as data') //jointable
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->leftJoin('trvitemtransport AS tit', 'tit.Oid', '=', 'data.Oid')
            ->leftJoin('mstbusinesspartner AS bp', 'bp.Oid', '=', 'data.PurchaseBusinessPartner')
            ->leftJoin('mstcity AS cit', 'cit.Oid', '=', 'data.City')
            ->leftJoin('trvtransportbrand AS ttb', 'ttb.Oid', '=', 'tit.TravelTransportBrand')
            ->where('data.ItemType',$itemType)
            ;
        $data = serverSideQuery($data, $fields, $request, 'mstitem', 'PurchaseBusinessPartner');
        $role = $this->roleService->list('ItemTransport'); //rolepermission
        foreach($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }


    public function getItemTransport($Oid = null)
    {
        try {
            $itemType = ItemType::where('Code','Transport')->first();
            $data1 = Item::with(['PurchaseBusinessPartnerObj'])->where('Oid',$Oid)->where('ItemType',$itemType->Oid)->first();
            $data1->PurchaseBusinessPartnerName = $data1->PurchaseBusinessPartner ? $data1->PurchaseBusinessPartnerObj->Name.' - '.$data1->PurchaseBusinessPartnerObj->Code : null;
            $data2 = TravelItemTransport::with(['TravelTransportBrandObj'])->where('Oid',$Oid)->first();
            $data2->TravelTransportBrandName = $data2->TravelTransportBrand ? $data2->TravelTransportBrandObj->Name : null;
            
            $data1 = collect($data1);
            $data = $data1->merge($data2);
            
            return response()->json(
                $data,
                Response::HTTP_OK
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }


    public function saveItemTransport(Request $request, $Oid = null)
    {  
        $company = Auth::user()->CompanyObj;
        $itemParent = ItemContent::with('ItemTypeObj.ItemTypePriceMethodObj')->findOrFail($company->ItemContentTransport);
        // $itemParent = ItemContent::with('ItemTypeObj.ItemTypePriceMethodObj')->findOrFail('60ef3716-21ae-11ea-9024-1a582ceaab05'); //$request->input('item')
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        try {
            if (!$Oid) $data = new Item();
            else $data = Item::findOrFail($Oid);

            DB::transaction(function () use ($request,$itemParent,&$data) {
                $enabled = ['Subtitle','IsActive','Description','DescriptionZH','DescriptionID','PurchaseAmount','DateStart','DateEnd','IsUsingPriceMethod','IsFeaturedItem','City','PurchaseBusinessPartner'];
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $data->{$field} = $request->{$field};
                }
                $data->ItemType = ItemType::where('Code','Transport')->first()->Oid;
                $data->IsUsingPriceMethod = true;
                $this->saveItemFromParent($data, $itemParent);
                $data->save();

                $dataTransport = TravelItemTransport::where('Oid',$data->Oid)->first();  
                if (!$dataTransport) { 
                    $dataTransport = new TravelItemTransport();
                    $dataTransport->Oid = $data->Oid; 
                }
                $enabled = ['Year','Capacity','PurchaseHourly','PurchaseWeekday','PurchaseWeekend','TravelTransportBrand'];                
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $dataTransport->{$field} = $request->{$field};
                }

                $ipm = $itemParent->IsUsingPriceMethod ? $data->ItemTypeObj->ItemTypePriceMethodObj : $itemParent;
                if($data->IsUsingPriceMethod == true){
                    if (isset($ipm)) {
                        if (isset($ipm->SalesAddMethod)) $dataTransport->SalesHourly = $this->calcPriceTrans('', $ipm, $dataTransport,'Hourly');
                        if (isset($ipm->SalesAddMethod)) $dataTransport->SalesWeekday = $this->calcPriceTrans('', $ipm, $dataTransport,'Weekday');
                        if (isset($ipm->SalesAddMethod)) $dataTransport->SalesWeekend = $this->calcPriceTrans('', $ipm, $dataTransport,'Weekend');

                        if (isset($ipm->SalesAdd1Method)) $dataTransport->SalesHourly1 = $this->calcPriceTrans('1', $ipm, $dataTransport,'Hourly');
                        if (isset($ipm->SalesAdd1Method)) $dataTransport->SalesWeekday1 = $this->calcPriceTrans('1', $ipm, $dataTransport,'Weekday');
                        if (isset($ipm->SalesAdd1Method)) $dataTransport->SalesWeekend1 = $this->calcPriceTrans('1', $ipm, $dataTransport,'Weekend');

                        if (isset($ipm->SalesAdd2Method)) $dataTransport->SalesHourly2 = $this->calcPriceTrans('2', $ipm, $dataTransport,'Hourly');
                        if (isset($ipm->SalesAdd2Method)) $dataTransport->SalesWeekday2 = $this->calcPriceTrans('2', $ipm, $dataTransport,'Weekday');
                        if (isset($ipm->SalesAdd2Method)) $dataTransport->SalesWeekend2 = $this->calcPriceTrans('2', $ipm, $dataTransport,'Weekend');

                        if (isset($ipm->SalesAdd3Method)) $dataTransport->SalesHourly3 = $this->calcPriceTrans('3', $ipm, $dataTransport,'Hourly');
                        if (isset($ipm->SalesAdd3Method)) $dataTransport->SalesWeekday3 = $this->calcPriceTrans('3', $ipm, $dataTransport,'Weekday');
                        if (isset($ipm->SalesAdd3Method)) $dataTransport->SalesWeekend3 = $this->calcPriceTrans('3', $ipm, $dataTransport,'Weekend');

                        if (isset($ipm->SalesAdd4Method)) $dataTransport->SalesHourly4 = $this->calcPriceTrans('4', $ipm, $dataTransport,'Hourly');
                        if (isset($ipm->SalesAdd4Method)) $dataTransport->SalesWeekday4 = $this->calcPriceTrans('4', $ipm, $dataTransport,'Weekday');
                        if (isset($ipm->SalesAdd4Method)) $dataTransport->SalesWeekend4 = $this->calcPriceTrans('4', $ipm, $dataTransport,'Weekend');

                        if (isset($ipm->SalesAdd5Method)) $dataTransport->SalesHourly5 = $this->calcPriceTrans('5', $ipm, $dataTransport,'Hourly');
                        if (isset($ipm->SalesAdd5Method)) $dataTransport->SalesWeekday5 = $this->calcPriceTrans('5', $ipm, $dataTransport,'Weekday');
                        if (isset($ipm->SalesAdd5Method)) $dataTransport->SalesWeekend5 = $this->calcPriceTrans('5', $ipm, $dataTransport,'Weekend');
                    } else {
                        $dataTransport->SalesHourly = $dataTransport->PurchaseHourly;
                        $dataTransport->SalesWeekday = $dataTransport->PurchaseWeekday;
                        $dataTransport->SalesWeekend = $dataTransport->PurchaseWeekend;
                        $dataTransport->save();
                    }
                }else{
                    $dataTransport->SalesHourly = $request->SalesHourly;
                    $dataTransport->SalesWeekday = $request->SalesWeekday;
                    $dataTransport->SalesWeekend = $request->SalesWeekend;

                    $dataTransport->SalesHourly1 = $request->SalesHourly1;
                    $dataTransport->SalesWeekday1 = $request->SalesWeekday1;
                    $dataTransport->SalesWeekend1 = $request->SalesWeekend1;

                    $dataTransport->SalesHourly2 = $request->SalesHourly2;
                    $dataTransport->SalesWeekday2 = $request->SalesWeekday2;
                    $dataTransport->SalesWeekend2 = $request->SalesWeekend2;

                    $dataTransport->SalesHourly3 = $request->SalesHourly3;
                    $dataTransport->SalesWeekday3 = $request->SalesWeekday3;
                    $dataTransport->SalesWeekend3 = $request->SalesWeekend3;

                    $dataTransport->SalesHourly4 = $request->SalesHourly4;
                    $dataTransport->SalesWeekday4 = $request->SalesWeekday4;
                    $dataTransport->SalesWeekend4 = $request->SalesWeekend4;

                    $dataTransport->SalesHourly5 = $request->SalesHourly5;
                    $dataTransport->SalesWeekday5 = $request->SalesWeekday5;
                    $dataTransport->SalesWeekend5 = $request->SalesWeekend5;

                }

                $dataTransport->save();

                $itemParent->IsParent = true;
                $itemParent->save();
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new Item($data))->type('detail');
            $data = $this->getItemTransport($data->Oid);
            $role = $this->roleService->list('ItemTransport'); //rolepermission
            $data->Role = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    private function saveItemFromParent($data, $itemParent) {
        if (!$data->Code) $data->Code = now()->format('ymdHis').'-'.str_random(3);
        $data->Company = $itemParent->Company;
        $data->ItemContent = $itemParent->Oid;
        $data->Name = $itemParent->Name.' - '.$data->Subtitle;
        $data->ItemGroup = $itemParent->ItemGroup;
        $data->ItemAccountGroup = $itemParent->ItemAccountGroup;
        $data->ItemUnit = $itemParent->ItemUnit;
        $data->PurchaseCurrency = $itemParent->PurchaseCurrency;
        $data->SalesCurrency = $itemParent->SalesCurrency;
        $data->APIType = $itemParent->APIType;
        $data->IsAllotment = $itemParent->IsAllotment;
        $data->IsStock = $itemParent->IsStock;
        $data->IsParent = false;
        $data->IsDetail = true;
        $data->save();
    }

    public function deleteItemTransport($Oid = null)
    {
        try {            
            DB::transaction(function () use ($Oid) {
                $data = Item::findOrFail($Oid); 
                $data->TravelItemTransportObj()->delete();
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
