<?php

namespace App\AdminApi\Security\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Internal\Entities\Role;
use App\Core\Internal\Entities\RoleModule;
use App\Core\Internal\Entities\RoleModuleCustom;
use App\Core\Security\Resources\RoleModuleCollection;
use App\Core\Security\Resources\RoleModuleResource;
use App\Core\Internal\Entities\ModulesParent;
use Illuminate\Support\Facades\Auth;

class RoleModuleController extends Controller
{
    // TODO:
    // run code below
    // INSERT INTO rolemodules (Oid,Role,Modules,ModulesOid) SELECT UUID(),'08095806-7a05-4d38-8fdd-86fc1e1ac410',Code,Oid FROM sysmodules s
    
    public function index(Request $request)
    {
        $company = Auth::user()->CompanyObj;
        $user = Auth::user();
        $modules = "";
        if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
        if ($company->ModulePOS) $modules = $modules.($modules ? "," : "")."'pos'";
        if ($company->ModuleTravel) $modules = $modules.($modules ? "," : "")."'travel'";
        if ($company->ModuleAccounting) $modules = $modules.($modules ? "," : "")."'accounting'";
        if ($company->ModuleProduction) $modules = $modules.($modules ? "," : "")."'production'";
        if ($company->ModuleTrucking) $modules = $modules.($modules ? "&" : "?")."trucking=1";
        $type = $request->input('type') ?: 'combo';

        if ($request->input('type') == 'menu') {            
            $query = "SELECT r.Navigation
                FROM user u 
                LEFT OUTER JOIN role r ON r.Oid = u.Role
                WHERE u.Oid = '".$user->Oid."' AND Navigation IS NOT NULL LIMIT 1";
            $data = DB::select($query);
            return response()->json(
                $data[0]->Navigation, Response::HTTP_OK
            );
        }
        if ($request->input('type') == 'detail') {            
            $query = "SELECT rm.Oid, rm.Role, m.Code AS Modules, m.Name, CONCAT('/',m.Url) AS Url,
                CASE WHEN mp2.Code IS NULL THEN mp1.Code ELSE mp2.Code END AS ParentCode,
                CASE WHEN mp2.Name IS NULL THEN mp1.Name ELSE mp2.Name END AS ParentName,
                rm.IsRead, rm.IsAdd, rm.IsEdit, rm.IsDelete                
                FROM sysmodulesrelationship mr
                LEFT OUTER JOIN sysmodules m ON m.Code = mr.Modules
                LEFT OUTER JOIN sysmodulesparent mp1 ON mp1.Code = m.ModulesParent
                LEFT OUTER JOIN sysmodulesparent mp2 ON mp2.Code = mp1.Parent
                LEFT OUTER JOIN user u ON u.Oid = '".$user->Oid."'
                LEFT OUTER JOIN rolemodules rm ON rm.Modules = mr.Modules AND rm.Role = u.Role
                WHERE mr.ModulesGroup IN (".$modules.") AND rm.Oid IS NOT NULL AND rm.IsRead = 1
                GROUP BY m.Code, rm.Oid, rm.Role, m.Name, rm.IsRead, rm.IsAdd, rm.IsEdit, rm.IsDelete";
            $data = DB::select($query);
            $query = "SELECT rmc.Oid, rm.Role, rmc.Modules, rmc.Action, rmc.IsEnable
                FROM user u
                LEFT OUTER JOIN rolemodules rm ON rm.Role = u.Role
                LEFT OUTER JOIN rolemodulescustom rmc ON rmc.Role = u.Role AND rm.Modules = rmc.Modules
                WHERE rm.Oid IS NOT NULL AND rm.IsRead = 1 AND rmc.IsEnable = 1 AND u.Oid = '".$user->Oid."'
                GROUP BY rmc.Oid, rm.Role, rmc.Modules, rmc.Action";
            $datacustom = DB::select($query);
            foreach($datacustom as $rowcustom) {
                foreach($data as $row) {
                    if ($rowcustom->Modules == $row->Modules) {
                        $row->{$rowcustom->Action} = 1;
                    }
                }
            }            
            return $data;
        }
        if ($request->has('Role') && $request->input('type') == 'list') {
            $role = Role::findOrFail($request->Role);
            $data;

            $query = "INSERT INTO rolemodules (Oid, Role, Modules, IsRead, IsAdd, IsEdit, IsDelete)
                SELECT UUID(), '".$role->Oid."', m.Code, 0,0,0,0
                FROM sysmodules m 
                LEFT OUTER JOIN rolemodules rm ON m.Code = rm.Modules AND rm.Role = '".$role->Oid."'
                WHERE rm.Oid IS NULL";
            DB::insert($query);            
            
            $query = "SELECT rm.Oid, rm.Role, m.Code AS Modules, CONCAT(m.ModulesParent, ' - ', IFNULL(m.Name, rm.Modules)) AS Name, rm.IsRead, rm.IsAdd, rm.IsEdit, rm.IsDelete,
                CASE WHEN rm.IsRead = 1 AND rm.IsAdd = 1 AND rm.IsEdit = 1 AND rm.IsDelete = 1 THEN 1 ELSE 0 END AS SelectAll
                FROM sysmodulesrelationship mr
                LEFT OUTER JOIN sysmodules m ON m.Code = mr.Modules
                LEFT OUTER JOIN rolemodules rm ON rm.Modules = mr.Modules AND rm.Role = '".$role->Oid."'
                WHERE mr.ModulesGroup IN (".$modules.") AND rm.Oid IS NOT NULL
                GROUP BY m.ModulesParent, m.Name, rm.Oid, rm.Role, rm.IsRead, rm.IsAdd, rm.IsEdit, rm.IsDelete";
            $data = DB::select($query);
            return $data;

            // $data = RoleModule::where('Role', $role->Oid)->orderBy('Modules')->get();
            // // $data = RoleModule::hydrate($role->Modules()->get()->toArray());
            // return (new RoleModuleCollection($data))->type($type);
        }
        if ($request->has('Role') && $request->input('type') == 'custom') {
            // $role = Role::findOrFail($request->Role);
            $role = Role::where('Oid', $request->Role)->first();
            $data;

            $query = "INSERT INTO rolemodulescustom (Oid, Role, Modules, Action, IsEnable)
                SELECT UUID(), '".$role->Oid."', m.Modules, m.Action,1
                FROM sysmodulescustom m
                LEFT OUTER JOIN rolemodulescustom rm ON m.Modules = rm.Modules AND m.Action = rm.Action AND rm.Role = '".$role->Oid."'
                WHERE rm.Oid IS NULL";
            DB::insert($query);            
            
            $query = "SELECT rm.Oid, rm.Role, m.Code AS Modules, m.Name, rm.Action, rm.IsEnable
                FROM sysmodulesrelationship mr
                LEFT OUTER JOIN sysmodules m ON m.Code = mr.Modules
                LEFT OUTER JOIN rolemodulescustom rm ON rm.Modules = mr.Modules AND rm.Role = '".$role->Oid."'
                WHERE mr.ModulesGroup IN (".$modules.") AND rm.Oid IS NOT NULL
                GROUP BY m.Code, rm.Action, rm.Oid, rm.Role, rm.IsEnable";
            $data = DB::select($query);
            return $data;

            // $data = RoleModule::where('Role', $role->Oid)->orderBy('Modules')->get();
            // // $data = RoleModule::hydrate($role->Modules()->get()->toArray());
            // return (new RoleModuleCollection($data))->type($type);
        }

        $data = RoleModule::get();
        return (new RoleModuleCollection($data))->type($type);
    }
    
    public function show(RoleModule $data)
    {
        return (new RoleModuleResource($data))->type('detail');
    }
    
    public function disablefield(Request $request)
    {
        $user = Auth::user();
        $query = "SELECT cd.Modules, cd.Field
            FROM companydisable cd 
            WHERE cd.IsDisable = 1
            GROUP BY cd.Modules, cd.Field";
        $data = DB::select($query);
        return $data;
    }

    public function update(Request $request)
    {
        $input = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF        
        $role = Role::findOrFail($input->Role->Oid);
        DB::transaction(function() use ($role, $input) {
            if (is_array($input->RoleModule) || is_object($input->RoleModule))
            {
                foreach ($input->RoleModule as $roleModule) {
                    $role->Modules()->updateExistingPivot($roleModule->Modules, [
                        'IsRead' => $roleModule->IsRead,
                        'IsAdd' => $roleModule->IsAdd,
                        'IsEdit' => $roleModule->IsEdit,
                        'IsDelete' => $roleModule->IsDelete,
                    ]);
                }
            }
            $modulegroups0 = ModulesParent::where('level',0)->get();
            $tmp='';$tmp0='';
            $jsonModules = "";
            $company = Auth::user()->CompanyObj;
            $modules = "";
            if ($company->ModulePOS) $modules = $modules.($modules ? "," : "")."'pos'";
            if ($company->ModuleTravel) $modules = $modules.($modules ? "," : "")."'travel'";
            if ($company->ModuleAccounting) $modules = $modules.($modules ? "," : "")."'accounting'";
            if ($company->ModuleProduction) $modules = $modules.($modules ? "," : "")."'production'";
            if ($company->ModuleTrucking) $modules = $modules.($modules ? "&" : "?")."trucking=1";
            
            $tmp = '{ '.
                '"url":"/dashboard",'.
                '"name":"Dashboard",'.
                // '"slug":"dashboard",'.
                '"icon":"HomeIcon",'.
                '"i18n":"Dashboard"'.
                '}';
            $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            
            $query = $this->querystring($modules, $input->Role->Oid, 'Master');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Master", "i18n":"Master" },';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp.$this->generate($data);
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'Production');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Production", "i18n":"Production" },';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp.$this->generate($data);
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'Accounting');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Accounting", "i18n":"Accounting" },';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp.$this->generate($data);
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'Stock');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Stock", "i18n":"Stock" },';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp.$this->generate($data);
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'Sales');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Sales", "i18n":"Sales" },';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp.$this->generate($data);
            }

            $query = $this->querystringcustom($modules, $input->Role->Oid, "LEFT(m.ModulesParent,5)='Setup'");
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Setup", "i18n":"Setup" }';                
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'Setup');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupGeneral", "icon":"SettingsIcon", "i18n":"Setup", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'SetupBusinessPartner');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupBusinessPartner", "icon":"SettingsIcon", "i18n":"BusinessPartner", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'SetupItem');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupItem", "icon":"SettingsIcon", "i18n":"Item", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'SetupProduction');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupProduction", "icon":"SettingsIcon", "i18n":"Production", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'SetupAccounting');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupAccounting", "icon":"SettingsIcon", "i18n":"Accounting", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'SetupPOS');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupPOS", "icon":"SettingsIcon", "i18n":"Sales", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'SetupTravel');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"SetupTravel", "icon":"SettingsIcon", "i18n":"Travel", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystringcustom($modules, $input->Role->Oid, "LEFT(m.ModulesParent,6)='Report'");
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "header":"Report", "i18n":"Report" }';                
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'ReportProduction');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"ReportProduction", "icon":"PrinterIcon", "i18n":"Production", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'ReportSales');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"ReportSales", "icon":"PrinterIcon", "i18n":"Sales", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'ReportAccount');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"ReportAccount", "icon":"PrinterIcon", "i18n":"Accounting", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $query = $this->querystring($modules, $input->Role->Oid, 'ReportStock');
            $data = DB::select($query);
            if ($data) {
                $tmp = '{ "name":"ReportStock", "icon":"PrinterIcon", "i18n":"Stock", "submenu": [';
                $tmp=$tmp.$this->generate($data).']}';
                $jsonModules = $jsonModules.($jsonModules ? ',' : '').$tmp;
            }

            $jsonModules = "[".$jsonModules."]";
            // logger($jsonModules);
            $role->Navigation = $jsonModules;
            $role->save();
        });
        $data = RoleModule::where('Role', $role->Oid)->get();
        return (new RoleModuleCollection($data))->type('detail');
    }

    private function querystring($modules, $role, $parent) {
        return "SELECT m.Code, m.Name, m.Sequence, m.Icon, m.Url, 
                mg.Code AS GroupCode, mg.Name AS GroupName
                FROM rolemodules rm
                LEFT OUTER JOIN sysmodules m ON m.Code = rm.Modules
                LEFT OUTER JOIN sysmodulesparent mg ON m.ModulesParent = mg.Code
                LEFT OUTER JOIN sysmodulesrelationship mr ON mr.Modules = m.Code
                WHERE rm.IsRead = 1 AND mr.ModulesGroup IN ({$modules}) AND rm.Role='{$role}'
                AND m.ModulesParent = '".$parent."'
                GROUP BY m.Code, m.Name, m.Sequence, m.Icon, m.Url, mg.Code, mg.Name"; 
    }
    private function querystringcustom($modules, $role, $parent) {
        return "SELECT m.Code, m.Name, m.Sequence, m.Icon, m.Url, 
                mg.Code AS GroupCode, mg.Name AS GroupName
                FROM rolemodules rm
                LEFT OUTER JOIN sysmodules m ON m.Code = rm.Modules
                LEFT OUTER JOIN sysmodulesparent mg ON m.ModulesParent = mg.Code
                LEFT OUTER JOIN sysmodulesrelationship mr ON mr.Modules = m.Code
                WHERE rm.IsRead = 1 AND mr.ModulesGroup IN ({$modules}) AND rm.Role='{$role}'
                AND ".$parent."
                GROUP BY m.Code, m.Name, m.Sequence, m.Icon, m.Url, mg.Code, mg.Name"; 
    }

    private function generate($data) {
        $result='';
        foreach ($data as $row) {
            $tmp = '{ '.
                '"url":"/'.strtolower($row->Url).'",'.
                '"name":"'.$row->Name.'",'.
                '"slug":"'.strtolower($row->Code).'",'.
                '"icon":"'.$row->Icon.'",'.
                '"i18n":"'.$row->Code.'"'.
                '}';
            $result = $result.($result ? ',' : '').$tmp;
        }
        return $result;
    }

    // public function updateOld(Request $request)
    // {
    //     // $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
    //     $input = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF
        
    //     $role = Role::findOrFail($input->Role->Oid);

    //     DB::transaction(function() use ($role, $input) {
    //         if (is_array($input->RoleModule) || is_object($input->RoleModule))
    //         {
    //             foreach ($input->RoleModule as $roleModule) {
    //                 $role->Modules()->updateExistingPivot($roleModule->Modules, [
    //                     'IsRead' => $roleModule->IsRead,
    //                     'IsAdd' => $roleModule->IsAdd,
    //                     'IsEdit' => $roleModule->IsEdit,
    //                     'IsDelete' => $roleModule->IsDelete,
    //                 ]);
    //             }
    //         }
    //         $modulegroups0 = ModulesParent::where('level',0)->get();
    //         $temp0=""; $temp1=""; $num0=0; $num1=0; $num2=0;
    //         $jsonModules = "";
    //         $company = Auth::user()->CompanyObj;
    //         $modules = "";
    //         if ($company->ModulePOS) $modules = $modules.($modules ? "," : "")."'pos'";
    //         if ($company->ModuleTravel) $modules = $modules.($modules ? "," : "")."'travel'";
    //         if ($company->ModuleAccounting) $modules = $modules.($modules ? "," : "")."'accounting'";
            
    //         $query = "SELECT m.Code, m.Name, m.Sequence, m.Icon, m.Url, 
    //             mg.Code AS GroupCode, mg.Name AS GroupName
    //             FROM rolemodules rm
    //             LEFT OUTER JOIN sysmodules m ON m.Code = rm.Modules
    //             LEFT OUTER JOIN sysmodulesparent mg ON m.ModulesParent = mg.Code
    //             LEFT OUTER JOIN sysmodulesrelationship mr ON mr.Modules = m.Code
    //             WHERE rm.IsRead = 1 AND mr.ModulesGroup IN ({$modules}) AND rm.Role='{$input->Role->Oid}'
    //             GROUP BY m.Code, m.Name, m.Sequence, m.Icon, m.Url, mg.Code, mg.Name"; 
    //         $modules = DB::select($query);
    //         foreach ($modulegroups0 as $group0) {
    //             $found0 = 0;
    //             $num1 = 0;
    //             $num2 = 0;
    //             $temp0 = '{ '.
    //                 // '"url":"/'.$group0->Code.'",'.
    //                 '"name":"'.$group0->Name.'",'.
    //                 // '"slug":"'.strtolower($group0->Code).'",'.
    //                 '"icon":"'.$group0->Icon.'",'.
    //                 '"i18n":"'.$group0->Code.'",'.
    //                 '"submenu": [';
    //             $modulegroups1 = ModulesParent::where('level',1)->where('Parent',$group0->Code)->get();
    //             foreach ($modulegroups1 as $group1) {
    //                 $found1 = 0;
    //                 $num2 = 0;
    //                 $temp1 = '{ '.
    //                     // '"url":"/'.$group1->Code.'",'.
    //                     '"name":"'.$group1->Name.'",'.
    //                     // '"slug":"'.strtolower($group1->Code).'",'.
    //                     '"icon":"'.$group1->Icon.'",'.
    //                     '"i18n":"'.$group1->Code.'",'.
    //                     '"submenu": [';
    //                 // $modules = Modules::where('ModulesGroup',$group1->Code)->get();
    //                 foreach ($modules as $row) {
    //                     if ($row->GroupCode == $group1->Code) {
    //                         $temp1 = $temp1.($num2 != 0 ? ',' : '').'{ '.
    //                             '"url":"/'.$row->Url.'",'.
    //                             '"name":"'.$row->Name.'",'.
    //                             '"slug":"'.strtolower($row->Code).'",'.
    //                             '"icon":"'.$row->Icon.'",'.
    //                             '"i18n":"'.$row->Code.'" } ';
    //                         $found0 = 1;
    //                         $found1 = 1;
    //                         $num2 = 1;
    //                     }
    //                 }
    //                 $temp1 = $temp1."] } ";
    //                 if ($found1) {
    //                     $temp0 = $temp0.($num1 != 0 ? ',' : '').$temp1;
    //                     $num1 = 1;
    //                 }                        
    //             }                
    //             // $modules = Modules::where('ModulesGroup',$group0->Code)->get();
    //             foreach ($modules as $row) {
    //                 if ($row->GroupCode == $group0->Code) {
    //                     $temp0 = $temp0.($num1 != 0 ? ',' : '').'{ '.
    //                         '"url":"/'.$row->Url.'",'.
    //                         '"name":"'.$row->Name.'",'.
    //                         '"slug":"'.strtolower($row->Code).'",'.
    //                         '"icon":"'.$row->Icon.'",'.
    //                         '"i18n":"'.$row->Code.'" } ';
    //                     $num1 = 1;
    //                     $found0 = 1;
    //                 }
    //             }
    //             $temp0 = $temp0."] } ";
    //             if ($found0) {
    //                 $jsonModules = $jsonModules.($num0 != 0 ? ',' : '').$temp0;
    //                 $num0 = 1;
    //             }
                    
    //         }
    //         $jsonModules = "[".$jsonModules."]";
    //         $role->Navigation = $jsonModules;
    //         $role->save();
    //     });
    //     $data = RoleModule::where('Role', $role->Oid)->get();
    //     return (new RoleModuleCollection($data))->type('detail');
    // }

    public function updateCustom(Request $request)
    {
        $company = Auth::user()->CompanyObj;
        $input = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF
        $modules = "";
        if ($company->ModulePOS) $modules = $modules.($modules ? "," : "")."'pos'";
        if ($company->ModuleTravel) $modules = $modules.($modules ? "," : "")."'travel'";
        if ($company->ModuleAccounting) $modules = $modules.($modules ? "," : "")."'accounting'";
        $role = Role::where('Oid',$input->Role->Oid)->first();        

        DB::transaction(function() use ($role, $input) {
            if (is_array($input->RoleModuleCustom) || is_object($input->RoleModuleCustom)) {
                foreach ($input->RoleModuleCustom as $roleModuleCustom) {
                    $data = RoleModuleCustom::findOrFail($roleModuleCustom->Oid);
                    $data->IsEnable = $roleModuleCustom->IsEnable;
                    $data->save();
                }
            } 
        });
        $query = "SELECT rm.Oid, rm.Role, m.Code AS Modules, m.Name, rm.IsEnable
                FROM sysmodulesrelationship mr
                LEFT OUTER JOIN sysmodules m ON m.Code = mr.Modules
                LEFT OUTER JOIN rolemodulescustom rm ON rm.Modules = mr.Modules AND rm.Role = '".$role->Oid."'
                WHERE mr.ModulesGroup IN (".$modules.") AND rm.Oid IS NOT NULL
                GROUP BY m.Code,rm.Oid, rm.Role, m.Code, m.Name, rm.IsEnable";
        $data = DB::select($query);
        return $data;
    }
}
