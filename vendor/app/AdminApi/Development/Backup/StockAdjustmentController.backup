<?php

namespace App\AdminApi\Trading\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Trading\Entities\TransactionStock;  
use App\Core\Internal\Entities\Status;
use App\Core\Master\Entities\Item;
use App\Core\Internal\Entities\JournalType;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Core\Security\Services\RoleModuleService;
use Carbon\Carbon;
use Validator;

class StockAdjustmentController extends Controller
{
    protected $roleService;
    
    public function __construct(
        RoleModuleService $roleService  
        )
    {
        $this->roleService = $roleService;
    }
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Code');
        $fields[] = serverSideConfigField('Date');
        $fields[] = serverSideConfigField('Item');
        $fields[] = serverSideConfigField('Warehouse');
        $fields[] = ['w'=> 200, 'h'=>0, 't'=>'int', 'n'=>'StockQuantity',];
        $fields[] = ['w'=> 200, 't'=>'textarea', 'n'=>'Note',];
        $fields[] = serverSideConfigField('Status');
        return $fields;
    }

    public function config(Request $request) {
        $fields = serverSideFields($this->fields());
        foreach ($fields as &$row) { //combosource
            if ($row['headerName'] == 'Item') {
                $row['url'] = '/item/autocomplete?type=combo&detail=0&stock=1';
                $row['source'] = [];
            }
            if ($row['headerName'] == 'Warehouse') $row['source'] = comboSelect('mstwarehouse');
            if ($row['headerName'] == 'Company') $row['source'] = comboselect('company');
            if ($row['headerName'] == 'Status') $row['source'] = comboStatus('modAccount');
        }
        return $fields;
    }
    public function list(Request $request) {
        $fields = $this->fields();
        $idJournalType = JournalType::where('Code','Stock')->first()->Oid;
        
        $data = DB::table('trdtransactionstock as data')
            ->leftJoin('mstitem AS i', 'i.Oid', '=', 'data.Item')
            ->leftJoin('mstwarehouse AS w', 'w.Oid', '=', 'data.Warehouse')
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->leftJoin('sysstatus AS s', 's.Oid', '=', 'data.Status')
            ->whereNull('PurchaseDelivery')->whereNull('PurchaseInvoice')
            ->whereNull('SalesDelivery')->whereNull('SalesInvoice')->whereNull('PointOfSale')->where('JournalType',$idJournalType)
        ;
        $data = serverSideQuery($data, $fields, $request, 'trdtransactionstock','Date');
        $role = $this->roleService->list('StockAdjustment');
        $action = $this->roleService->action('StockAdjustment');
        foreach($data as $row) {
            $row->Role = $this->roleService->GenerateRole($row, $role, $action);
            if ($row->Item) $row->ItemObj = Item::select('Oid','Code','Name')->where('Oid',$row->Item)->first();
        }
        return serverSideReturn($data, $fields);
    }

    public function index(Request $request)
    {
        try {            
            $user = Auth::user();
            $idJournalType = JournalType::where('Code','Stock')->first()->Oid;
            $type = $request->input('type') ?: 'combo';
            if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            $data = TransactionStock::whereNull('GCRecord')->whereNull('PurchaseDelivery')->whereNull('PurchaseInvoice')
            ->whereNull('SalesDelivery')->whereNull('SalesInvoice')->whereNull('PointOfSale')->where('JournalType',$idJournalType)->limit(100);
            if ($request->has('date')) {
                $data = $data
                    ->where('Date','>=', Carbon::parse($request->date)->startOfMonth()->toDateString())
                    ->where('Date','<', Carbon::parse($request->date)->startOfMonth()->addMonths(1)->toDateString());
            }
            $data = $data->get();
            
            $result = [];
            $role = $this->roleService->list('StockAdjustment');
            $action = $this->roleService->action('StockAdjustment');
            foreach ($data as $row) {
                $result[] = [
                    'Oid' => $row->Oid,
                    'Code' => $row->Code,
                    'Date' => Carbon::parse($row->Date)->format('Y-m-d'),
                    'ItemName' => $row->ItemObj ? $row->ItemObj->Name.' - '.$row->ItemObj->Code : null,
                    'WarehouseName' => $row->WarehouseObj ? $row->WarehouseObj->Code : null,
                    'StockQuantity' => $row->StockQuantity,
                    'StatusName' => $row->StatusObj ? $row->StatusObj->Name : null,
                    'Role' => $this->GenerateRole($row, $role, $action)
                ];
            }
            return $result;
            // return (new TransactionStockCollection($data))->type($type);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function show(TransactionStock $data)
    {
        try {            
            $data = TransactionStock::with([
                'WarehouseObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'ItemObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'CompanyObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
            ])->findOrFail($data->Oid);  
            $data->Role = $this->generateRole($data);
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    
    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Code.required'=>__('_.Code').__('error.required'),
            'Code.max'=>__('_.Code').__('error.max'),
            'Date.required'=>__('_.Date').__('error.required'),
            'Date.date'=>__('_.Date').__('error.date'),
            'Status.required'=>__('_.Status').__('error.required'),
            'Status.exists'=>__('_.Status').__('error.exists'),
            'Item.required'=>__('_.Item').__('error.required'),
            'Item.exists'=>__('_.Item').__('error.exists'),
        );
        $rules = array(
            'Code' => 'required|max:255',
            'Date' => 'required|date',
            'Status' => 'required|exists:sysstatus,Oid',
            'Item' => 'required|exists:mstitem,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            if (!$Oid) $data = new TransactionStock();
            else $data = TransactionStock::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                // $data->Company = Auth::user()->Company;
                $data->Code = $request->Code == '<<Auto>>' ? now()->format('ymdHis').'-'.str_random(3) : $request->Code;
                $data->Date = $request->Date;
                $data->Item = $request->Item;
                $data->Note = $request->Note;
                $data->Quantity = $request->StockQuantity;
                $data->StockQuantity = $request->StockQuantity;
                $data->JournalType = JournalType::where('Code','Stock')->first()->Oid;
                $data->Status = $request->Status ?: Status::entry()->first()->Oid;
                $data->Warehouse = $request->Warehouse;
                $data->save();

                $data->ItemName = $data->ItemObj->Name;
                $data->StatusName = $data->StatusObj->Name;
                $data->WarehouseName = $data->WarehouseObj->Code;
                $data->Role = $this->generateRole($data);
            });

            // $data = (new TransactionStockResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }


    public function destroy(TransactionStock $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function post(TransactionStock $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::posted()->first()->Oid;
                $data->save();
                $data->Role = $this->generateRole($data);
                $data->StatusName = $data->StatusObj->Name;
            });
            
            return response()->json(
                $data, Response::HTTP_OK
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function unpost(TransactionStock $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::entry()->first()->Oid;
                $data->save();
                $data->Role = $this->generateRole($data);
                $data->StatusName = $data->StatusObj->Name;
            });
            
            return response()->json(
                $data, Response::HTTP_OK
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function cancelled(TransactionStock $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::cancelled()->first()->Oid;
                $data->save();
                $data->Role = $this->generateRole($data);
                $data->StatusName = $data->StatusObj->Name;
            });
            
            return response()->json(
                $data, Response::HTTP_OK
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    private function generateRole(TransactionStock $data, $role = null, $action = null) {
        if (!$role) $role = $this->roleService->list('StockAdjustment');
        if (!$action) $action = $this->roleService->action('StockAdjustment');

        return [
            'IsRead' => $role->IsRead,
            'IsAdd' => $role->IsAdd,
            'IsEdit' => $this->roleService->isAllowDelete($data->StatusObj, $role->IsEdit),
            'IsDelete' => 0, //$this->roleService->isAllowDelete($row->StatusObj, $role->IsDelete),
            'Cancel' => $this->roleService->isAllowCancel($data->StatusObj, $action->Cancel),
            'Entry' => $this->roleService->isAllowEntry($data->StatusObj, $action->Entry),
            'Post' => $this->roleService->isAllowPost($data->StatusObj, $action->Posted),
            'ViewJournal' => $this->roleService->isPosted($data->StatusObj, 1),
            'ViewStock' => $this->roleService->isPosted($data->StatusObj, 1),
        ];
    }
}
            