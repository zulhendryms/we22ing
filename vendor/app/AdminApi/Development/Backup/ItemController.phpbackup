<?php

namespace App\AdminApi\Master\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\Item;
use App\Core\Master\Entities\ItemGroup;
use App\Core\Master\Entities\ItemPriceMethod;
use App\Core\POS\Entities\POSETicketUpload;
use App\Core\Master\Entities\ItemAccountGroup;
use App\Core\Master\Entities\BusinessPartner;
use App\Core\Internal\Entities\ItemType;
use App\Core\POS\Entities\ItemService;
use App\Core\Travel\Entities\TravelItem;
use App\Core\Travel\Entities\TravelItemHotel;
use App\Core\Travel\Entities\TravelItemOutbound;
use App\Core\Travel\Entities\TravelItemOutboundDate;
use App\Core\Travel\Entities\TravelItemTransport;
use App\Core\Master\Entities\ItemDetailLink;
use App\Core\Master\Resources\ItemResource;
use App\Core\Master\Resources\ItemCollection;
use App\Core\POS\Entities\FeatureInfoItem;
use App\Core\POS\Entities\FeatureInfo;
use App\Core\Production\Entities\ProductionItem;
use App\Core\Production\Entities\ProductionItemGlass;
use App\Core\Production\Entities\ProductionItemProcess;
use App\Core\Master\Entities\ItemECommerce;
use App\Core\Trading\Entities\SalesInvoice;
use App\Core\Trading\Entities\PurchaseInvoice;
use App\Core\Internal\Entities\Status;
use App\Core\Internal\Entities\PriceMethod;
use App\Core\POS\Entities\PointOfSale;
use App\Core\POS\Entities\ETicket;
use App\Core\POS\Services\POSETicketService;
use App\Core\Master\Entities\Currency;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use App\Core\Internal\Services\FileService;
use Validator;

use Maatwebsite\Excel\Excel;
use App\AdminApi\Master\Services\ItemExcelImport;

class ItemController extends Controller
{
     protected $fileService;
     private $excelService;
    protected $posETicketService;
    
     public function __construct(FileService $fileService, Excel $excelService, POSETicketService $posETicketService)
     {
        $this->fileService = $fileService;
        $this->excelService = $excelService;
        $this->posETicketService = $posETicketService;
     }

    public function index(Request $request)
    {        
        try {        
            $user = Auth::user();    
            $type = $request->input('type') ?: 'combo';
            $data = Item::with(['PurchaseBusinessPartnerObj','ItemTypeObj','ProductionItemObj'])->whereNull('GCRecord');
            if ($request->has('purchasebusinesspartner')) $data->where('PurchaseBusinessPartner', $request->input('purchasebusinesspartner'));
            if ($request->has('itemgroup')) $data->where('ItemGroup', $request->input('itemgroup'));
            if ($request->has('itemaccountgroup')) $data->where('ItemAccountGroup', $request->input('itemaccountgroup'));
            if ($request->has('city')) $data->where('City', $request->input('city'));
            if ($request->has('purchasecurrency')) $data->where('PurchaseCurrency', $request->input('purchasecurrency'));
            if ($request->has('salescurrency')) $data->where('SalesCurrency', $request->input('salescurrency'));
            if ($request->has('itemtypecode')) {
                $itemtype = ItemType::where('Code',$request->input('itemtypecode'))->first();
                $data->whereHas('ItemGroupObj', function ($query) use ($itemtype) {
                    $query->where('ItemType', $itemtype->Oid);
                });
            }
            if ($request->has('itemtype')) {
                $itemtype = $request->input('itemtype');
                $data->whereHas('ItemGroupObj', function ($query) use ($itemtype) {
                    $query->where('ItemType', $itemtype);
                });
            }
            
            // if ($request->has('itemtypecode')) {
            //     $itemtype = ItemType::where('Code',$request->input('itemtypecode'))->first();
            //     $data->whereHas('ItemTypeObj', function ($query) use ($itemtype) {
            //         $query->where('Code', $itemtype->Oid);
            //     });
            // }
            // if ($request->has('itemtype')) $data->where('ItemType', $request->input('itemtype'));
            if ($request->has('parentoid')) $data->where('ParentOid', $request->input('parentoid'));
            if ($type != 'combo') $data->with(['ItemGroupObj','PurchaseBusinessPartnerObj','SalesCurrencyObj']);
            if (!$request->has('parent') && !$request->has('detail')) $data->where('IsDetail',0)->get();
            if ($request->has('parent')) $data->where('IsParent', $request->input('parent'));
            if ($request->has('detail')) $data->where('IsDetail', $request->input('detail') == 1 ? true : false);
            if ($request->has('stock')) $data->where('IsStock', $request->input('stock'));
            if ($request->input('pospriceage') == 1) 
                $data->whereHas('ItemTypeObj', function ($query) {
                    $query->whereIn('Code', ['Travel']);
                });
            if ($request->input('pospriceday') == 1) 
                $data->whereHas('ItemTypeObj', function ($query) {
                    $query->whereIn('Code', ['Hotel','Transport']);
            });
            if ($request->input('poseticketupload') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Travel','Transport','Hotel']);
            });
            if ($request->input('transport') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Transport']);
            });
            if ($request->input('hotel') == 1) {
                $data->whereHas('ItemGroupObj', function ($query) {
                    $itemtype = ItemType::where('Code','hotel')->first();
                    $query->where('ItemType', $itemtype->Oid);
                });
            }
            if ($request->input('product') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Product']);
            });
            if ($request->input('production') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Production']);
            });
            if ($request->input('glass') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Glass']);
            });
            if ($user->BusinessPartner) $data = $data->where('PurchaseBusinessPartner', $user->BusinessPartner);
            $data = $data->orderBy('Name')->get();
            return (new ItemCollection($data))->type($type);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function autocomplete(Request $request)
    {
        $type = $request->input('type') ?: 'combo';
        $term = $request->term;
        $data = Item::whereNull('GCRecord');
        if ($request->has('itemtypecode')) {
            $itemtype = ItemType::where('Code',$request->input('itemtypecode'))->first();
            $data->whereHas('ItemTypeObj', function ($query) use ($itemtype) {
                $query->where('Code', $itemtype->Oid);
            });
        }
        if ($request->has('itemtype')) $data->where('ItemType', $request->input('itemtype'));
        if ($request->has('parentoid')) $data->where('ParentOid', $request->input('parentoid'));
        if ($type != 'combo') $data->with(['ItemGroupObj','PurchaseBusinessPartnerObj','SalesCurrencyObj']);
        if (!$request->has('parent') && !$request->has('detail')) $data->where('IsDetail',0)->get();
        if ($request->has('parent')) $data->where('IsParent', $request->input('parent'));
        if ($request->has('detail')) $data->where('IsDetail', $request->input('detail') == 1 ? true : false);
        if ($request->has('stock')) $data->where('IsStock', $request->input('stock'));
        if ($request->input('pospriceage') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Travel']);
            });
        if ($request->input('pospriceday') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Hotel','Transport']);
        });
        if ($request->input('poseticketupload') == 1) 
        $data->whereHas('ItemTypeObj', function ($query) {
            $query->whereIn('Code', ['Travel','Transport','Hotel']);
        });
        if ($request->input('transport') == 1) 
        $data->whereHas('ItemTypeObj', function ($query) {
            $query->whereIn('Code', ['Transport']);
        });
        if ($request->input('product') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Product']);
        });
        if ($request->input('production') == 1) 
        $data->whereHas('ItemTypeObj', function ($query) {
            $query->whereIn('Code', ['Production']);
        });
        if ($request->input('glass') == 1) 
        $data->whereHas('ItemTypeObj', function ($query) {
            $query->whereIn('Code', ['Glass']);
        });
        if ($request->input('hotel') == 1) 
        $data->whereHas('ItemTypeObj', function ($query) {
            $query->whereIn('Code', ['Hotel']);
        });
        $data->where(function($query) use ($term)
        {
            $query->where('Name','LIKE','%'.$term.'%')
            ->orWhere('Code','LIKE','%'.$term.'%');
        });
        $data = $data->orderBy('Name') ->take(10)->get();
       
        return (new ItemCollection($data))->type($type);
    }
    
    public function show(Item $data)
    {
        try {
            // $itemType = ItemType::where('Code','Attraction')->first();
            $data = Item::with(['POSItemServiceObj','ProductionItemObj','ProductionItemGlassObj','ProductionItemGlassObj.ProductionThicknessObj',
            'FeatureInfos','ItemProcess','ItemProcess.ProductionProcessObj','ItemProcess.ProductionPriceObj','PurchaseBusinessPartnerObj','ItemStockReplacementObj'])->findOrFail($data->Oid);

            $details = Item::with(['Details.TravelItemHotelObj','Details.TravelItemTransportObj','Details.TravelItemObj'])
                ->where('ParentOid', $data->Oid)->where('IsDetail', 1)
                ->whereHas('ItemTypeObj', function ($query) {
                    $query->where('Code', '!=', 'Attraction')
                        ->where('Code', '!=', 'ApitudeH')
                        ->where('Code', '!=', 'Ferry')
                        ->where('Code', '!=', 'Globaltix');
                })->orderBy('Subtitle')->get();
                logger($details);
            $data->Details = $details;
            if ($data->ProductionItemObj) {
                $data->FeetConverted = $data->ProductionItemObj->FeetConverted ?: null;
                $data->RequireNext  = $data->ProductionItemObj->RequireNext ?: null;
            }

            foreach($data->FeatureInfos as $row) {
                $row->FeatureInfoName = $row->FeatureInfoObj->Name;
            }

            // return $data;
            return (new ItemResource($data))->type('detail');
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function viewSalesAmount(Request $request)
    {
        try {         
            $user = Auth::user()->Oid;

            $itemTypeHotel = ItemType::where('Code','Hotel')->firstOrFail();
            $itemTypeTransport = ItemType::where('Code','Transport')->firstOrFail();
            $itemTypeTravel = ItemType::where('Code','Travel')->firstOrFail();

            $field = ['Oid', 'Code', 'Name','SalesAmount'];
            $data = Item::where('Oid', $request->input('item'))->firstOrFail();
            $type = $data->ItemType;

            if ($request->has('salesinvoice')) {
                $salesInvoice = SalesInvoice::where('Oid', $request->input('salesinvoice'))->firstOrFail();
                $date = $salesInvoice->Date;
            }else{
                $date = Carbon::now();
            }
            if ($request->has('pos')) {
                $pos = PointOfSale::where('Oid', $request->input('pos'))->firstOrFail();
                $date = $pos->Date;
            }else{
                $date = Carbon::now();
            }
            $age = 20;
            if($type == $itemTypeHotel->Oid || $type == $itemTypeTransport->Oid){
                $data = Item::where('Oid', $request->input('item'))->get();
                foreach($data as $row){
                    $row->setVisible($field);
                    $row->SalesAmount = $row->getSalesAmountByDay($date,$user,$type='FIT');  
                }
            }else if($type == $itemTypeTravel->Oid){
                $data = Item::where('Oid', $request->input('item'))->get();
                foreach($data as $row){
                    $row->setVisible($field);
                    $row->SalesAmount = $row->getSalesAmountByAge($age,$user,$type='FIT');  
                }
            }else {
                $data = Item::where('Oid', $request->input('item'))->get();
                foreach($data as $row){
                    $row->setVisible($field);
                    $row->SalesAmount = $row->getSalesAmount($user);  
                }
            }
            
            return $data;

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function viewPurchaseAmount(Request $request)
    {
        try {         
            $user = Auth::user()->Oid;

            $itemTypeHotel = ItemType::where('Code','Hotel')->firstOrFail();
            $itemTypeTransport = ItemType::where('Code','Transport')->firstOrFail();
            $itemTypeTravel = ItemType::where('Code','Travel')->firstOrFail();

            $field = ['Oid', 'Code', 'Name','PurchaseAmount'];
            $data = Item::where('Oid', $request->input('item'))->firstOrFail();
            $type = $data->ItemType;

            if ($request->has('purchaseinvoice')) {
                $purchaseInvoice = PurchaseInvoice::where('Oid', $request->input('purchaseinvoice'))->firstOrFail();
                $date = $purchaseInvoice->Date;
            }else{
                $date = Carbon::now();
            }
            $age = 20;
            if($type == $itemTypeHotel->Oid || $type == $itemTypeTransport->Oid){
                $data = Item::where('Oid', $request->input('item'))->get();
                foreach($data as $row){
                    $row->setVisible($field);
                    $row->PurchaseAmount = $row->getPurchaseAmountByDay($date,$user);  
                }
            }else if($type == $itemTypeTravel->Oid){
                $data = Item::where('Oid', $request->input('item'))->get();
                foreach($data as $row){
                    $row->setVisible($field);
                    $row->PurchaseAmount = $row->getPurchaseAmountByAge($age,$user);  
                }
            }else {
                $data = Item::where('Oid', $request->input('item'))->get();
                foreach($data as $row){
                    $row->setVisible($field);
                    $row->PurchaseAmount = $row->getPurchaseAmount($user);  
                }
            }
            
            return $data;

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function destroy(Item $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->FeatureInfos()->delete();
                // $data->Details()->delete();
                $data->POSItemServiceObj()->delete();
                $data->ProductionItemObj()->delete();
                $data->ProductionItemGlassObj()->delete();
                $data->ItemProcess()->delete();
                // $data->delete();
                $gcrecord = now()->format('ymdHi');
                $data->GCRecord = $gcrecord;
                $data->Code = substr($data->Code,0,39).' '.now()->format('ymdHi');
                $data->Name = $data->Name.' '.now()->format('ymdHi');
                $data->save();
                foreach ($data->Details as $row) {
                    $row->GCRecord = $gcrecord;
                    $row->Code = substr($row->Code,0,39).' '.now()->format('ymdHi');
                    $row->Name = $row->Name.' '.now()->format('ymdHi');
                    $row->save();
                }
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        logger(1);

        $query = "SELECT RIGHT(Barcode,LENGTH(Barcode)-1) AS lastBarcode FROM mstitem WHERE LENGTH(Barcode) = 7 ORDER BY Barcode DESC LIMIT 1;";   
        $getBarcode = DB::select($query);

        if($getBarcode){
            $numberBarcode = (number_format($getBarcode[0]->lastBarcode));
            $replaceNumber = str_replace(",","",$numberBarcode);

            $barcode = $replaceNumber+1;
            $numlength = strlen($barcode);
            $length = 6 - $numlength;
            $nol = "";
            for($i=1;$i<=$length;$i++)
            {
                $nol .= '0';
            }
            $resultBarcode = 'A'.$nol.$barcode;
        }else{
            $resultBarcode = null;
        }

        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Code.required'=>__('_.Code').__('error.required'),
            'Code.max'=>__('_.Code').__('error.max'),
            'Name.required'=>__('_.Name').__('error.required'),
            'Name.max'=>__('_.Name').__('error.max'),
            'ItemGroup.required'=>__('_.ItemGroup').__('error.required'),
            'ItemGroup.exists'=>__('_.ItemGroup').__('error.exists'),
        );
        $rules = array(
            'Code' => 'required|max:255',
            'Name' => 'required|max:255',
            'ItemGroup' => 'required|exists:mstitemgroup,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            $excluded = ['Image1','Image2','Image3','Image4','Image5','Image6','Image7','Image8']; 
        logger(2);

            DB::transaction(function () use ($request, &$data, $Oid, $excluded, $resultBarcode) {
                logger(3);
                $company = Auth::user()->CompanyObj;
                logger(4);
                if (!$Oid) {
                    logger('5 '.$request->ItemType);
                    $data = new Item();
                    $itemType = ItemType::findOrFail($request->ItemType)->Code;
                    logger(6);
                } else {
                    logger(7);
                    $data = Item::findOrFail($Oid);
                    $itemType = ItemType::findOrFail($data->ItemType)->Code;
                    logger("item type ".$itemType);
                    logger(8);
                }
                logger(9);
                $itemGroup = ItemGroup::findOrFail($request->ItemGroup);
                logger(10);
                if ($request->Code == '<<Auto>>') $request->Code = now()->format('ymdHis').'-'.str_random(3);
                if ($company->IsAutoGenerateBarcode == true) $request->Barcode = $resultBarcode;
                logger(11);
                if (!isset($request->NameZH)) $request->NameZH = $request->Name ?: null;
                if (!isset($request->NameEN)) $request->NameEN = $request->Name ?: null;
                if (!isset($request->Slug)) $request->Slug = $request->Name ?: null;
                if (!isset($request->Description)) $request->Description = null;
                if (!isset($request->DescriptionEN)) $request->DescriptionEN = $request->Description ?: null;
                if (!isset($request->DescriptionZH)) $request->DescriptionZH = $request->Description ?: null;
                if (!isset($request->ItemAccountGroup)) $request->ItemAccountGroup = $itemGroup->ItemAccountGroup ?: null;
                logger(12);
                $iag = ItemAccountGroup::findOrFail($request->ItemAccountGroup);
                $city = null;
                if (isset($request->PurchaseBusinessPartner)) $city = BusinessPartner::where('Oid',$request->PurchaseBusinessPartner)->first()->City;
                logger(13);
                logger($request->SalesCurrency);
                if (!isset($request->ItemUnit)) $request->ItemUnit = $company->ItemUnit ?: null;
                if (!isset($request->City)) $request->City = $city ?: $company->City;
                if (!isset($request->IsActive)) $request->IsActive = 1;
                if (!isset($request->PurchaseCurrency)) $request->PurchaseCurrency = $iag->PurchaseCurrency ?: $company->Currency;
                if (!isset($request->SalesCurrency)) $request->SalesCurrency = $iag->SalesCurrency ?: $company->Currency;
                if (!isset($request->AgentCurrency)) $request->AgentCurrency = $iag->SalesCurrency ?: $company->Currency;
                if (!isset($request->IsPurchase)) $request->IsPurchase = $iag->IsPurchase ?: 1;
                if (!isset($request->IsSales)) $request->IsSales = $iag->IsSales ?: 1;
                if (!isset($request->PurchaseAmount)) $request->PurchaseAmount = 0;
                if (!isset($request->UsualAmount)) $request->UsualAmount = $request->SalesAmount ?: 0;
                if (!isset($request->SalesAmount)) $request->SalesAmount = $request->UsualAmount ?: 0;
                if (!isset($request->SalesAmount1)) $request->SalesAmount1 = $request->SalesAmount ?: 0;
                if (!isset($request->SalesAmount2)) $request->SalesAmount2 = $request->SalesAmount ?: 0;
                if (!isset($request->SalesAmount3)) $request->SalesAmount3 = $request->SalesAmount ?: 0;
                if (!isset($request->SalesAmount4)) $request->SalesAmount4 = $request->SalesAmount ?: 0;
                if (!isset($request->SalesAmount5)) $request->SalesAmount5 = $request->SalesAmount ?: 0;
                if (!isset($request->IsStock)) $request->IsStock = 1;
                logger(14);
                $enabled = ['Code','Name','Subtitle','Barcode','Slug','Note','ItemUnit','ItemGroup','ItemAccountGroup','City',
                    'IsPurchase','PurchaseBusinessPartner','PurchaseCurrency','PurchaseAmount',
                    'IsSales','SalesCurrency','UsualAmount','SalesAmount','SalesAmount1','SalesAmount2','SalesAmount3','SalesAmount4','SalesAmount5',
                    'AgentCurrency','AgentAmount','AgentAmount1','AgentAmount2','AgentAmount3','AgentAmount4','AgentAmount5',
                    'NameEN','NameID','NameZH','NameTH','Description','DescriptionID','DescriptionEN','DescriptionZH','DescriptionZH',
                    'APIType','APICode','Sequence','IsAllotment','IsStock','QauantitySold','InternalSold','QuantityReview','InternalRating','ETicketMergeType',
                    'IsParent','IsDetail','Featured','CountReviews','LastPurchased','ItemType','Barcode','ItemStockReplacement','IsAutoGenerateBarcode'];
                logger(15);
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $data->{$field} = $request->{$field};
                }
                logger(16);
                if (isset($request->Image1->base64)) $data->Image1 = $this->fileService->uploadImage($request->Image1);
                if (isset($request->Image2->base64)) $data->Image2 = $this->fileService->uploadImage($request->Image2);
                if (isset($request->Image3->base64)) $data->Image3 = $this->fileService->uploadImage($request->Image3);
                if (isset($request->Image4->base64)) $data->Image4 = $this->fileService->uploadImage($request->Image4);
                if (isset($request->Image5->base64)) $data->Image5 = $this->fileService->uploadImage($request->Image5);
                if (isset($request->Image6->base64)) $data->Image6 = $this->fileService->uploadImage($request->Image6);
                if (isset($request->Image7->base64)) $data->Image7 = $this->fileService->uploadImage($request->Image7);
                if (isset($request->Image8->base64)) $data->Image8 = $this->fileService->uploadImage($request->Image8);
                logger('kesini');
                logger($data->Details()->count());
                
                if ($data->Details()->count() == 0) {
                    $itemtypeattr = ItemType::where('Code','Attraction')->first()->Oid;
                    $itemtype = ItemGroup::findOrFail($request->ItemGroup)->ItemType;
                    if ($itemtype == $itemtypeattr) {
                        $data->IsParent = true;
                    }else{
                        $data->IsParent = false;
                    }
                } else {                   
                    $data->IsParent = true;
                    
                }
                $data->IsDetail = false;
                $data->ObjectType = 79;
                $data->save();

                $query = "INSERT INTO mstitemecommerce (Oid, Company, Item, ECommerce, IsActive)
                    SELECT UUID(), i.Company,'".$data->Oid."', i.Oid, 1
                    FROM mstecommerce i 
                    LEFT OUTER JOIN mstitemecommerce ie ON i.Oid = ie.ECommerce AND ie.Item = '".$data->Oid."'
                    WHERE ie.Oid IS NULL";

                DB::insert($query);

                logger(17);
                
                if ($itemType == "Service") {
                    logger(18);
                    $dataService = ItemService::where('Oid',$data->Oid)->first();
                    if (!$dataService) {
                        logger(19);
                        $dataService = new ItemService();
                        $dataService->Oid = $data->Oid;
                    }
                    logger(20);
                    if (!isset($request->DateStart)) $request->DateStart = now() ?: null;
                    if (!isset($request->DateEnd)) $request->DateEnd = now() ?: null;
                    logger(21);
                    $enabled = ['DateStart','DateEnd','Phone','Address','Longitude','Latitude','Expiry','MinQuantity','CutOffDay',
                        'DescCaptionEN','DescCaptionZH','DescIncludedEN','DescIncludedZH','DescTermConditionEN','DescTermConditionZH',
                        'DescRedemptionEN','DescRedemptionZH','DescCancelationEN','DescCancelationZH','DescLocationEN','DescLocationZH',
                        'InputDate','InputTitle1','InputTitle2','InputTitle3','InputPassenger','Stock','MaxQuantity','YoutubeURL','KeywordEN','KeywordCN',
                        'CountRating5','CountRating4','CountRating3','CountRating2','CountRating1',
                        'CountRatingClean','CountRatingLocation','CountRatingService','CountRatingFacilities','CountRatingComfort','PaxType','GSTApplicable','IsETicketGenerated',
                        'IsETicketUpload','IsRedemptionTicket','IsFloatingDeposit','LoaAmendCancel','LimitAgeChild'];               
                    foreach ($request as $field => $key) {
                        if (in_array($field, $enabled)) $dataService->{$field} = $request->{$field};
                    }

                    if (isset($request->Image1->base64)) $data->Image1 = $this->fileService->uploadImage($request->Image1);
                    if (isset($request->Image2->base64)) $data->Image2 = $this->fileService->uploadImage($request->Image2);
                    if (isset($request->Image3->base64)) $data->Image3 = $this->fileService->uploadImage($request->Image3);
                    if (isset($request->Image4->base64)) $data->Image4 = $this->fileService->uploadImage($request->Image4);
                    if (isset($request->Image5->base64)) $data->Image5 = $this->fileService->uploadImage($request->Image5);
                    if (isset($request->Image6->base64)) $data->Image6 = $this->fileService->uploadImage($request->Image6);
                    if (isset($request->Image7->base64)) $data->Image7 = $this->fileService->uploadImage($request->Image7);
                    if (isset($request->Image8->base64)) $data->Image8 = $this->fileService->uploadImage($request->Image8);
                    
                    logger(22);
                    $dataService->save();
                    logger(23);
                }

                if ($itemType == "Restaurant") {
                    logger(18);
                    $dataService = ItemService::where('Oid',$data->Oid)->first();
                    if (!$dataService) {
                        logger(19);
                        $dataService = new ItemService();
                        $dataService->Oid = $data->Oid;
                    }
                    logger(20);
                    if (!isset($request->DateStart)) $request->DateStart = now() ?: null;
                    if (!isset($request->DateEnd)) $request->DateEnd = now() ?: null;
                    logger(21);
                    $enabled = ['Phone','Address','LoaAmendCancel'];               
                    foreach ($request as $field => $key) {
                        if (in_array($field, $enabled)) $dataService->{$field} = $request->{$field};
                    }
                    
                    logger(22);
                    $dataService->save();
                    logger(23);
                }

                if ($itemType == "Flight") {
                    logger(18);
                    $dataService = ItemService::where('Oid',$data->Oid)->first();
                    if (!$dataService) {
                        logger(19);
                        $dataService = new ItemService();
                        $dataService->Oid = $data->Oid;
                    }
                    logger(20);

                    $enabled = ['FlightNumber'];               
                    foreach ($request as $field => $key) {
                        if (in_array($field, $enabled)) $dataService->{$field} = $request->{$field};
                    }
                    
                    logger(22);
                    $dataService->save();
                    logger(23);
                }

                if ($itemType == "Production") {
                    logger(218);
                    $dataProduction = ProductionItem::where('Oid',$data->Oid)->first();
                    if (!$dataProduction) {
                        logger(219);
                        $dataProduction = new ProductionItem();
                        $dataProduction->Oid = $data->Oid;
                    }
                    logger(220);
                    $enabled = ['FeetConverted','RequireNext'];                
                    foreach ($request as $field => $key) {
                        if (in_array($field, $enabled)) $dataProduction->{$field} = $request->{$field};
                    }
                    logger(222);
                    $dataProduction->save();
                    $query = "INSERT INTO prditemprocess (Oid, Company, Item,ProductionProcess,Sequence,Note,Valid)
                        SELECT UUID(), p.Company,'".$dataProduction->Oid."', p.Oid,p.Sequence,p.Remark,0
                        FROM prdprocess p
                        WHERE NOT EXISTS (SELECT * FROM prditemprocess t WHERE t.Item = '{$dataProduction->Oid}')";
                    DB::insert($query);
                    logger(223);
                }

                if ($itemType == "Glass") {
                    logger(218);
                    $dataGlass = ProductionItemGlass::where('Oid',$data->Oid)->first();
                    if (!$dataGlass) {
                        logger(219);
                        $dataGlass = new ProductionItemGlass();
                        $dataGlass->Oid = $data->Oid;
                    }
                    logger(220);
                    $enabled = ['ProductionThickness'];                
                    foreach ($request as $field => $key) {
                        if (in_array($field, $enabled)) $dataGlass->{$field} = $request->{$field};
                    }
                    logger(222);
                    $dataGlass->save();
                    logger(223);
                }
                
                logger(24);
                if ($data->Details()->count() != 0) {
                    logger(25);
                    foreach ($data->Details as $rowdb) {
                        $itemType = ItemType::findOrFail($rowdb->ItemType)->Code;
                        if ($itemType != 'Attraction') {
                            $found = false;
                            logger('db: '.$rowdb->Oid);
                            foreach ($request->Details as $rowapi) {
                                logger(25);
                                if (isset($rowapi->Oid)) {
                                    logger('db: '.$rowdb->Oid.' api: '.$rowapi->Oid);
                                    if ($rowdb->Oid == $rowapi->Oid) $found = true;
                                    logger(250);
                                }
                            }
                            if (!$found) {
                                logger('!found '.$rowdb->Oid);
                                logger(101);
                                $tmp = TravelItem::where('Oid',$rowdb->Oid)->first();
                                if ($tmp) $tmp->delete();
                                logger(102);
                                $tmp = TravelItemHotel::where('Oid',$rowdb->Oid)->first();
                                if ($tmp) $tmp->delete();
                                logger(103);
                                $tmp = TravelItemTransport::where('Oid',$rowdb->Oid)->first();
                                if ($tmp) $tmp->delete();
                                logger(104);              
                                $tmp = ItemDetailLink::where('Oid',$rowdb->Oid)->first();
                                if ($tmp) $tmp->delete();
                                logger(105);               
                                Item::where('Oid',$rowdb->Oid)->first()->delete();
                                logger(106);
                            }
                        }
                    }
                    logger(26);
                }
                logger(27);
                if(isset($request->Details)) {
                    logger(28);
                    $rows = [];
                    foreach ($request->Details as $row) {
                        logger($row->Subtitle);
                        logger($row->ItemType);
                        $itemType = ItemType::findOrFail($row->ItemType)->Code;
                        if (!isset($row->Code)) $row->Code = '<<Auto>>';  
                        if ($row->Code == '<<Auto>>') $row->Code = now()->format('ymdHis').'-'.str_random(3);                    
                        $row->ParentOid = $data->Oid;
                        $row->ItemGroup = $data->ItemGroup;
                        $row->ItemAccountGroup = $data->ItemAccountGroup;
                        $row->ItemUnit = $data->ItemUnit;
                        if ($itemType != "Attraction") {
                            $row->Name = $data->Name.' - '.$row->Subtitle;
                            $row->PurchaseBusinessPartner = $data->PurchaseBusinessPartner;
                            $row->PurchaseCurrency = $data->PurchaseCurrency;
                        }
                        $row->SalesCurrency = $data->SalesCurrency;
                        $row->City = $data->City;
                        $row->AgentCurrency = $data->AgentCurrency;
                        $row->AgentAccount = $data->AgentAccount;
                        $row->APIType = $data->APIType;
                        $row->IsAllotment = $data->IsAllotment;
                        $row->IsStock = $data->IsStock;
                        $row->IsParent = false;
                        $row->IsDetail = true;
                        if (isset($row->Oid)) {
                            $detail = Item::findOrFail($row->Oid);
                        } else {
                            $detail = new Item();
                        }
                        $enabled = ['Code','ParentOid','Name','PurchaseBusinessPartner','ItemGroup','ItemAccountGroup','ItemUnit',
                            'PurchaseCurrency','SalesCurrency','City','AgentCurrency','AgentAccount','APIType','IsParent','IsDetail','ItemType',
                            'Subtitle','IsActive','Description','DescriptionZH','PurchaseAmount','UsualAmount',
                            'SalesAmount','SalesAmount1','SalesAmount2','SalesAmount3','SalesAmount4','SalesAmount5','DateStart','DateEnd','IsFeaturedItem'];
                        foreach ($row as $field => $key) {
                            if (in_array($field, $enabled)) $detail->{$field} = $row->{$field};
                        }
                        logger(101);
                        $detail->save();

                        if ($itemType == "Travel") {
                            $dataTour = TravelItem::where('Oid',$detail->Oid)->first();
                            if (!$dataTour) {
                                $datadetail = new ItemDetailLink(); 
                                $datadetail->Oid = $detail->Oid;
                                $datadetail->Parent = $data->Oid;
                                $datadetail->save();
                                $dataTour = new TravelItem();
                                $dataTour->Oid = $detail->Oid;
                            }
                            $enabled = ['Year'];                        
                            foreach ($row as $field => $key) {
                                if (in_array($field, $enabled)) $dataTour->{$field} = $row->{$field};
                            }
                            $dataTour->save();
                        } elseif ($itemType == "Hotel") {
                            $dataHotel = TravelItemHotel::where('Oid',$detail->Oid)->first();
                            if (!$dataHotel) {
                                $datadetail = new ItemDetailLink(); 
                                $datadetail->Oid = $detail->Oid;
                                $datadetail->Parent = $data->Oid;
                                $datadetail->save();
                                $dataHotel = new TravelItemHotel();
                                $dataHotel->Oid = $detail->Oid;
                            }
                            $enabled = ['TravelHotelRoomType','MaxChild','MinOrder','MaxOrder','MaxOccupancy','QtyDouble','QtyTwin','CutOffDay',
                                'AllowExtraBed','RoomSize'];
                            foreach ($row as $field => $key) {
                                if (in_array($field, $enabled)) $dataHotel->{$field} = $row->{$field};
                            }                        
                            $dataHotel->save();                        
                        } elseif ($itemType == "Transport") {
                            $dataTransport = TravelItemTransport::where('Oid',$detail->Oid)->first();
                            if (!$dataTransport) {
                                $datadetail = new ItemDetailLink(); 
                                $datadetail->Oid = $detail->Oid;
                                $datadetail->Parent = $data->Oid;
                                $datadetail->save();
                                $dataTransport = new TravelItemTransport();
                                $dataTransport->Oid = $detail->Oid;
                            }
                            $enabled = ['Year','Capacity'];                        
                            foreach ($row as $field => $key) {
                                if (in_array($field, $enabled)) $dataTransport->{$field} = $row->{$field};
                            }
                            $dataTransport->save();
                        } 
                    }
                    $data->load('Details');
                    $data->fresh();
                }
                $data->FeatureInfos()->delete();
                if(isset($request->FeatureInfos)) {
                    $rows = [];  
                    foreach ($request->FeatureInfos as $row) {
                        // $row->POSFeatureInfo = FeatureInfo::findOrFail($row->POSFeatureInfo)->Oid;
                        $rows[] = new FeatureInfoItem([
                            'POSFeatureInfo' => $row->POSFeatureInfo,
                            'DescriptionID' => $row->DescriptionID,
                            'DescriptionEN' => $row->DescriptionEN,
                            'DescriptionZH' => $row->DescriptionZH,
                            'DescriptionTH' => $row->DescriptionTH,                       
                        ]);
                    }
                    $data->FeatureInfos()->saveMany($rows);
                    $data->load('FeatureInfos');
                    $data->fresh();
                }

                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            $data = Item::with('POSItemServiceObj')->findOrFail($data->Oid);
            // $data = (new ItemResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listitemprocess(Request $request)
    {
        try {            
            $item = $request->input('item');
            $data = ProductionItemProcess::with(['ProductionProcessObj'])->where('Item',$item);
            $data = $data->orderBy('Sequence', 'asc')->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function saveitemprocess(Request $request)
    {        
        $item = $request->input('item');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
    
        try {            
            $data = Item::where('Oid',$item)->firstOrFail();
            DB::transaction(function () use ($request, &$data) {
                $disabled = ['Oid','ItemProcess','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy'];
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save();        

                if ($data->ItemProcess()->count() != 0) {
                    foreach ($data->ItemProcess as $rowdb) {
                        $found = false;               
                        foreach ($request->ItemProcess as $rowapi) {
                            if (isset($rowapi->Oid)) {
                                if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                        }
                        if (!$found) {
                            $detail = ProductionItemProcess::findOrFail($rowdb->Oid);
                            $detail->delete();
                        }
                    }
                }
                if($request->ItemProcess) {
                    $details = [];  
                    $disabled = ['Oid','Item','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy'];
                    foreach ($request->ItemProcess as $row) {
                        if (isset($row->Oid)) {
                            $detail = ProductionItemProcess::findOrFail($row->Oid);
                            foreach ($row as $field => $key) {
                                if (in_array($field, $disabled)) continue;
                                $detail->{$field} = $row->{$field};
                            }
                            $detail->save();
                        } else {
                            $arr = [];
                            foreach ($row as $field => $key) {
                                if (in_array($field, $disabled)) continue;                            
                                $arr = array_merge($arr, [
                                    $field => $row->{$field},
                                ]);
                            }
                            $details[] = new ProductionItemProcess($arr);
                        }
                    }
                    $data->ItemProcess()->saveMany($details);
                    $data->load('ItemProcess');
                    $data->fresh();
                }

                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new ProductionOrderResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listitemecommerce(Request $request)
    {
        try {            
            $item = $request->input('item');
            $data = ItemECommerce::with(['ECommerceObj'])->where('Item',$item);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function saveitemecommerce(Request $request)
    {        
        $item = $request->input('item');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
    
        try {            
            $data = Item::where('Oid',$item)->firstOrFail();
            DB::transaction(function () use ($request, &$data) {
                $disabled = ['Oid','ItemECommerces','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy'];
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save();        

                if ($data->ItemECommerces()->count() != 0) {
                    foreach ($data->ItemECommerces as $rowdb) {
                        $found = false;               
                        foreach ($request->ItemECommerces as $rowapi) {
                            if (isset($rowapi->Oid)) {
                                if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                        }
                        if (!$found) {
                            $detail = ItemECommerce::findOrFail($rowdb->Oid);
                            $detail->delete();
                        }
                    }
                }
                if($request->ItemECommerces) {
                    $details = [];  
                    $disabled = ['Oid','Item','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy'];
                    foreach ($request->ItemECommerces as $row) {
                        if (isset($row->Oid)) {
                            $detail = ItemECommerce::findOrFail($row->Oid);
                            foreach ($row as $field => $key) {
                                if (in_array($field, $disabled)) continue;
                                $detail->{$field} = $row->{$field};
                            }
                            $detail->save();
                        } else {
                            $arr = [];
                            foreach ($row as $field => $key) {
                                if (in_array($field, $disabled)) continue;                            
                                $arr = array_merge($arr, [
                                    $field => $row->{$field},
                                ]);
                            }
                            $details[] = new ItemECommerce($arr);
                        }
                    }
                    $data->ItemECommerces()->saveMany($details);
                    $data->load('ItemECommerces');
                    $data->fresh();
                }

                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new ProductionOrderResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function featurelist(Request $request) {        
        try {
            $data = FeatureInfoItem::with(['FeatureInfoObj'])->where('Item',$request->input('item'))->get();
            foreach($data as $row) {
                $row->FeatureInfoName = $row->FeatureInfoObj->Name;
            }
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    
    public function featuresave(Request $request, $Oid = null)
    {        
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'POSFeatureInfo.required'=>__('_.FeatureInfo').__('error.required'),
            'POSFeatureInfo.exists'=>__('_.FeatureInfo').__('error.exists'),
            'Item.required'=>__('_.Item').__('error.required'),
            'Item.exists'=>__('_.Item').__('error.exists'),
        );
        $rules = array(
            'POSFeatureInfo' => 'required|exists:posfeatureinfo,Oid',
            'Item' => 'required|exists:mstitem,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            if (!$Oid) $data = new FeatureInfoItem();
            else $data = FeatureInfoItem::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $disabled = disabledFieldsForEdit();
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save();
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new FeatureInfoItem($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
    
    public function detailfeaturelist(Request $request) {
        try {
            $query = "SELECT fii.*, pfi.Name AS POSFeatureInfoName FROM posfeatureinfoitem fii 
                LEFT OUTER JOIn mstitem i ON fii.Item = i.Oid
                LEFT OUTER JOIn posfeatureinfo pfi ON fii.POSFeatureInfo = pfi.Oid
                WHERE i.ParentOid = '{$request->input('item')}'";
            $data = DB::select($query);
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function featuredestroy(FeatureInfoItem $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function viewEticket($Oid = null)
    {        
        try {            
            $data = ETicket::where('PurchaseEticket',$Oid)->get();
            
            return response()->json(
                $data, Response::HTTP_OK
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function upload(Request $request, $Oid = null)
    {        
        $input = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        try {            
            DB::transaction(function () use ( $input, $request, &$data, $Oid) {
                $files = $request->file('EticketFile');
                $data = PurchaseEticket::findOrFail($Oid);
                
                foreach ($files as $key => $value) {
                    $name = $value->getClientOriginalName();
                    $eticket = $this->posETicketService->create($value, [ 
                        'PurchaseEticket' => $Oid, 
                        'Item' => $data->Item, 
                        'FileName' => $name, 
                        'CostPrice' => $data->Amount,
                        'DateExpiry' => null,
                    ]);
                    $result[] = $eticket->Oid;
                }
               
            });

            $data = ETicket::where('PurchaseEticket',$Oid)->get();
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deleteEticket($Oid = null)
    {        
        try {            
            DB::transaction(function () use ($Oid) {
                $data = ETicket::findOrFail($Oid);
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
    
    public function getPriceMethod($Oid = null)
    {
        try {            
            $itemPriceMethod = ItemPriceMethod::with(['SalesAddMethodObj','SalesAdd1MethodObj','SalesAdd2MethodObj','SalesAdd3MethodObj','SalesAdd4MethodObj','SalesAdd5MethodObj'])->where('Item',$Oid)->first();
            if (!$itemPriceMethod) {
                $itemPriceMethod = new ItemPriceMethod();
                $itemPriceMethod->save();
                $itemPriceMethod->Item = $Oid;
                $itemPriceMethod->save();
                $idItemPriceMethod = $itemPriceMethod->Oid;
            }else{
                $idItemPriceMethod = $itemPriceMethod->Oid;
            }
            $result = $itemPriceMethod;
            $result->Oid = $Oid;
            $result->ItemPriceMethod = $idItemPriceMethod;
            unset($result->Item);
            return response()->json(
                $result,
                Response::HTTP_OK
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function savePriceMethod(Request $request, $Oid = null)
    {  
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF

        try {            
            if (!$Oid) throw new \Exception('Data is failed to be saved');
            $data = Item::with('Details','ItemPriceMethodObj')->findOrFail($Oid);
            $ipm = $data->ItemPriceMethodObj;
            DB::transaction(function () use ($request, $ipm, &$data) {
                if ($request->ItemPriceMethod == null) { //decide to use global
                    $itemPriceMethod = ItemPriceMethod::where('Item',$data->Oid)->first();
                    if ($itemPriceMethod) $itemPriceMethod->delete();
                    $data->IsUsingPriceMethod = true;
                    $data->ItemPriceMethod = null;
                    $data->save();
                } else { //decide to use custom
                    $itemPriceMethod = ItemPriceMethod::where('Item',$data->Oid)->first();
                    if (!$itemPriceMethod) $itemPriceMethod = new ItemPriceMethod();
                    $itemPriceMethod->Item = $data->Oid;
                    $itemPriceMethod->Code = 'Item-'.$data->Code;
                    $itemPriceMethod->Name = 'Item-'.$data->Name;
                    $itemPriceMethod->IsActive = 1;
                    $itemPriceMethod->SalesAddMethod = $request->SalesAddMethod;
                    $itemPriceMethod->SalesAddAmount1 = $request->SalesAddAmount1;
                    $itemPriceMethod->SalesAddAmount2 = $request->SalesAddAmount2;
                    $itemPriceMethod->SalesAdd1Method = $request->SalesAdd1Method;
                    $itemPriceMethod->SalesAdd1Amount1 = $request->SalesAdd1Amount1;
                    $itemPriceMethod->SalesAdd1Amount2 = $request->SalesAdd1Amount2;
                    $itemPriceMethod->SalesAdd2Method = $request->SalesAdd2Method;
                    $itemPriceMethod->SalesAdd2Amount1 = $request->SalesAdd2Amount1;
                    $itemPriceMethod->SalesAdd2Amount2 = $request->SalesAdd2Amount2;
                    $itemPriceMethod->SalesAdd3Method = $request->SalesAdd3Method;
                    $itemPriceMethod->SalesAdd3Amount1 = $request->SalesAdd3Amount1;
                    $itemPriceMethod->SalesAdd3Amount2 = $request->SalesAdd3Amount2;
                    $itemPriceMethod->SalesAdd4Method = $request->SalesAdd4Method;
                    $itemPriceMethod->SalesAdd4Amount1 = $request->SalesAdd4Amount1;
                    $itemPriceMethod->SalesAdd4Amount2 = $request->SalesAdd4Amount2;
                    $itemPriceMethod->SalesAdd5Method = $request->SalesAdd5Method;
                    $itemPriceMethod->SalesAdd5Amount1 = $request->SalesAdd5Amount1;
                    $itemPriceMethod->SalesAdd5Amount2 = $request->SalesAdd5Amount2;
                    $itemPriceMethod->save();
                    $data->ItemPriceMethod = $itemPriceMethod->Oid;
                    $data->save();
                    if ($data->Details()->count() != 0) {
                        logger(2);
                        foreach ($data->Details as $row) {
                            if($row->IsUsingPriceMethod == true){
                                $detail = Item::findOrFail($row->Oid);
                                $posEticketUpload = POSETicketUpload::findOrFail($detail['POSEticketUpload']);
                                if(isset($request->ItemPriceMethod)){
                                    if (isset($itemPriceMethod->SalesAddMethod))  $detail->SalesAmount = $this->calcPrice('', $itemPriceMethod, $row);
                                    if (isset($itemPriceMethod->SalesAdd1Method)) $detail->SalesAmount1 = $this->calcPrice('1', $itemPriceMethod, $row);
                                    if (isset($itemPriceMethod->SalesAdd2Method)) $detail->SalesAmount2 = $this->calcPrice('2', $itemPriceMethod, $row);
                                    if (isset($itemPriceMethod->SalesAdd3Method)) $detail->SalesAmount3 = $this->calcPrice('3', $itemPriceMethod, $row);
                                    if (isset($itemPriceMethod->SalesAdd4Method)) $detail->SalesAmount4 = $this->calcPrice('4', $itemPriceMethod, $row);
                                    if (isset($itemPriceMethod->SalesAdd5Method)) $detail->SalesAmount5 = $this->calcPrice('5', $itemPriceMethod, $row);
                                }
                                $detail->save();
                                $posEticketUpload->Amount = $detail->SalesAmount;
                                $posEticketUpload->save();
                            }
                        }
                    }
                    $data->SalesAmount = $this->getPriceParent($data->Oid);
                    $data->save();

                }
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new Item($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
    
    public function getItemAttraction($Oid = null)
    {
        try {
            $data = POSETicketUpload::with(['BusinessPartnerObj','ItemObj','WarehouseObj'])->where('ItemParent',$Oid)->get();
            foreach($data as $row){
                $row->BusinessPartnerName = $row->BusinessPartner ? $row->BusinessPartnerObj->Name.' - '.$row->BusinessPartnerObj->Code : null;
                $row->ItemName = $row->Item ? $row->ItemObj->Name : null;
                $row->WarehouseName = $row->Warehouse ? $row->WarehouseObj->Name : null;

                unset($row->BusinessPartnerObj);
                unset($row->ItemObj); 
                unset($row->WarehouseObj);  
            }      
            
            return response()->json(
                $data,
                Response::HTTP_OK
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    private function getPriceParent($itemParent) {

        $item = Item::where('ParentOid',$itemParent)->orderBy('SalesAmount')->first();  

        return $item->SalesAmount;
    }

    private function calcPrice($priceMethodNo, $itemPriceMethod, $item) {

        $salesMethod = $itemPriceMethod->{'SalesAdd'.$priceMethodNo.'Method'};
        $salesAmount1 = $itemPriceMethod->{'SalesAdd'.$priceMethodNo.'Amount1'};
        $salesAmount2 = $itemPriceMethod->{'SalesAdd'.$priceMethodNo.'Amount2'};
        
        $curPurch = Currency::findOrFail($item->PurchaseCurrency);
        $cost = $curPurch->convertRate($item->ParentObj->SalesCurrency, $item->PurchaseAmount);
        logger($item->SalesCurrency);
        logger('$cost '.$cost.' $salesAmount1 '.$salesAmount1);
        $data = PriceMethod::findOrFail($salesMethod);
        switch ($data->Code) {
            case "Percentage": return $cost + (($cost * $salesAmount1)/100);
            case "Amount": return $cost + $salesAmount1;
            case "PercentageAmount": return $cost + (($cost * $salesAmount1)/100) + $salesAmount2;
            case "AmountPercentage": return $cost + $salesAmount1 + ((($cost + $salesAmount1) * $salesAmount2)/100);
        }
    }


    public function saveItemAttraction(Request $request, $Oid = null)
    {  
        $item = $request->input('item');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF

        try {
            logger(1);
            if (!$Oid) $data = new POSETicketUpload();
            else $data = POSETicketUpload::findOrFail($Oid);
            logger(2);

            DB::transaction(function () use ($request,$item,&$data) {
                $bp = BusinessPartner::findOrFail($request->BusinessPartner);
                $itemParent = Item::with('ItemGroupObj','ItemPriceMethodObj')->findOrFail($item);
                $cur = Currency::findOrFail($request->Currency);
                $data->ItemParent = $itemParent->Oid;
                $data->BusinessPartner = $request->BusinessPartner;
                $data->Description = $request->Description;
                $data->PurchaseDate = $request->DateFrom;
                $data->DateFrom = $request->DateFrom;
                $data->DateUntil = $request->DateUntil;
                $data->Currency = $request->Currency;
                $data->CostPrice = $request->CostPrice;
                $data->Amount = $request->Amount ?: $request->CostPrice;
                $data->AmountBase = $cur->ToBaseAmount($request->Amount, $request->Rate);
                $data->Warehouse = $request->Warehouse;
                $data->IsUsingPriceMethod = $request->IsUsingPriceMethod;
                $data->Rate = $request->Rate;
                $data->Account = $bp->BusinessPartnerAccountGroupObj->PurchaseInvoice;
                $data->Status = $request->Status ?: Status::entry()->first()->Oid;
                $data->save();

                $ipm = $itemParent->ItemPriceMethodObj;

                $item = Item::where('POSETicketUpload',$data->Oid)->first();
                if (!$item) $item = new Item();

                $item->Code = now()->format('ymdHis').'-'.str_random(3);                    
                $item->ParentOid = $itemParent->Oid;
                $item->Name = $itemParent->Name.' - '.$item->Code;
                $item->ItemGroup = $itemParent->ItemGroup;
                $item->ItemAccountGroup = $itemParent->ItemAccountGroup;
                $item->ItemUnit = $itemParent->ItemUnit;
                $item->PurchaseBusinessPartner = $request->BusinessPartner;
                $item->PurchaseCurrency = $request->Currency;
                $item->PurchaseAmount = $data->CostPrice;
                $item->SalesCurrency = $itemParent->SalesCurrency;
                $item->City = $itemParent->City;
                $item->AgentCurrency = $itemParent->AgentCurrency;
                $item->AgentAccount = $itemParent->AgentAccount;
                $item->APIType = $itemParent->APIType;
                $item->IsAllotment = $itemParent->IsAllotment;
                $item->IsStock = $itemParent->IsStock;
                $item->ItemType = $itemParent->ItemGroupObj->ItemType;
                $item->IsParent = false;
                $item->IsDetail = true;
                $item->IsActive = true;
                if($data->IsUsingPriceMethod == true){
                    if (isset($ipm)) { //TODO: waktu ubah itemmethod harga jual ulang hitung
                        if (isset($ipm->SalesAddMethod)) $item->SalesAmount = $this->calcPrice('', $ipm, $item);
                        if (isset($ipm->SalesAdd1Method)) $item->SalesAmount1 = $this->calcPrice('1', $ipm, $item);
                        if (isset($ipm->SalesAdd2Method)) $item->SalesAmount2 = $this->calcPrice('2', $ipm, $item);
                        if (isset($ipm->SalesAdd3Method)) $item->SalesAmount3 = $this->calcPrice('3', $ipm, $item);
                        if (isset($ipm->SalesAdd4Method)) $item->SalesAmount4 = $this->calcPrice('4', $ipm, $item);
                        if (isset($ipm->SalesAdd5Method)) $item->SalesAmount5 = $this->calcPrice('5', $ipm, $item);
                    }
                    $item->IsUsingPriceMethod = true;
                }else{
                    $item->SalesAmount = $data->Amount;
                    $item->IsUsingPriceMethod = false;
                }
                $item->POSETicketUpload = $data->Oid;
                $item->save();

                $itemParent->IsParent = 1;
                $itemParent->SalesAmount = $this->getPriceParent($itemParent->Oid);
                $itemParent->save();
                if(!$item) throw new \Exception('Data is failed to be saved');
                
                $data->Item = $item->Oid;
                $data->Amount = $item->SalesAmount;
                $data->TotalAmount = $item->SalesAmount;
                $data->save();
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new Item($data))->type('detail');
            logger($data);
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }


    public function deleteAttraction($Oid = null)
    {        
        try {            
            DB::transaction(function () use ($Oid) {
                $data = POSETicketUpload::findOrFail($Oid);
                $data->ETickets()->delete();
                $delete = $data->delete();
                if($delete){
                    $item = Item::where('POSEticketUpload',$Oid);
                    $item->delete();
                }
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function changeStatus(Request $request, Item $data)
    {
        try {
            DB::transaction(function () use ($request, &$data) {
                $data->Status = $request->Status;
                $data->save();
            });
            
            return response()->json(
                $data, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listitemoutbound(Request $request)
    {
        try {            
            $item = $request->input('item');
            $data = Item::with(['Details','Details.TravelItemOutboundObj'])->where('Oid',$item);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function saveitemoutbound(Request $request, $Oid = null)
    {    
        logger('aaa');    
        $item = $request->input('item');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
    
        $itemParent = Item::findOrFail($item);
        $itemtypeoutbound = ItemType::where('Code','Outbound')->first()->Oid;
        try {            
            if (!$Oid) $data = new Item();
            else $data = Item::findOrFail($Oid);
            DB::transaction(function () use ($request, $itemParent,$itemtypeoutbound, &$data) {
                $enabled = ['Subtitle','IsActive','Description','DescriptionZH'];                
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $data->{$field} = $request->{$field};
                }
                $data->save();    
                $data->ParentOid = $itemParent->Oid;
                $data->ItemGroup = $itemParent->ItemGroup;
                $data->ItemAccountGroup = $itemParent->ItemAccountGroup;
                $data->ItemUnit = $itemParent->ItemUnit;
                $data->ItemType = $itemtypeoutbound;
                $data->SalesCurrency = $itemParent->SalesCurrency;
                $data->City = $itemParent->City;
                $data->AgentCurrency = $itemParent->AgentCurrency;
                $data->AgentAccount = $itemParent->AgentAccount;
                $data->APIType = $itemParent->APIType;
                $data->IsAllotment = $itemParent->IsAllotment;
                $data->IsStock = $itemParent->IsStock;
                $data->IsParent = false;
                $data->IsDetail = true;
                $data->Name = $itemParent->Name.' - '.$data->Subtitle;
                $data->save();
                $dataOutbound = TravelItemOutbound::where('Oid',$data->Oid)->first();  
                if (!$dataOutbound) { 
                    $dataOutbound = new TravelItemOutbound();
                    $dataOutbound->Oid = $data->Oid; 
                }
                $enabled = ['PurchaseSGL','PurchaseTWN','PurchaseTRP','PurchaseQuad','PurchaseQuint','PurchaseCHT','PurchaseCWB','PurchaseCNB','IsDayMonday','IsDayTuesday',
                'IsDayWednesday','IsDayThursday','IsDayFriday','IsDaySaturday','IsDaySunday'];                
                foreach ($request as $field => $key) {
                    if (in_array($field, $enabled)) $dataOutbound->{$field} = $request->{$field};
                }
                $dataOutbound->save();

                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new ProductionOrderResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deleteitemoutbound($Oid = null)
    {
        try {            
            DB::transaction(function () use ($Oid) {
                $data = Item::findOrFail($Oid);
                $data->TravelItemOutboundObj()->delete();
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listitemoutbounddate(Request $request)
    {
        try {            
            $item = $request->input('item');
            $data = TravelItemOutboundDate::with(['ItemObj'])->where('Item',$item);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function saveitemoutbounddate(Request $request)
    {        
        $item = $request->input('item');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
    
        try {            
            $data = Item::where('Oid',$item)->firstOrFail();
            DB::transaction(function () use ($request, &$data) {
                $disabled = ['Oid','ItemOutboundDates','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy'];
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save();        

                if ($data->ItemOutboundDates()->count() != 0) {
                    foreach ($data->ItemOutboundDates as $rowdb) {
                        $found = false;               
                        foreach ($request->ItemOutboundDates as $rowapi) {
                            if (isset($rowapi->Oid)) {
                                if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                        }
                        if (!$found) {
                            $detail = TravelItemOutboundDate::findOrFail($rowdb->Oid);
                            $detail->delete();
                        }
                    }
                }
                if($request->ItemOutboundDates) {
                    $details = [];  
                    $disabled = ['Oid','Item','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy'];
                    foreach ($request->ItemOutboundDates as $row) {
                        if (isset($row->Oid)) {
                            $detail = TravelItemOutboundDate::findOrFail($row->Oid);
                            foreach ($row as $field => $key) {
                                if (in_array($field, $disabled)) continue;
                                $detail->{$field} = $row->{$field};
                            }
                            $detail->save();
                        } else {
                            $arr = [];
                            foreach ($row as $field => $key) {
                                if (in_array($field, $disabled)) continue;                            
                                $arr = array_merge($arr, [
                                    $field => $row->{$field},
                                ]);
                            }
                            $details[] = new TravelItemOutboundDate($arr);
                        }
                    }
                    $data->ItemOutboundDates()->saveMany($details);
                    $data->load('ItemOutboundDates');
                    $data->fresh();
                }

                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new ProductionOrderResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function import(Request $request)
    {
        $validator = Validator::make($request->all(), [ 'file' => 'required|mimes:xls,xlsx' ]);

        if ($validator->fails()) return response()->json($validator->messages(), Response::HTTP_UNPROCESSABLE_ENTITY);
        if (!$request->hasFile('file')) return response()->json('No file found', Response::HTTP_UNPROCESSABLE_ENTITY);
        
        $file = $request->file('file');
        $this->excelService->import(new ItemExcelImport, $file);
        return response()->json(null, Response::HTTP_CREATED);
    }

    public function importSample(Request $request)
    {
        $url = url('importsamples/import_paymentterm.xlsx');
        return response()->json($url, Response::HTTP_OK);
    }
}
