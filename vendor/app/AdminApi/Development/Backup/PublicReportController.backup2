<?php

namespace App\AdminApi\Pub\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Internal\Entities\Status;
use App\Core\Security\Services\RoleModuleService;
use App\AdminApi\Pub\Controllers\ServerCRUDController;
use App\AdminApi\Report\Services\ReportService;
use App\Core\Base\Services\HttpService;

use Barryvdh\DomPDF\Facade as PDF;
use Barryvdh\Snappy\Facades\SnappyPdf;
use Carbon\Carbon;

class PublicReportController extends Controller
{
    protected $reportService;
    private $CRUDController;
    public function __construct()
    {
        $this->CRUDController = new ServerCRUDController();
        $this->reportService = new ReportService();
        $this->httpService = new HttpService();
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
    }

    public function config(Request $request) {
        $return = $this->httpService->get('/portal/api/development/table/phpreport?code=ReportStock');
        // return $return;
        return response()->json(
            $return,
            Response::HTTP_OK
        );
    }

    private function tableJoin($data, $tableSource, $tableTarget, $fieldName) {
        $tableAs = $tableSource.'_'.$fieldName;
        // logger('LEFT OUTER JOIN '.$tableTarget.' AS '.$tableAs.' = '.$tableSource.'.'.$fieldName);
        return $data.PHP_EOL." LEFT OUTER JOIN ".$tableTarget." AS ".$tableAs." ON ".$tableAs.".Oid=".$tableSource.".".$fieldName;
    }

    private function tableJoinDetail($data, $tableTarget, $fieldName) {
        // logger('LEFT OUTER JOIN '.$tableTarget.' AS d = p.'.$fieldName);
        return $data.PHP_EOL." LEFT OUTER JOIN ".$tableTarget." AS d ON p.Oid=d.".$fieldName;
    }

    private function tableWhere($data, $string) { return $data.PHP_EOL." AND ".$string; }

    public function report(Request $request) {
        $report = $this->CRUDController->functionGetReport($request->input('report'))[0];
        $reportParent = $this->CRUDController->functionGetReportParent($report->ModuleReport)[0];
        $report->User = Auth::user();
        $tableData = $this->CRUDController->getDataJSON($reportParent->TableParent, 'all');
        $report->Columns = json_decode($report->Columns);
        $report->FieldsParent = json_decode($report->FieldsParent);
        if ($report->FieldsDetail) $report->FieldsDetail = json_decode($report->FieldsDetail);

        $data = " FROM ".$reportParent->TableParent.' as p';
        
        // join parent table combo
        $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($reportParent->TableParent, 'list');
        $joinTable = null;
        foreach ($fieldCombos as $combo) {
            $data = $this->tableJoin($data, 'p', $combo->TableName, $combo->FieldName);
            $joinTable = $joinTable.($joinTable ? ",'" : "'").$combo->TableName."'";
        }
        // join parent table combo lvl 2
        $tableJoins = $this->CRUDController->functionGetReportTableJoin($joinTable);
        foreach ($tableJoins as $tableJoin) {
            $tmp = json_decode($tableJoin->ReportJoinTable);
            foreach ($tmp as $row) $data = $this->tableJoin($data, 'p_'.$tableJoin->Name, $row->table, $row->field);
        }
        
        // join detail table combo
        if (isset($report->FieldsDetail)) {
            $data = $this->tableJoinDetail($data, $reportParent->TableDetail, $tableData->Name);
            $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($reportParent->TableDetail, 'list');
            $joinTable = null;
            foreach ($fieldCombos as $combo) {
                if ($combo->TableName == 'company') continue;
                $data = $this->tableJoin($data, 'd', $combo->TableName, $combo->FieldName);
                $joinTable = $joinTable.($joinTable ? ",'" : "'").$combo->TableName."'";
            }
    
            // join detail table combo lvl2
            $tableJoins = $this->CRUDController->functionGetReportTableJoin($joinTable);
            foreach ($tableJoins as $tableJoin) {
                $tmp = json_decode($tableJoin->ReportJoinTable);
                foreach ($tmp as $row) $data = $this->tableJoin($data, 'd_'.$tableJoin->Name, $row->table, $row->field);
            }    
        }

        //criteria
        $data = $data.PHP_EOL." WHERE p.GCRecord IS NULL";
        $report->Filter=null;
        if ($request->has('DateFrom')) {
            $datefrom = Carbon::parse($request->input('DateFrom'));
            $report->Filter = $report->Filter."Date From = '".strtoupper($datefrom->format('Y-m-d'))."'; "; 
            $data = $this->tableWhere($data, "DATE_FORMAT(p.Date, '%Y-%m-%d') >= '".$datefrom->format('Y-m-d')."'");
        }
        if ($request->has('DateTo')) {
            $dateto = Carbon::parse($request->input('DateTo'));
            $report->Filter = $report->Filter."Date Until = '".strtoupper($dateto->format('Y-m-d'))."'; "; 
            $data = $this->tableWhere($data, "DATE_FORMAT(p.Date, '%Y-%m-%d') <= '".$dateto->format('Y-m-d')."'");
        }
        if ($reportParent->ReportCriterias) {
            $reportParent->ReportCriterias = json_decode($reportParent->ReportCriterias);
            foreach ($reportParent->ReportCriterias as $field) {
                if (!$request->has($field->fieldToSave)) continue;
                if (in_array($field->fieldToSave, ['DateFrom','DateTo'])) continue;
                $report->Filter = $report->Filter.$field->fieldToSave." = '".$request->input($field->fieldToSave)."'; "; 
                $data = $this->tableWhere($data, $field->fieldToSave.".Oid='".$request->input($field->fieldToSave)."'");
            }
        }

        //select
        $fieldsOnly = [];
        $selectFields = null;
        $group = "";
        if (in_array($report->ReportType, ['Daily','Monthly'])) {
            if ($report->ReportType == 'Daily') {
                $fieldDate = "DATE_FORMAT(p.Date, '%d-%M-%Y')";
                $group = "DATE_FORMAT(p.Date, '%Y-%m-%d'), DATE_FORMAT(p.Date, '%d-%M-%Y')";
            } else {
                $fieldDate = "DATE_FORMAT(p.Date, '%m-%Y')";
                $group = "DATE_FORMAT(p.Date, '%Y-%m'), DATE_FORMAT(p.Date, '%m %Y')";
            }
            $selectFields = $selectFields = $selectFields.PHP_EOL.($selectFields ? ',' : '').$fieldDate." AS p_Date";
            $fieldsOnly[] = (object) [   
                "Field" => $fieldDate,
                "FieldDisplay" => $fieldDate,
                "Alias" => "p_Date",
                "Name" => "Date"
            ];
            foreach ($report->FieldsParent as $field) {                
                if (isset($field->Sum)) $selectFields = $selectFields = $selectFields.PHP_EOL.($selectFields ? ',' : '')."SUM(IFNULL(".$field->FieldDisplay.",0)) AS ".$field->Alias;
                else {
                    $selectFields = $selectFields = $selectFields.PHP_EOL.($selectFields ? ',' : '').$field->FieldDisplay." AS ".$field->Alias;                    
                    if (isset($field->Group)) $group = $group = $field->FieldDisplay.",".$group;
                    else $group = $group = $group.",".$field->FieldDisplay;
                }
            }
            $group = PHP_EOL."GROUP BY ".$group;
        } else {
            if ($report->FieldsParent) foreach ($report->FieldsParent as $field) $selectFields = $selectFields = $selectFields.PHP_EOL.($selectFields ? ',' : '').$field->FieldDisplay." AS ".$field->Alias;
            if ($report->FieldsDetail) foreach ($report->FieldsDetail as $field) $selectFields = $selectFields = $selectFields.PHP_EOL.($selectFields ? ',' : '').$field->FieldDisplay." AS ".$field->Alias;
        }
        
        //rearrange fields & grouping
        $fieldsSum = [];
        $fieldsSumColSpan = 0;
        $fieldSort = null;
        $i = 0;
        foreach ($report->FieldsParent as $field) {
            if (isset($field->Sum)) if ($field->Sum) {
                $fieldsSum = array_merge($fieldsSum, [ $field->Alias => 0 ]);
                if ($fieldsSumColSpan < 1) $fieldsSumColSpan = $i;
            }
            $i = $i + 1;
        }  
        foreach ($report->FieldsParent as $field) {
            if (isset($field->Group)) {
                if ($field->Group) {
                    $report->{'Group'.$field->Group} = $field;
                    $report->{'Group'.$field->Group}->Value = null;
                    $report->{'Group'.$field->Group}->ColSpan = $fieldsSumColSpan;
                    $report->{'Group'.$field->Group}->Sum = $fieldsSum;
                    $fieldSort = $fieldSort.($fieldSort ? ", " : "").$field->FieldDisplay;
                }
            } else $fieldsOnly[] = $field;
        }
        $report->FieldsParent = $fieldsOnly;
        
        $fields = $this->CRUDController->functionGetFieldsFromTable($tableData->Code);
        $sort = null;
        if (!in_array($report->ReportType, ['Daily','Monthly'])) {
            foreach($fields as $row) if ($row->Code == 'Date') $sort = "p.Date";
            if ($sort) foreach($fields as $row) if ($row->Code == 'Code') $sort = "p.Date, p.Code";
            if (!$sort) foreach($fields as $row) if ($row->Code == 'Name') $sort = "p.Name";
            if (!$sort) $sort = "p.CreatedAt";
        }
        $sort = PHP_EOL."ORDER BY ".$fieldSort.($fieldSort && $sort ? ", " : "").$sort;
        $query="SELECT ".$selectFields.$data.$group.$sort;
        // dd($query);
        $data = DB::select($query);
        
        $report->Parent = null;
        $dataReport = $report;
        if ($request->input('action')=='dev') return view('AdminApi\Pub::pdf.report1', compact('data', 'dataReport'));
        $pdf = SnappyPdf::loadView('AdminApi\Pub::pdf.report1', compact('data', 'dataReport'));
        $headerHtml = view('AdminApi\Pub::pdf.header', compact('dataReport'))->render();
        $footerHtml = view('AdminApi\Pub::pdf.footer', compact('dataReport'))->render();
        $pdf
            ->setOption('header-html', $headerHtml)
            ->setOption('footer-html', $footerHtml)
            ->setOption('footer-right', "Page [page] of [toPage]")
            ->setOption('footer-font-size', 5)
            ->setOption('footer-line', true)
            ->setOption('margin-right', 10)
            ->setOption('margin-bottom', 10);

        $reportFile = $this->reportService->create('Temporary_Report_Generated_', $pdf);
        if ($request->input('action')=='download') return response()->download($reportFile->getFilePath())->deleteFileAfterSend(true);
        return response()->json(
            route('AdminApi\Report::view',
            ['reportName' => $reportFile->getFileName()]), Response::HTTP_OK
        );
    }

    public function reportFields($table) {
        $reportParent = $this->CRUDController->functionGetReportParent($table)[0];
        $fields = $this->CRUDController->functionGetFieldsFromTable($reportParent->TableParent);
        $fieldParent = [];
        $fieldDetail = [];
        foreach ($fields as $field) {
            if (!$field->IsActive ) continue;
            if ($field->IsImage) continue;
            elseif ($field->APITableCombo) {
                $fieldParent[] = [
                    'Field' => 'p_'.$field->Code.'.Oid',
                    'FieldDisplay' => 'p_'.$field->Code.'.'.$field->TableComboField,
                    'Alias'  => 'p_'.$field->Code,
                    'Name' => $field->Name
                ];
                if ($field->ReportJoinTable) {
                    $tmp = json_decode($field->ReportJoinTable);
                    foreach ($tmp as $row) {
                        $fieldParent[] = [
                            'Field' => 'p_'.$field->Code.'_'.$row->field.'.Oid',
                            'FieldDisplay' => 'p_'.$field->Code.'_'.$row->field.'.'.$field->TableComboField,
                            'Alias'  => 'p_'.$field->Code.'_'.$row->field,
                            'Name' => $field->Name.' '.$row->field
                        ];
                    }
                }
            } else $fieldParent[] = [
                    'Field' => 'p.'.$field->Code,
                    'FieldDisplay' => 'p.'.$field->Code,
                    'Alias'  => 'p_'.$field->Code,
                    'Name' => $field->Name
                ];
        }
        if ($reportParent->TableDetail) {
            $fields = $this->CRUDController->functionGetFieldsFromTable($reportParent->TableDetail);            
            foreach ($fields as $field) {
                if (!$field->IsActive ) continue;
                if ($field->IsImage) continue;
                elseif ($field->APITableCombo) {
                    $fieldDetail[] = [
                        'Field' => 'd_'.$field->Code.'.Oid',
                        'FieldDisplay' => 'd_'.$field->Code.'.'.$field->TableComboField,
                        'Alias'  => 'd_'.$field->Code,
                        'Name' => $field->Name
                    ];
                    if ($field->ReportJoinTable) {
                        $tmp = json_decode($field->ReportJoinTable);
                        foreach ($tmp as $row) {
                            $fieldDetail[] = [
                                'Field' => 'd_'.$field->Code.'_'.$row->field.'.Oid',
                                'FieldDisplay' => 'd_'.$field->Code.'_'.$row->field.'.'.$field->TableComboField,
                                'Alias'  => 'd_'.$field->Code.'_'.$row->field,
                                'Name' => $field->Name.' '.$row->field
                            ];
                        }
                    }
                } else $fieldDetail[] = [
                        'Field' => 'd.'.$field->Code,
                        'FieldDisplay' => 'd.'.$field->Code,
                        'Alias'  => 'd_'.$field->Code,
                        'Name' => $field->Name
                    ];
            }
        }
        $fieldSpecial[] = (object) [   
            "Field" => "DATE_FORMAT(p.Date, '%Y-%m-%d'), DATE_FORMAT(p.Date, '%d-%M-%Y')",
            "FieldDisplay" => "DATE_FORMAT(p.Date, '%d-%M-%Y')",
            "Alias" => "p_Date",
            "Name" => "Date"
        ];
        $fieldSpecial[] = (object) [   
            "Field" => "DATE_FORMAT(p.Date, '%Y-%m'), DATE_FORMAT(p.Date, '%m %Y')",
            "FieldDisplay" => "DATE_FORMAT(p.Date, '%m-%Y')",
            "Alias" => "p_Date",
            "Name" => "Date"
        ];
        $fieldSpecial[] = (object) [   
            "IsFormula" => true,
            "FieldFormula" => [
                "DebetAmount","*","CreditAmount"
            ],
            "RunningSum" => "Group",
        ];
        return [
            "Parent" => $fieldParent,
            "Detail" => $fieldDetail,
            "SpecialFields" => $fieldSpecial,
        ];
    }
}
