<?php

namespace App\AdminApi\Trading\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Trading\Entities\SalesInvoice;
use App\Core\Trading\Entities\SalesInvoiceDetail;
use App\Core\Accounting\Entities\CashBank;
use App\Core\Accounting\Entities\CashBankDetail;
use App\Core\Accounting\Entities\Account;
use App\Core\Internal\Entities\Status;
use App\Core\Trading\Resources\SalesInvoiceResource;
use App\Core\Trading\Resources\SalesInvoiceCollection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Core\Accounting\Services\SalesInvoiceService;
use App\Core\Security\Services\RoleModuleService;
use Carbon\Carbon;
use Validator;

class SalesInvoiceController extends Controller
{
    protected $SalesInvoiceService;
    protected $roleService;

    public function __construct(
        SalesInvoiceService $SalesInvoiceService,
        RoleModuleService $roleService  
        )
    {
        $this->salesInvoiceService = $SalesInvoiceService;
        $this->roleService = $roleService;
    }
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Code');
        $fields[] = serverSideConfigField('Date');
        $fields[] = serverSideConfigField('BusinessPartner');
        $fields[] = ['w'=> 200, 'n'=>'CodeReff',];
        $fields[] = serverSideConfigField('Currency');
        $fields[] = ['w'=> 200, 'n'=>'TotalAmount'];
        $fields[] = serverSideConfigField('Warehouse');
        $fields[] = serverSideConfigField('Status');
        return $fields;
    }

    public function config(Request $request) {
        return serverSideFields($this->fields());
    }
    public function list(Request $request) {
        $fields = $this->fields();
        $data = DB::table('trdsalesinvoice as data')
            ->leftJoin('mstcurrency AS c', 'c.Oid', '=', 'data.Currency')
            ->leftJoin('mstbusinesspartner AS bp', 'bp.Oid', '=', 'data.BusinessPartner')
            ->leftJoin('mstwarehouse AS w', 'w.Oid', '=', 'data.Warehouse')
            ->leftJoin('sysstatus AS s', 's.Oid', '=', 'data.Status');
        $data = serverSideQuery($data, $fields, $request,'Date');
        $role = $this->roleService->list('SalesInvoice');
        $action = $this->roleService->action('SalesInvoice');
        foreach($data as $row) $row->Role = $this->roleService->generateRole($row, $role, $action);
        return serverSideReturn($data, $fields);
    }

    public function index(Request $request, $Oid = null)
    {
        try {            
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = SalesInvoice::whereNull('GCRecord');
            if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            if ($type == 'list') $data->with(['CurrencyObj','BusinessPartnerObj','AccountObj','StatusObj']);
            if ($request->has('date')) {
                $data = $data
                    ->where('Date','>=', Carbon::parse($request->date)->startOfMonth()->toDateString())
                    ->where('Date','<', Carbon::parse($request->date)->startOfMonth()->addMonths(1)->toDateString());
            }
            $data = $data->get();
            
            $result = [];
            $role = $this->roleService->list('SalesInvoice');
            $action = $this->roleService->action('SalesInvoice');
            foreach ($data as $row) {
                $result[] = [
                    'Oid' => $row->Oid,
                    'Code' => $row->Code,
                    'Date' => Carbon::parse($row->Date)->format('Y-m-d'),
                    'CodeReff' => $row->CodeReff,
                    'TotalAmount' => number_format($row->TotalAmount,$row->CurrencyObj->Decimal),
                    'CurrencyName' => $row->CurrencyObj ? $row->CurrencyObj->Code : null,
                    'WarehouseName' => $row->WarehouseObj ? $row->WarehouseObj->Code : null,
                    'BusinessPartnerName' => $row->BusinessPartnerObj ? $row->BusinessPartnerObj->Name.' - '.$row->BusinessPartnerObj->Code : null,
                    'StatusName' => $row->StatusObj ? $row->StatusObj->Name : null,
                    'Role' => $this->GenerateRole($row, $role, $action)
                ];
            }
            return $result;
            // return (new SalesInvoiceCollection($data))->type($type);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function show(SalesInvoice $data)
    {
        try {
            $data = SalesInvoice::with(['Details'])->with([
                'WarehouseObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'BusinessPartnerObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'AccountObj' => function ($query) {$query->addSelect('Oid', 'Code','Name','Currency');},
                'Details.ItemObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'AdditionalAccountObj' => function ($query) {$query->addSelect('Oid', 'Code','Name','Currency');},
                'DiscountAccountObj' => function ($query) {$query->addSelect('Oid', 'Code','Name','Currency');},                
            ])->findOrFail($data->Oid);
            $data->Role = $this->generateRole($data);
        return (new SalesInvoiceResource($data))->type('detail');
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    
    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Code.required'=>__('_.Code').__('error.required'),
            'Code.max'=>__('_.Code').__('error.max'),
            'Rate.required'=>__('_.Rate').__('error.required'),
            'Rate.max'=>__('_.Rate').__('error.max'),
            'Date.required'=>__('_.Date').__('error.required'),
            'Date.date'=>__('_.Date').__('error.date'),
            'Status.required'=>__('_.Status').__('error.required'),
            'Status.exists'=>__('_.Status').__('error.exists'),
            'BusinessPartner.required'=>__('_.BusinessPartner').__('error.required'),
            'BusinessPartner.exists'=>__('_.BusinessPartner').__('error.exists'),
            'Account.required'=>__('_.Account').__('error.required'),
            'Account.exists'=>__('_.Account').__('error.exists'),
            'Currency.required'=>__('_.Currency').__('error.required'),
            'Currency.exists'=>__('_.Currency').__('error.exists'),
        );
        $rules = array(
            'Code' => 'required|max:255',
            'Date' => 'required|date',
            'Rate' => 'required|max:255',
            'Status' => 'required|exists:sysstatus,Oid',
            'BusinessPartner' => 'required|exists:mstbusinesspartner,Oid',
            'Account' => 'required|exists:accaccount,Oid',
            'Currency' => 'required|exists:mstcurrency,Oid',    
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            DB::transaction(function () use ($request, $Oid, &$data) {
            if (!$Oid) $data = new SalesInvoice();
            else $data = SalesInvoice::findOrFail($Oid);

            $company = Auth::user()->CompanyObj;
            $account = Account::findOrFail($request->Account);
            $data->Company = $company->Oid;
            $data->Code = $request->Code == '<<Auto>>' ? now()->format('ymdHis').'-'.str_random(3) : $request->Code;
            $data->CodeReff = $request->CodeReff;
            $data->Date = $request->Date;
            $data->BusinessPartner = $request->BusinessPartner;
            $data->Account = $account->Oid;
            $data->Currency = $account->Currency;
            $data->AdditionalAccount = $request->AdditionalAccount;
            $data->AdditionalAmount = $request->AdditionalAmount ?: 0;
            $data->DiscountAccount = $request->DiscountAccount;
            $data->DiscountAmount = $request->DiscountAmount ?: 0;
            $data->Rate = $request->Rate ?: $account->CurrencyObj->getRate($data->Date)->MidRate;
            $data->Status = $request->Status ?: Status::entry()->first()->Oid;
            $data->TotalAmount = $data->AdditionalAmount - $data->DiscountAmount;
            $data->Warehouse = isset($request->Warehouse) ? $request->Warehouse : $company->Warehouse;
            $data->BillingAddress = $request->BillingAddress;
            $data->Note = $request->Note;
            $data->save();

            if ($data->Details()->count() != 0) {
                foreach ($data->Details as $rowdb) {
                    $found = false;               
                    foreach ($request->Details as $rowapi) {
                        if (isset($rowapi->Oid)) {
                            if ($rowdb->Oid == $rowapi->Oid) $found = true;
                        }
                    }
                    if (!$found) {
                        $detail = SalesInvoiceDetail::findOrFail($rowdb->Oid);
                        $detail->delete();
                    }
                }
            }
            $totalAmount = 0;
            if($request->Details) {
                $details = [];
                foreach ($request->Details as $row) {
                    if (isset($row->Oid)) {
                        $detail = SalesInvoiceDetail::findOrFail($row->Oid);
                        $detail->Item = $row->Item;
                        $detail->Quantity = $row->Quantity;
                        $detail->Price = $row->Price;
                        $detail->TotalAmount = $row->Quantity * $row->Price;
                        $detail->save();
                    } else {
                        $details[] = new SalesInvoiceDetail([
                            'Item' => $row->Item,
                            'Quantity' => $row->Quantity,
                            'Price' => $row->Price,
                            'TotalAmount' => $row->Quantity * $row->Price
                        ]);
                    }
                    $totalAmount += $row->Quantity * $row->Price;
                }
                $data->Details()->saveMany($details);
            }            
            $data->TotalAmount = $totalAmount + $data->AdditionalAmount - $data->DiscountAmount;
                $data->save();
                $data->load('Details');
                $data->fresh();
                
                $data->BusinessPartnerName = $data->BusinessPartner ? $data->BusinessPartnerObj->Name : null;
                $data->CurrencyName = $data->Currency ? $data->CurrencyObj->Code : null;
                $data->StatusName = $data->Status ? $data->StatusObj->Name : null;
                $data->WarehouseName = $data->Warehouse ? $data->WarehouseObj->Code : null;
                $data->Role = $this->generateRole($data);
            });
            // $data = new SalesInvoiceResource($data);
            return response()->json(
                $data, Response::HTTP_CREATED
            )->header('Location', route('AdminApi\SalesInvoice::show', ['data' => $data->Oid]));
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function post(SalesInvoice $data)
    {
        try {            
            $this->salesInvoiceService->post($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function unpost(SalesInvoice $data)
    {
        try {            
            $this->salesInvoiceService->unpost($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function cancelled(SalesInvoice $data)
    {
        try {            
            $this->salesInvoiceService->cancelled($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function destroy(SalesInvoice $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->Journals()->delete();
                $data->delete();
            });
            
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function convertToReceipt(SalesInvoice $data, Request $request)
    {        
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        $cashbank = new CashBank();
        try {            
            DB::transaction(function () use ($request,$cashbank, &$data) {
                $cashbank->Type = 2; //receipt
                $account = Account::with('CurrencyObj')->findOrFail($request->Account);
                $cur = $account->CurrencyObj;
                $cashbank->Company = Auth::user()->Company;
                $cashbank->Code = now()->format('ymdHis').'-'.str_random(3);
                $cashbank->Date = Carbon::now();
                $cashbank->Account = $account->Oid;
                $cashbank->Currency = $account->Currency;
                $cashbank->BusinessPartner = $data->BusinessPartner;
                $cashbank->Note = $data->Note;
                $cashbank->Rate = $request->Rate ?: $account->CurrencyObj->getRate($cashbank->Date)->MidRate;
                $cashbank->Status = Status::entry()->first()->Oid;
                $cashbank->save();

                $details = [];
                if ($cashbank->Currency == $data->Currency) {
                    $amountCashBank = $data->TotalAmount;
                    $amountCashBankBase = $cur->toBaseAmount($data->TotalAmount, $data->Rate);
                } else {
                    $amountCashBank = $request->Amount;
                    $amountCashBankBase = $cur->toBaseAmount($request->Amount, $data->Rate);
                } 
                $details[] = new CashBankDetail([
                    'SalesInvoice' => $data->Oid,
                    'Account' => $data->Account,
                    'Currency' => $data->Currency,
                    'Rate' => $data->Rate,
                    'AmountInvoice' => $data->TotalAmount,
                    'AmountInvoiceBase' => $cur->toBaseAmount($data->TotalAmount, $data->Rate),
                    'AmountCashBank' => $amountCashBank,
                    'AmountCashBankBase' => $amountCashBankBase,
                ]);
                $cashbank->Details()->saveMany($details);

                if(!$cashbank) throw new \Exception('Data is failed to be saved');

                $strOid = '';
                foreach ($cashbank->Details as $rowdb) {
                    $strOid = $strOid.($strOid ? ", " : "")."'".$rowdb->SalesInvoice."'";
                }
                $query = "UPDATE trdsalesinvoice sinv
                    LEFT OUTER JOIN (
                        SELECT cbd.SalesInvoice, SUM(IFNULL(cbd.AmountInvoice,0)) AS PaidAmount 
                        FROM acccashbankdetail cbd 
                        WHERE cbd.SalesInvoice IN (".$strOid.") 
                        AND cbd.GCRecord IS NULL GROUP BY cbd.SalesInvoice
                    ) cbd ON cbd.SalesInvoice = sinv.Oid
                    SET sinv.PaidAmount = IFNULL(cbd.PaidAmount,0)
                    WHERE sinv.Oid IN (".$strOid.")";
                if ($strOid != '') DB::Update($query);
            });
            
            return response()->json(
                $cashbank, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    private function generateRole(SalesInvoice $data, $role = null, $action = null) {
        if (!$role) $role = $this->roleService->list('SalesInvoice');
        if (!$action) $action = $this->roleService->action('SalesInvoice');

        return [
            'IsRead' => $role->IsRead,
            'IsAdd' => $role->IsAdd,
            'IsEdit' => $this->roleService->isAllowDelete($data->StatusObj, $role->IsEdit),
            'IsDelete' => 0, //$this->roleService->isAllowDelete($row->StatusObj, $role->IsDelete),
            'Cancel' => $this->roleService->isAllowCancel($data->StatusObj, $action->Cancel),
            'Entry' => $this->roleService->isAllowEntry($data->StatusObj, $action->Entry),
            'Post' => $this->roleService->isAllowPost($data->StatusObj, $action->Posted),
            'ViewJournal' => $this->roleService->isPosted($data->StatusObj, 1),
            'ViewStock' => $this->roleService->isPosted($data->StatusObj, 1),
            'Print' => $this->roleService->isPosted($data->StatusObj, 1),
        ];
    }
}
            