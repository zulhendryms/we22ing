<?php

namespace App\AdminApi\Production\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Production\Entities\ProductionQuestionnaire;
use App\Core\Production\Entities\ProductionQuestionnaireDetail;
use App\Core\Production\Entities\ProductionQuestionnaireProcess;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Services\HttpService;

class ProductionQuestionnaireController extends Controller
{
    private $httpService;
    protected $roleService;
    public function __construct(RoleModuleService $roleService, HttpService $httpService)
    {
        $this->roleService = $roleService;
        $this->httpService = $httpService;
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
    }

    public function showProcess(Request $request)
    {
        try {
            $data = DB::select("SELECT p.Oid 
                FROM prdquestionnaire p 
                LEFT OUTER JOIN prdquestionnaireprocess pp ON pp.ProductionQuestionnaire = p.Oid
                WHERE pp.ProductionProcess='{$request->input('Process')}'
                GROUP BY p.Oid");
            if (!$data) return null;
            return $this->showSub($data[0]->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function config(Request $request)
    {
        $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=ProductionQuestionnaire');

        return $fields;
    }

    public function list(Request $request)
    {
        $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=ProductionQuestionnaire');
        $data = DB::table('prdquestionnaire as data') //jointable

        ;
        $data = serverSideQueryJSon($data, $fields, $request, 'Name');
        $role = $this->roleService->list('ProductionQuestionnaire'); //rolepermission
        foreach ($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }


    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = ProductionQuestionnaire::whereNull('GCRecord');

            $data = $data->orderBy('Oid')->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    private function showSub($Oid)
    {
        $data = ProductionQuestionnaire::with('Details', 'Processes')->findOrFail($Oid);

        if (!$data) return null;
        foreach ($data->Processes as $row) $row->ProductionProcessName = $row->ProductionProcessObj ? $row->ProductionProcessObj->Name : null;
        return $data;
    }

    public function show(ProductionQuestionnaire $data)
    {
        try {
            return $this->showSub($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));


        try {
            if (!$Oid) $data = new ProductionQuestionnaire();
            else $data = ProductionQuestionnaire::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $disabled = array_merge(disabledFieldsForEdit(), ['Details', 'Processes']);;
                $data = serverSideSave($data, $request, $disabled);

                $data->save();



                if (isset($request->Details)) {
                    $disabled = disabledFieldsForEdit();

                    serverSideDeleteDetail($data->Details, $request->Details);
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) $detail = ProductionQuestionnaireDetail::findOrFail($row->Oid);
                        else $detail = new ProductionQuestionnaireDetail();
                        $detail->ProductionQuestionnaire = $data->Oid;
                        $detail = serverSideSave($detail, $row, $disabled);
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->Processes)) {
                    $disabled = array_merge(disabledFieldsForEdit(), ['ProductionProcessName']);;

                    serverSideDeleteDetail($data->Processes, $request->Processes);
                    foreach ($request->Processes as $row) {
                        if (isset($row->Oid)) $detail = ProductionQuestionnaireProcess::findOrFail($row->Oid);
                        else $detail = new ProductionQuestionnaireProcess();
                        $detail->ProductionQuestionnaire = $data->Oid;
                        $detail = serverSideSave($detail, $row, $disabled);
                        $detail->save();
                    }
                    $data->load('Processes');
                    $data->fresh();
                }

                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('ProductionQuestionnaire'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Role = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(ProductionQuestionnaire $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
