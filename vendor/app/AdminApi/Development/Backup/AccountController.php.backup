<?php
//test
namespace App\AdminApi\Accounting\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Accounting\Entities\Account;
use App\Core\Accounting\Resources\AccountResource;
use App\Core\Accounting\Resources\AccountCollection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Services\HttpService;
use Validator;

class AccountController extends Controller
{
    private $httpService; 
    protected $roleService;
    public function __construct(RoleModuleService $roleService,HttpService $httpService)
    {
        $this->httpService = $httpService;
        $this->roleService = $roleService;
        $this->httpService->baseUrl('http://ezbpostest.ezbooking.co:888')->json();
    }

    public function config(Request $request) {
        $fields = $this->httpService->get('/portal/api/development/table/vuemaster?code=Account');
        foreach ($fields as &$row) { //combosource
            if ($row->headerName == 'AccountGroup') $row->source = comboSelect('accaccountgroup');
            elseif ($row->headerName == 'Currency') $row->source = comboSelect('mstcurrency');
            elseif ($row->headerName == 'Bank') $row->source = comboselect('mstbank');
            elseif ($row->headerName == 'AccountType') $row->source = comboSelect('sysaccounttype');
        }
        return $fields;
    }
    public function list(Request $request) {
        $fields = $this->httpService->get('/portal/api/development/table/vuemaster?code=Account');
        $data = DB::table('accaccount as data') //jointable
        ->leftJoin('accaccountgroup AS AccountGroup', 'AccountGroup.Oid', '=', 'data.AccountGroup')
        ->leftJoin('sysaccounttype AS AccountType', 'AccountType.Oid', '=', 'data.AccountType')
        ->leftJoin('mstbank AS Bank', 'Bank.Oid', '=', 'data.Bank')
        ->leftJoin('mstcurrency AS Currency', 'Currency.Oid', '=', 'data.Currency')
            ;
        $data = serverSideQueryJSon($data, $fields, $request);
        $role = $this->roleService->list('Account'); //rolepermission
        foreach($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }

    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = Account::whereNull('GCRecord');
            if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            if ($request->has('accountgroup')) $data->where('AccountGroup', $request->input('accountgroup'));
            if ($request->has('accounttype')) $data->where('AccountType', $request->input('accounttype'));
            if ($request->has('currency')) $data->where('Currency', $request->input('currency'));
            if (strtolower($request->input('form')) == 'cashbank') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['CASH','BANK']);
                });
            if (strtolower($request->input('form')) == 'purchaseadditional' || strtolower($request->input('form')) == 'salesdiscount') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['EX','EQ','OEX','INV','OP','FA','OA','COS','PWIP']);
                });
            if (strtolower($request->input('form')) == 'purchasediscount' || strtolower($request->input('form')) == 'salesadditional') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['INC','OI','EQ']);
                });
            if (strtolower($request->input('form')) == 'purchaseprepaid') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['PDP']);
                });
            if (strtolower($request->input('form')) == 'salesinvoice') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['AR']);
                });
            if (strtolower($request->input('form')) == 'purchaseinvoice') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['AP']);
                });
            if (strtolower($request->input('form')) == 'salesprepaid') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['SDP']);
                });
            if (strtolower($request->input('form')) == 'expense') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['EX','EQ','OEX','AR','FA','OA','OL']);
                });
            if (strtolower($request->input('form')) == 'income') 
                $data->whereHas('AccountTypeObj', function ($query) {
                    $query->whereIn('Code', ['AP','INC','OI','EQ','OP','SWIP','OA','OL']);
                });
            if ($type == 'list') $data->with(['AccountGroupObj','AccountTypeObj','CurrencyObj']);
            if ($type == 'combo') {
                logger(1);
                $data->orderBy('Name');
            } else {
                logger($type);
                $data->orderBy('Code');
            }
            $data = $data->get();

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function autocomplete(Request $request)
    {
        $type = $request->input('type') ?: 'combo';
        $term = $request->term;
        $data = Account::whereRaw("(Name LIKE '%{$term}%' OR Code LIKE '%{$term}%')");
        if (strtolower($request->input('form')) == 'cashbank') 
        $data->whereHas('AccountTypeObj', function ($query) {
            $query->whereIn('Code', ['CASH','BANK']);
        });
        if (strtolower($request->input('form')) == 'purchaseadditional' || strtolower($request->input('form')) == 'salesdiscount') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['EX','EQ','OEX','INV','OP','FA','OA','COS','PWIP']);
            });
        if (strtolower($request->input('form')) == 'purchasediscount' || strtolower($request->input('form')) == 'salesadditional') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['INC','OI','EQ']);
            });
        if (strtolower($request->input('form')) == 'purchaseprepaid') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['PDP']);
            });
        if (strtolower($request->input('form')) == 'salesinvoice') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['AR']);
            });
        if (strtolower($request->input('form')) == 'purchaseinvoice') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['AP']);
            });
        if (strtolower($request->input('form')) == 'salesprepaid') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['SDP']);
            });
        if (strtolower($request->input('form')) == 'expense') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['EX','EQ','OEX','AR','FA','OA','OL']);
            });
        if (strtolower($request->input('form')) == 'income') 
            $data->whereHas('AccountTypeObj', function ($query) {
                $query->whereIn('Code', ['AP','INC','OI','EQ','OP','SWIP','OA','OL']);
            });
        $data = $data->orderBy('Name') ->take(10)->get();
       
            return $data;
    }
    
    public function show(Account $data)
    {
        try {            
            return (new AccountResource($data))->type('detail');
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Code.required'=>__('_.Code').__('error.required'),
            'Code.max'=>__('_.Code').__('error.max'),
            'Name.required'=>__('_.Name').__('error.required'),
            'Name.max'=>__('_.Name').__('error.max'),
            'AccountGroup.required'=>__('_.AccountGroup').__('error.required'),
            'AccountGroup.exists'=>__('_.AccountGroup').__('error.exists'),
            'AccountType.required'=>__('_.AccountType').__('error.required'),
            'AccountType.exists'=>__('_.AccountType').__('error.exists'),
            'Currency.required'=>__('_.Currency').__('error.required'),
            'Currency.exists'=>__('_.Currency').__('error.exists'),
            'Bank.required'=>__('_.Bank').__('error.required'),
            'Bank.exists'=>__('_.Bank').__('error.exists'),
        );
        $rules = array(
            'Code' => 'required|max:255',
            'Name' => 'required|max:255',
            'AccountGroup' => 'required|exists:accaccountgroup,Oid',
            'AccountType' => 'required|exists:sysaccounttype,Oid',
            'Currency' => 'required|exists:mstcurrency,Oid',
            'Bank' => 'required|exists:mstbank,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            if (!$Oid) $data = new Account();
            else $data = Account::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                if ($request->Code == '<<Auto>>') $request->Code = now()->format('ymdHis').'-'.str_random(3);
                $disabled = disabledFieldsForEdit();
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save();
            });
            $role = $this->roleService->list('Account'); //rolepermission
            $data->AccountGroupName = $data->AccountGroupObj ? $data->AccountGroupObj->Name : null;
            $data->AccountTypeName = $data->AccountTypeObj ? $data->AccountTypeObj->Name : null;
            $data->AccountSectionName = $data->AccountGroupObj ? ($data->AccountGroupObj->AccountSectionObj ? $data->AccountGroupObj->AccountSectionObj->Name : null) : null;
            $data->Role = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data, Response::HTTP_CREATED
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(Account $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
       
    }
}
