<?php

namespace App\AdminApi\Master\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\BusinessPartner;
use App\Core\Master\Resources\BusinessPartnerResource;
use App\Core\Master\Resources\BusinessPartnerCollection;
use App\Core\Master\Entities\BusinessPartnerContact;
use App\Core\Master\Entities\BusinessPartnerGroup;
use App\Core\Master\Entities\BusinessPartnerAccountGroup;
use App\Core\Travel\Entities\TravelTransportDriver;
use App\Core\Ferry\Entities\BusinessPartnerPort;
use App\Core\Internal\Entities\BusinessPartnerRole;
use App\Core\Accounting\Entities\Journal;
use App\Core\Accounting\Resources\JournalCollection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use Validator;

use Maatwebsite\Excel\Excel;
use App\AdminApi\Master\Services\CustomerExcelImport;
use App\AdminApi\Master\Services\SupplierExcelImport;
use App\AdminApi\Master\Services\BusinessPartnerExcelImport;
use App\Core\Security\Services\RoleModuleService;

class BusinessPartnerController extends Controller
{
    protected $excelService;
    protected $roleService;

    public function __construct(Excel $excelService,
    RoleModuleService $roleService  )
    {
        $this->excelService = $excelService;
        $this->roleService = $roleService;
    }
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Code');
        $fields[] = serverSideConfigField('Name');
        $fields[] = serverSideConfigField('IsActive');
        $fields[] = ['w'=> 0,   'f'=>'bpg.Name',        'n'=>'BusinessPartnerGroup'];
        $fields[] = ['w'=> 0,   'f'=>'bpag.Name',       'n'=>'BusinessPartnerAccountGroup'];
        $fields[] = ['w'=> 0,   'f'=>'cit.Name',        'n'=>'City'];
        $fields[] = ['w'=> 0,   'f'=>'c.Code',          'n'=>'SalesCurrency'];
        $fields[] = ['w'=> 0,   'f'=>'r.Name',          'n'=>'BusinessPartnerRole'];
        $fields[] = ['w'=> 0,   'f'=>'data.Email',      'n'=>'Email'];
        $fields[] = ['w'=> 0,   'f'=>'data.PhoneNumber','n'=>'Phone'];
        $fields[] = ['w'=> 0,   'f'=>'data.APIType',    'n'=>'API'];
        return $fields;
    }

    public function config(Request $request) {
        return serverSideFields($this->fields());
    }
    public function list(Request $request) {
        $user = Auth::user();
        $fields = $this->fields();
        $roletype = '';
        $data = DB::table('mstbusinesspartner as data')
            ->leftJoin('mstbusinesspartnergroup AS bpg', 'bpg.Oid', '=', 'data.BusinessPartnerGroup')
            ->leftJoin('mstbusinesspartneraccountgroup AS bpag', 'bpag.Oid', '=', 'data.BusinessPartnerGroup')
            ->leftJoin('mstcity AS cit', 'cit.Oid', '=', 'data.City')
            ->leftJoin('syscountry AS cou', 'cou.Oid', '=', 'cit.Country')
            ->leftJoin('mstcurrency AS c', 'c.Oid', '=', 'data.SalesCurrency')
            ->leftJoin('sysbusinesspartnerrole AS r', 'r.Oid', '=', 'bpg.BusinessPartnerRole');
        if ($user->BusinessPartner) $data = $data->where('Oid', $user->BusinessPartner);
        if ($request->has('company')) $data = $data->whereRaw('data.GCRecord IS NULL');
        else $data = $data->where('data.Oid','!=',$user->CompanyObj->BusinessPartner);
        if ($request->has('businesspartnerrole')) {
            $data = $data->where('bpg.BusinessPartnerRole', $request->input('businesspartnerrole'));
            $bprole = BusinessPartnerRole::where('Oid',$request->input('businesspartnerrole'))->first()->Code;
            switch ($bprole) {
                case 'Customer':
                    $roletype = 'Customer';
                    break;
                case 'Supplier':
                    $roletype = 'Supplier';
                    break;
            }
        }
        $data = serverSideQuery($data, $fields, $request);
        if($roletype) $role = $this->roleService->list($roletype); //rolepermission
        else $role = $this->roleService->list('Customer'); //rolepermission
        // if ($request->has('businesspartnerrole')) {
        //     $itemtype = ItemType::where('Code',$request->input('itemtypecode'))->first();
        //     $data = $data->whereHas('ItemGroupObj', function ($query) use ($itemtype) {
        //         $query->where('ItemType', $itemtype->Oid);
        //     });
        // }
        // foreach($data as $row) $row->Role = [
        //     'IsRead' => 1,
        //     'IsAdd' => 1,
        //     'IsEdit' => 1,
        //     'IsDelete' => 1,
        // ];
        foreach($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }

    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = BusinessPartner::with(['BusinessPartnerAccountGroupObj','BusinessPartnerGroupObj.BusinessPartnerRoleObj']);
            if ($user->BusinessPartner) $data = $data->where('Oid', $user->BusinessPartner);
            if ($request->has('company')) $data = $data->whereNull('GCRecord');
            else $data = $data->where('Oid','!=',$user->CompanyObj->BusinessPartner);

            //FILTERING UNTUK PARAM OID
            if ($request->has('businesspartnergroup')) $data->where('BusinessPartnerGroup', $request->input('businesspartnergroup'));
            if ($request->has('businesspartneraccountgroup')) $data->where('BusinessPartnerAccountGroup', $request->input('businesspartneraccountgroup'));
            if ($request->has('city')) $data->where('City', $request->input('city'));
            if ($request->has('purchasecurrency')) $data->where('PurchaseCurrency', $request->input('purchasecurrency'));
            if ($request->has('salescurrency')) $data->where('SalesCurrency', $request->input('salescurrency'));
            if ($request->has('businesspartnerrole')) {
                $bprole = $request->input('businesspartnerrole');
                $data->whereHas('BusinessPartnerGroupObj', function ($query) use ($bprole) {
                    $query->where('BusinessPartnerRole', $bprole);
                });
            }

            if ($type != 'combo') $data->with(['BusinessPartnerAccountGroupObj','BusinessPartnerGroupObj','SalesCurrencyObj','CityObj']);
            $data = $data->orderBy('Name')->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        } 
    }
    
    public function show($data)
    {
        try {         
            $user = Auth::user();        
            $data = BusinessPartner::with(['Contacts','TransportDrivers','Ports'])->with([
                'BusinessPartnerGroupObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'CityObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'AgentCurrencyObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'BusinessPartnerAccountGroupObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'PurchaseCurrencyObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'SalesCurrencyObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'PurchaseTaxObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'PurchaseTermObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'SalesTaxObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
                'SalesTermObj' => function ($query) {$query->addSelect('Oid', 'Code','Name');},
            ])->where('Oid','!=',$user->CompanyObj->BusinessPartner)->findOrFail($data);
            return $data;
            // return (new BusinessPartnerResource($data))->type('detail');
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function savetoken(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Name.required'=>__('_.Name').__('error.required'),
            'Name.max'=>__('_.Name').__('error.max'),
            'BusinessPartnerGroup.required'=>__('_.BusinessPartnerGroup').__('error.required'),
            'BusinessPartnerGroup.exists'=>__('_.BusinessPartnerGroup').__('error.exists'),
        );
        $rules = array(
            'Name' => 'required|max:255',
            'BusinessPartnerGroup' => 'required|exists:mstbusinesspartnergroup,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            if (!$Oid) $data = new BusinessPartner();
            else $data = BusinessPartner::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $company = Auth::user()->CompanyObj;
                $bpg = BusinessPartnerGroup::findOrFail($request->BusinessPartnerGroup);
                if (!isset($request->City)) $request->City = $company->City ?: null;
                if (!isset($request->AgentCurrency)) $request->AgentCurrency = $company->Currency;
                if (!isset($request->BusinessPartnerAccountGroup)) $request->BusinessPartnerAccountGroup = $bpg->BusinessPartnerAccountGroup ?: null;
                $bpag = BusinessPartnerAccountGroup::findOrFail($request->BusinessPartnerAccountGroup);
                if (!isset($request->IsPurchase)) $request->IsPurchase = $bpag->IsPurchase;
                if (!isset($request->IsSales)) $request->IsSales = $bpag->IsSales;
                if (!isset($request->PurchaseCurrency)) $request->PurchaseCurrency = $bpag->PurchaseCurrency;
                if (!isset($request->SalesCurrency)) $request->SalesCurrency = $bpag->SalesCurrency;
                if (!isset($request->PurchaseTax)) $request->PurchaseTax = $bpag->PurchaseTax;
                if (!isset($request->PurchaseTerm)) $request->PurchaseTerm = $bpag->PurchaseTerm;
                if (!isset($request->SalesTax)) $request->SalesTax = $bpag->SalesTax;
                if (!isset($request->SalesTerm)) $request->SalesTerm = $bpag->SalesTerm;
                if (!isset($request->RedeemCode)) $request->RedeemCode = mt_rand(100000,999999);
                // $data->Company = Auth::user()->Company;
                $data->Code = $request->Code == '<<Auto>>' ? now()->format('ymdHis').'-'.str_random(3) : $request->Code;
                $data->Name = $request->Name;
                $data->BusinessPartnerGroup = $request->BusinessPartnerGroup;
                $data->City = $request->City;
                $data->AgentCurrency = $request->AgentCurrency;
                $data->BusinessPartnerAccountGroup = $request->BusinessPartnerAccountGroup;
                $data->IsPurchase = $request->IsPurchase;
                $data->IsSales = $request->IsSales;
                $data->PurchaseCurrency = $request->PurchaseCurrency;
                $data->SalesCurrency = $request->SalesCurrency;
                $data->PurchaseTax = $request->PurchaseTax;
                $data->PurchaseTerm = $request->PurchaseTerm;
                $data->SalesTax = $request->SalesTax;
                $data->SalesTerm = $request->SalesTerm;
                $data->RedeemCode = $request->RedeemCode;
                $data->IsActive = $request->IsActive;
                $data->save();
            });

            $data = (new BusinessPartnerResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {      
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        // $dataArray = object_to_array($request);
        
        // $messsages = array(
        //     'Code.required'=>__('_.Code').__('error.required'),
        //     'Code.max'=>__('_.Code').__('error.max'),
        //     'Name.required'=>__('_.Name').__('error.required'),
        //     'Name.max'=>__('_.Name').__('error.max'),
        //     'NameZH.required'=>__('_.NameZH').__('error.required'),
        //     'NameZH.max'=>__('_.NameZH').__('error.max'),
        //     'BusinessPartnerGroup.required'=>__('_.BusinessPartnerGroup').__('error.required'),
        //     'BusinessPartnerGroup.exists'=>__('_.BusinessPartnerGroup').__('error.exists'),
        //     'BusinessPartnerAccountGroup.required'=>__('_.BusinessPartnerAccountGroup').__('error.required'),
        //     'BusinessPartnerAccountGroup.exists'=>__('_.BusinessPartnerAccountGroup').__('error.exists'),
        // );
        // $rules = array(
        //     'Code' => 'required|max:255',
        //     'Name' => 'required|max:255',
        //     'NameZH' => 'required|max:255',
        //     'BusinessPartnerGroup' => 'required|exists:mstbusinesspartnergroup,Oid',
        //     'BusinessPartnerAccountGroup' => 'required|exists:mstbusinesspartneraccountgroup,Oid',
        // );

        // $validator = Validator::make($dataArray, $rules,$messsages);

        // if ($validator->fails()) {
        //     return response()->json(
        //         $validator->messages(),
        //         Response::HTTP_UNPROCESSABLE_ENTITY
        //     );
        // }

        try {            
            DB::transaction(function () use ($request, $Oid, &$data) {
                if (!$Oid) $data = new BusinessPartner();
                else $data = BusinessPartner::findOrFail($Oid);
                $disabled = array_merge(disabledFieldsForEdit(), ['Contacts','TransportDrivers','Ports']);
                if (!$Oid) {
                    $company = Auth::user()->CompanyObj;
                    $bpg = BusinessPartnerGroup::findOrFail($request->BusinessPartnerGroup);
                    if ($request->Code == '<<Auto>>') $request->Code = now()->format('ymdHis').'-'.str_random(3);
                    if (!isset($request->NameZH)) $request->NameZH = $request->Name ?: null;
                    if (!isset($request->Initial)) $request->Initial = $request->Name ?: null;
                    if (!isset($request->Slug)) $request->Slug = $request->Name ?: null;
                    if (!isset($request->City)) $request->City = $company->City ?: null;
                    if (!isset($request->IsActive)) $request->IsActive = 1;
                    // if (!isset($request->Description)) $request->DescriptionZH = $request->Description ?: null;
                    if (!isset($request->AgentCurrency)) $request->AgentCurrency = $company->Currency;
                    if (!isset($request->BusinessPartnerAccountGroup)) $request->BusinessPartnerAccountGroup = $bpg->BusinessPartnerAccountGroup ?: null;
                    $bpag = BusinessPartnerAccountGroup::findOrFail($request->BusinessPartnerAccountGroup);
                    if (!isset($request->IsPurchase)) $request->IsPurchase = $bpag->IsPurchase;
                    if (!isset($request->IsSales)) $request->IsSales = $bpag->IsSales;
                    if (!isset($request->PurchaseCurrency)) $request->PurchaseCurrency = $bpag->PurchaseCurrency;
                    if (!isset($request->SalesCurrency)) $request->SalesCurrency = $bpag->SalesCurrency;
                    if (!isset($request->PurchaseTax)) $request->PurchaseTax = $bpag->PurchaseTax;
                    if (!isset($request->PurchaseTerm)) $request->PurchaseTerm = $bpag->PurchaseTerm;
                    if (!isset($request->SalesTax)) $request->SalesTax = $bpag->SalesTax;
                    if (!isset($request->SalesTerm)) $request->SalesTerm = $bpag->SalesTerm;
                    if (!isset($request->RedeemCode)) $request->RedeemCode = mt_rand(100000,999999);
                }
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save(); 

                $data->BusinessPartnerRoleName = $data->BusinessPartnerGroupObj->BusinessPartnerRoleObj->Name;
                $data->CityName = $data->CityObj->Name;

                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            $data = (new BusinessPartnerResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listContact(Request $request)
    {        
        try {            
            $businesspartner = $request->input('businesspartner');
            $data = BusinessPartnerContact::where('BusinessPartner',$businesspartner);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function listContactDetail($Oid = null)
    {        
        try {            
            $data = BusinessPartnerContact::findOrFail($Oid);
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function saveContact(Request $request, $Oid = null)
    {      
        $businesspartner = $request->input('businesspartner');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));

        try { 
            $BusinessPartner = BusinessPartner::where('Oid',$businesspartner )->firstOrFail();
            if (!$Oid) $data = new BusinessPartnerContact();
            else $data = BusinessPartnerContact::findOrFail($Oid);
            DB::transaction(function () use ($request, $BusinessPartner, &$data) {   
                $disabled = disabledFieldsForEdit();
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->BusinessPartner = $BusinessPartner->Oid;
                $data->save();
            });

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listTransportDriver(Request $request)
    {        
        try {            
            $businesspartner = $request->input('businesspartner');
            $data = TravelTransportDriver::where('BusinessPartner',$businesspartner);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function listTransportDriverDetail($Oid = null)
    {        
        try { 
            $data = TravelTransportDriver::findOrFail($Oid);
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function saveTransportDriver(Request $request, $Oid = null)
    {      
        $businesspartner = $request->input('businesspartner');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));

        try { 
            $BusinessPartner = BusinessPartner::where('Oid',$businesspartner )->firstOrFail();
            if (!$Oid) $data = new TravelTransportDriver();
            else $data = TravelTransportDriver::findOrFail($Oid);
            DB::transaction(function () use ($request, $BusinessPartner, &$data) {   
                $disabled = disabledFieldsForEdit();
                if ($request->Code == '<<Auto>>') $request->Code = now()->format('ymdHis').'-'.str_random(3);
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->BusinessPartner = $BusinessPartner->Oid;
                $data->save();
            });

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function listPort(Request $request)
    {        
        try {            
            $businesspartner = $request->input('businesspartner');
            $data = BusinessPartnerPort::where('BusinessPartner',$businesspartner);
            $data = $data->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function listPortDetail($Oid = null)
    {        
        try {            
            $data = BusinessPartnerPort::findOrFail($Oid);
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function savePort(Request $request, $Oid = null)
    {      
        $businesspartner = $request->input('businesspartner');
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));

        try { 
            $BusinessPartner = BusinessPartner::where('Oid',$businesspartner )->firstOrFail();
            if (!$Oid) $data = new BusinessPartnerPort();
            else $data = BusinessPartnerPort::findOrFail($Oid);
            DB::transaction(function () use ($request, $BusinessPartner, &$data) {   
                $disabled = disabledFieldsForEdit();
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->BusinessPartner = $BusinessPartner->Oid;
                $data->save();
            });

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(BusinessPartner $data)
    {
        try {            
            DB::transaction(function () use ($data) {            
                $gcrecord = now()->format('ymdHi');
                $data->GCRecord = $gcrecord;
                $data->Code = substr($data->Code,0,19).' '.now()->format('ymdHi');
                $data->Name = $data->Name.' '.now()->format('ymdHi');
                $data->save();
                // $data->Contacts()->delete();
                // $data->TransportDrivers()->delete();
                // $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deleteContact($Oid = null)
    {
        try {            
            DB::transaction(function () use ($Oid) {
                $data = BusinessPartnerContact::findOrFail($Oid);
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deleteTransportDriver($Oid = null)
    {
        try {            
            DB::transaction(function () use ($Oid) {
                $data = TravelTransportDriver::findOrFail($Oid);
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deletePort($Oid = null)
    {
        try {            
            DB::transaction(function () use ($Oid) {
                $data = BusinessPartnerPort::findOrFail($Oid);
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function inquiry(Request $request)
    {
        try {
            $date = Carbon::parse($request->input('date'));
            $date = $date->modify('first day of this month');
            $lastdate = $date->modify('last day of this month');
            $query = "SELECT bp.Oid, bp.Name, cit.Name AS City, bpg.Name AS BusinessPartnerGroup, 
                IFNULL(startbal.Amount,0) AS Start, IFNULL(currentbal.Amount,0) AS Current, IFNULL(startbal.Amount,0) + IFNULL(currentbal.Amount,0) AS Ending
                FROM mstbusinesspartner bp
                LEFT OUTER JOIN mstcity cit ON bp.City = cit.Oid
                LEFT OUTER JOIN mstbusinesspartnergroup bpg ON bp.BusinessPartnerGroup = bpg.Oid
                LEFT OUTER JOIN (
                    SELECT j.BusinessPartner, SUM(IFNULL(j.DebetBase,0) - IFNULL(j.CreditBase,0)) Amount
                    FROM accjournal j
                    LEFT OUTER JOIN sysjournaltype jt ON j.JournalType = jt.Oid
                    WHERE j.GCRecord IS NULL AND jt.Code != 'Open' AND j.Date < '{$date}'
                    GROUP BY j.BusinessPartner
                ) AS startbal ON bp.Oid = startbal.BusinessPartner
                LEFT OUTER JOIN (
                    SELECT j.BusinessPartner, SUM(IFNULL(j.DebetBase,0) - IFNULL(j.CreditBase,0)) Amount
                    FROM accjournal j
                    LEFT OUTER JOIN sysjournaltype jt ON j.JournalType = jt.Oid
                    WHERE j.GCRecord IS NULL AND jt.Code != 'Open' AND j.Date >= '{$date}' AND j.Date <= '{$lastdate}' 
                    GROUP BY j.BusinessPartner
                ) AS currentbal ON bp.Oid = currentbal.BusinessPartner";
            return DB::select($query);
            
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        } 
    }

    public function inquiryjournal(Request $request)
    {
        try {            
            $data = Journal::with(['CurrencyObj','BusinessPartnerObj','AccountObj']);
            if ($request->has('date')) $data->where('Date', $request->input('date'));
            if ($request->has('businesspartner')) $data->where('BusinessPartner', $request->input('businesspartner'));
            $data = $data->get();
            return (new JournalCollection($data))->type('list');
            
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }  
    }

    public function autocomplete(Request $request)
    {
        $type = $request->input('type') ?: 'combo';
        $term = $request->term;
        $user = Auth::user();     

        $data = BusinessPartner::whereNull('GCRecord');
        if ($request->has('company')) $data = $data->whereNull('GCRecord');
        else $data = $data->where('Oid','!=',$user->CompanyObj->BusinessPartner);
        if ($request->has('businesspartnerrole')) {
            $bprole = $request->input('businesspartnerrole');
            $data->whereHas('BusinessPartnerGroupObj', function ($query) use ($bprole) {
                $query->where('BusinessPartnerRole', $bprole);
            });
        }
        $data->where(function($query) use ($term)
        {
            $query->where('Name','LIKE','%'.$term.'%')
            ->orWhere('Code','LIKE','%'.$term.'%');
        });
        if ($user->BusinessPartner) $data = $data->where('Oid', $user->BusinessPartner);
        $data = $data->orderBy('Name')->take(10)->get();
       
        return (new BusinessPartnerCollection($data))->type($type);
    }

    public function importCustomer(Request $request)
    {
        $validator = Validator::make($request->all(), [ 'file' => 'required|mimes:xls,xlsx' ]);

        if ($validator->fails()) return response()->json($validator->messages(), Response::HTTP_UNPROCESSABLE_ENTITY);
        if (!$request->hasFile('file')) return response()->json('No file found', Response::HTTP_UNPROCESSABLE_ENTITY);
        
        $file = $request->file('file');
        $this->excelService->import(new CustomerExcelImport, $file);
        return response()->json(null, Response::HTTP_CREATED);
    }

    public function importSampleCustomer(Request $request)
    {
        $url = url('importsamples/import_customer.xlsx');
        return response()->json($url, Response::HTTP_OK);
    }

    public function importSupplier(Request $request)
    {
        $validator = Validator::make($request->all(), [ 'file' => 'required|mimes:xls,xlsx' ]);

        if ($validator->fails()) return response()->json($validator->messages(), Response::HTTP_UNPROCESSABLE_ENTITY);
        if (!$request->hasFile('file')) return response()->json('No file found', Response::HTTP_UNPROCESSABLE_ENTITY);
        
        $file = $request->file('file');
        $this->excelService->import(new SupplierExcelImport, $file);
        return response()->json(null, Response::HTTP_CREATED);
    }

    public function import(Request $request)
    {
        $validator = Validator::make($request->all(), [ 'file' => 'required|mimes:xls,xlsx' ]);

        if ($validator->fails()) return response()->json($validator->messages(), Response::HTTP_UNPROCESSABLE_ENTITY);
        if (!$request->hasFile('file')) return response()->json('No file found', Response::HTTP_UNPROCESSABLE_ENTITY);
        
        $file = $request->file('file');
        $this->excelService->import(new BusinessPartnerExcelImport, $file);
        return response()->json(null, Response::HTTP_CREATED);
    }

    public function importSampleSupplier(Request $request)
    {
        $url = url('importsamples/import_supplier.xlsx');
        return response()->json($url, Response::HTTP_OK);
    }
}
