<?php

namespace App\AdminApi\Pub\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Internal\Entities\Status;
use App\Core\Security\Services\RoleModuleService;
use App\AdminApi\Development\Controllers\ServerCRUDController;
use App\AdminApi\Report\Services\ReportService;
use App\Core\Base\Services\HttpService;

use Barryvdh\DomPDF\Facade as PDF;
use Barryvdh\Snappy\Facades\SnappyPdf;
use Carbon\Carbon;

class PublicReportController extends Controller
{
    protected $reportService;
    private $CRUDController;
    public function __construct()
    {
        $this->CRUDController = new ServerCRUDController();
        $this->reportService = new ReportService();
        $this->httpService = new HttpService();
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
    }

    public function config(Request $request) {
        $return = $this->httpService->get('/portal/api/development/table/phpreport?code=ReportStock');
        // return $return;
        return response()->json(
            $return,
            Response::HTTP_OK
        );
    }

    private function tableJoin($data, $tableSource, $tableTarget, $fieldName) {
        $tableAs = $tableSource.'_'.$fieldName;
        logger('LEFT OUTER JOIN '.$tableTarget.' AS '.$tableAs.' = '.$tableSource.'.'.$fieldName);
        $data = $data->leftJoin(
                $tableTarget." AS ".$tableAs,
                $tableAs.".Oid", "=", 
                $tableSource.".".$fieldName);
        return $data;
    }

    private function tableJoinDetail($data, $tableTarget, $fieldName) {
        logger('LEFT OUTER JOIN '.$tableTarget.' AS d = p.'.$fieldName);
        $data = $data->leftJoin(
                $tableTarget." AS d",
                "p.Oid", "=", 
                "d.".$fieldName);
        return $data;
    }

    public function reporting(Request $request) {
        $dataReport = $this->CRUDController->functionGetReport($request->input('code'))[0];
        $dataReport->User = Auth::user();
        $tableData = $this->CRUDController->getDataJSON($dataReport->TableParent, 'all');
        $data = DB::table($dataReport->TableParent.' as p');
        
        // join parent table combo
        $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($dataReport->TableParent, 'list');
        $joinTable = null;
        foreach ($fieldCombos as $combo) {
            $data = $this->tableJoin($data, 'p', $combo->TableName, $combo->FieldName);
            $joinTable = $joinTable.($joinTable ? ",'" : "'").$combo->TableName."'";
        }
        // join parent table combo lvl 2
        $tableJoins = $this->CRUDController->functionGetReportTableJoin($joinTable);
        foreach ($tableJoins as $tableJoin) {
            $tmp = json_decode($tableJoin->ReportJoinTable);
            foreach ($tmp as $row) $data = $this->tableJoin($data, 'p_'.$tableJoin->Name, $row->table, $row->field);
        }
        
        // join detail table combo
        if ($dataReport->TableDetail) {
            $data = $this->tableJoinDetail($data, $dataReport->TableDetail, $tableData->Name);
            $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($dataReport->TableDetail, 'list');
            $joinTable = null;
            foreach ($fieldCombos as $combo) {
                if ($combo->TableName == 'company') continue;
                $data = $this->tableJoin($data, 'd', $combo->TableName, $combo->FieldName);
                $joinTable = $joinTable.($joinTable ? ",'" : "'").$combo->TableName."'";
            }
    
            // join detail table combo lvl2
            $tableJoins = $this->CRUDController->functionGetReportTableJoin($joinTable);
            foreach ($tableJoins as $tableJoin) {
                $tmp = json_decode($tableJoin->ReportJoinTable);
                foreach ($tmp as $row) $data = $this->tableJoin($data, 'd_'.$tableJoin->Name, $row->table, $row->field);
            }    
        }

        //select
        $dataReport->SelectFields = json_decode($dataReport->Fields);
        $selectFields = [];
        foreach ($dataReport->SelectFields as $field) $selectFields[] = DB::raw($field->Field." AS ".$field->Alias);

        //criteria
        $dataReport->Filter=null;
        if ($request->has('DateFrom')) {            
            $datefrom = Carbon::parse($request->input('DateFrom'));
            $dataReport->Filter = $dataReport->Filter."Date From = '".strtoupper($datefrom->format('Y-m-d'))."'; "; 
            $data = $data->whereRaw("DATE_FORMAT(p.Date, '%Y-%m-%d') >= '".$datefrom->format('Y-m-d')."'");
        }
        if ($request->has('DateTo')) {            
            $dateto = Carbon::parse($request->input('DateTo'));
            $dataReport->Filter = $dataReport->Filter."Date Until = '".strtoupper($dateto->format('Y-m-d'))."'; "; 
            $data = $data->whereRaw("DATE_FORMAT(p.Date, '%Y-%m-%d') <= '".$dateto->format('Y-m-d')."'");
        }
        foreach ($dataReport->SelectFields as $field) {
            if (!isset($field->Filter)) continue;
            if (!$field->Filter) continue;
            if (!$request->has($field->Alias)) continue;
            $dataReport->Filter = $dataReport->Filter.$field->Name." = '".$request->input($field->Alias)."'; "; 
            $data = $data->whereRaw($field->Field."='".$request->input($field->Alias)."'");
        }

        $data = $data->addSelect($selectFields)->limit(100)->get();
        
        $pdf = SnappyPdf::loadView('AdminApi\Pub::pdf.report1', compact('data', 'dataReport'));
        // $pdf = SnappyPdf::loadView('AdminApi\Report::pdf.report1', compact('data', 'user', 'reportname','filter', 'reporttitle'));

        $headerHtml = view('AdminApi\Pub::pdf.header', compact('dataReport'))->render();
        $footerHtml = view('AdminApi\Pub::pdf.footer', compact('dataReport'))->render();

        $pdf
            ->setOption('header-html', $headerHtml)
            ->setOption('footer-html', $footerHtml)
            ->setOption('footer-right', "Page [page] of [toPage]")
            ->setOption('footer-font-size', 5)
            ->setOption('footer-line', true)
            ->setOption('margin-right', 10)
            ->setOption('margin-bottom', 10);

        $reportFile = $this->reportService->create('Temporary_Report_Generated_', $pdf);
        if ($request->input('action')=='download') return response()->download($reportFile->getFilePath())->deleteFileAfterSend(true);
        return response()->json(
            route('AdminApi\Report::view',
            ['reportName' => $reportFile->getFileName()]), Response::HTTP_OK
        );
    }

    public function reportFields($table) {
        $result = [];
        
        $fields = $this->CRUDController->functionGetFieldsFromTable($table);
        foreach ($fields as $field) {
            if (!$field->IsActive ) continue;
            if ($field->IsImage) continue;
            elseif ($field->APITableCombo) {   
                $result[] = [
                    'Field' => 'p_'.$field->Code.'.Oid',
                    'FieldDisplay' => 'p_'.$field->Code.'.'.$field->TableComboField,
                    'Alias'  => 'p_'.$field->Code,
                    'Name' => $field->Name
                ];
                if ($field->ReportJoinTable) {
                    $tmp = json_decode($field->ReportJoinTable);
                    foreach ($tmp as $row) {
                        $result[] = [
                            'Field' => 'p_'.$field->Code.'_'.$row->field.'.Oid',
                            'FieldDisplay' => 'p_'.$field->Code.'_'.$row->field.'.'.$field->TableComboField,
                            'Alias'  => 'p_'.$field->Code.'_'.$row->field,
                            'Name' => $field->Name.' '.$row->field
                        ];
                    }
                }
            } else $result[] = [
                    'Field' => 'p.'.$field->Code,
                    'FieldDisplay' => 'p.'.$field->Code,
                    'Alias'  => 'p_'.$field->Code,
                    'Name' => $field->Name
                ];
        }
        return $result;
    }
}
