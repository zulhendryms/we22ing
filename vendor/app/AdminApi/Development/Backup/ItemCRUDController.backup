<?php

namespace App\AdminApi\Master\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\Item;
use App\Core\Master\Entities\ItemGroup;
use App\Core\Master\Entities\ItemAccountGroup;
use App\Core\Master\Entities\ItemPackage;
use App\Core\Master\Entities\BusinessPartner;
use App\Core\Internal\Entities\ItemType;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Services\HttpService;
use App\Core\Internal\Services\FileService;
use App\Core\Internal\Services\FileCloudService;
use App\Core\Master\Entities\ItemGroupUser;
use App\Core\Internal\Services\AutoNumberService;
use QrCode;

class ItemCRUDController extends Controller
{
    protected $fileService;
    protected $fileCloudService;
    private $httpService;
    protected $roleService;
    private $autoNumberService;
    public function __construct(
        FileService $fileService, 
        FileCloudService $fileCloudService,
        RoleModuleService $roleService, 
        AutoNumberService $autoNumberService,
        HttpService $httpService
        )
    {
        $this->roleService = $roleService;
        $this->httpService = $httpService;
        $this->fileService = $fileService;
        $this->fileCloudService = $fileCloudService;
        $this->autoNumberService = $autoNumberService;
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
    }

    public function config(Request $request)
    {
        $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=Item');
        foreach ($fields as &$row) { //combosource
            if ($row->headerName  == 'Company') $row->source = comboselect('company');
            elseif ($row->headerName == 'ItemGroup') $row = comboselect('mstitemgroup');
            elseif ($row->headerName == 'ItemUnit') $row->source = comboselect('mstitemunit');
            elseif ($row->headerName == 'ItemAccountGroup') $row->source = comboselect('mstitemaccountgroup');
            elseif ($row->headerName == 'PurchaseCurrency') $row->source = comboselect('mstcurrency');
            elseif ($row->headerName == 'SalesCurrency') $row->source = comboselect('mstcurrency');
            elseif ($row->headerName == 'City') $row->source = comboselect('mstcity');
            elseif ($row->headerName == 'ItemType') $row->source = comboselect('sysitemtype');
        };
        return $fields;
    }

    public function list(Request $request)
    {
        $user = Auth::user();
        $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=Item');
        $data = DB::table('mstitem as data') //jointable
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->leftJoin('mstitem AS Parent', 'Parent.Oid', '=', 'data.Parent')
            ->leftJoin('mstitemgroup AS ItemGroup', 'ItemGroup.Oid', '=', 'data.ItemGroup')
            ->leftJoin('mstitemunit AS ItemUnit', 'ItemUnit.Oid', '=', 'data.ItemUnit')
            ->leftJoin('mstitemaccountgroup AS ItemAccountGroup', 'ItemAccountGroup.Oid', '=', 'data.ItemAccountGroup')
            ->leftJoin('mstcurrency AS PurchaseCurrency', 'PurchaseCurrency.Oid', '=', 'data.PurchaseCurrency')
            ->leftJoin('mstcurrency AS SalesCurrency', 'SalesCurrency.Oid', '=', 'data.SalesCurrency')
            ->leftJoin('mstcity AS City', 'City.Oid', '=', 'data.City')
            ->leftJoin('mstbusinesspartner AS PurchaseBusinessPartner', 'PurchaseBusinessPartner.Oid', '=', 'data.PurchaseBusinessPartner')
            ->leftJoin('sysitemtype AS ItemType', 'ItemType.Oid', '=', 'data.ItemType');
        if ($request->has('itemtype')) $data = $data->where('ItemGroup.ItemType', $request->input('itemtype'));

        $itemGroupUser = ItemGroupUser::select('ItemGroup')->where('User', $user->Oid)->pluck('ItemGroup');
        // $itemGroupUser = pluckComma($itemGroupUser, 'ItemGroup');
        // $itemGroupUser = ItemGroupUser::select('ItemGroup')->where('User', $user->Oid)->get();
        // dd($itemGroupUser);
        if ($itemGroupUser->count() > 0) $data->whereIn('data.ItemGroup', $itemGroupUser);

        $data = serverSideQueryJSon($data, $fields, $request, 'mstitem', 'Name');
        $role = $this->roleService->list('Item'); //rolepermission
        foreach ($data as $row) {
            $row->Action = $this->action($row);
            $row->Action = $this->roleService->generateActionMaster($role);
        }
        return serverSideReturn($data, $fields);
    }
    public function index(Request $request)
    {
        try {        
            $user = Auth::user();    
            $type = $request->input('type') ?: 'combo';
            $data = Item::with(['PurchaseBusinessPartnerObj','ItemTypeObj','ProductionItemObj'])->whereNull('GCRecord');
            if ($request->has('purchasebusinesspartner')) $data->where('PurchaseBusinessPartner', $request->input('purchasebusinesspartner'));
            if ($request->has('itemgroup')) $data->where('ItemGroup', $request->input('itemgroup'));
            if ($request->has('itemaccountgroup')) $data->where('ItemAccountGroup', $request->input('itemaccountgroup'));
            if ($request->has('city')) $data->where('City', $request->input('city'));
            if ($request->has('purchasecurrency')) $data->where('PurchaseCurrency', $request->input('purchasecurrency'));
            if ($request->has('salescurrency')) $data->where('SalesCurrency', $request->input('salescurrency'));
            if ($request->has('stockupload')) $data->where('APIType', 'AutoStock');
            if ($request->has('ecommerce')) {
                $input = $request->input('ecommerce');
                $data->whereHas('ItemECommerces', function ($query) use ($input) {
                    $query->where('ECommerce', $input)->where('IsActive', 1);
                });
            }
            if ($request->has('itemtypecode')) {
                $itemtype = ItemType::where('Code',$request->input('itemtypecode'))->first();
                $data->whereHas('ItemGroupObj', function ($query) use ($itemtype) {
                    $query->where('ItemType', $itemtype->Oid);
                });
            }
            if ($request->has('itemtype')) {
                $itemtype = $request->input('itemtype');
                $data->whereHas('ItemGroupObj', function ($query) use ($itemtype) {
                    $query->where('ItemType', $itemtype);
                });
            }

            if ($request->has('businesspartnergroup')) {
                $businesspartnergroup = $request->input('businesspartnergroup');
                $data->whereHas('PurchaseBusinessPartnerObj', function ($query) use ($businesspartnergroup) {
                    $query->where('BusinessPartnerGroup', $businesspartnergroup);
                });
            }
            
            if ($request->has('itemcontent')) $data->where('ItemContent', $request->input('itemcontent'));
            if ($type != 'combo') $data->with(['ItemGroupObj','PurchaseBusinessPartnerObj','SalesCurrencyObj']);
            if (!$request->has('parent') && !$request->has('detail')) $data->where('IsDetail',0)->get();
            if ($request->has('parent')) $data->where('IsParent', $request->input('parent'));
            if ($request->has('detail')) $data->where('IsDetail', $request->input('detail') == 1 ? true : false);
            if ($request->has('isstock')) $data->where('IsStock', $request->input('isstock')->whereNull('ItemStockReplacement'));
            if ($request->has('auto_stock')) $data->where('APIType', 'auto_stock');
            if ($request->has('issales')) $data->where('IsSales', $request->input('issales'));
            if ($request->has('ispurchase')) $data->where('IsPurchase', $request->input('ispurchase'));
            if ($request->input('pospriceage') == 1) 
                $data->whereHas('ItemTypeObj', function ($query) {
                    $query->whereIn('Code', ['Travel']);
                });
            if ($request->input('pospriceday') == 1) 
                $data->whereHas('ItemTypeObj', function ($query) {
                    $query->whereIn('Code', ['Hotel','Transport']);
            });
            if ($request->input('poseticketupload') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Travel','Transport','Hotel']);
            });
            if ($request->input('transport') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Transport']);
            });
            if ($request->input('hotel') == 1) {
                $data->whereHas('ItemGroupObj', function ($query) {
                    $itemtype = ItemType::where('Code','hotel')->first();
                    $query->where('ItemType', $itemtype->Oid);
                });
            }
            if ($request->input('product') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Product']);
            });
            if ($request->input('production') == 1)  {
                // $data = $data->where('ItemType','f40443b1-c7e8-11e9-bbdd-d2118390b116');
                $data = $data->whereHas('ItemTypeObj', function ($query) {
                    $query->whereIn('Code', ['Production']);
                });
            }
            if ($request->input('glass') == 1) 
            $data->whereHas('ItemTypeObj', function ($query) {
                $query->whereIn('Code', ['Glass']);
            });
            if ($user->BusinessPartner) $data = $data->where('PurchaseBusinessPartner', $user->BusinessPartner);
            $data = $data->orderBy('Name')->get();
            
            
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    
    public function action($data)
    {
        $url = 'item';
        $actionSync = [
            'name' => 'Synchronize',
            'icon' => 'UnlockIcon',
            'type' => 'confirm',
            'post' => $url.'/sync?item={Oid}',
        ];
        $return = [];
        $return[] = $actionSync;
        return $return;
    }

    private function showSub($Oid)
    {
        $data = Item::with('Packages')->findOrFail($Oid);

        $data->ParentName = $data->ParentObj ? $data->ParentObj->Name : null;
        $data->ItemGroupName = $data->ItemGroupObj ? $data->ItemGroupObj->Name : null;
        $data->ItemUnitName = $data->ItemUnitObj ? $data->ItemUnitObj->Name : null;
        $data->ItemAccountGroupName = $data->ItemAccountGroupObj ? $data->ItemAccountGroupObj->Name : null;
        $data->PurchaseCurrencyName = $data->PurchaseCurrencyObj ? $data->PurchaseCurrencyObj->Name : null;
        $data->SalesCurrencyName = $data->SalesCurrencyObj ? $data->SalesCurrencyObj->Name : null;
        $data->CityName = $data->CityObj ? $data->CityObj->Name : null;
        $data->PurchaseBusinessPartnerName = $data->PurchaseBusinessPartnerObj ? $data->PurchaseBusinessPartnerObj->Name : null;
        $data->ItemTypeName = $data->ItemTypeObj ? $data->ItemTypeObj->Name : null;
        $data->ItemStockReplacementName = $data->ItemStockReplacementObj ? $data->ItemStockReplacementObj->Name : null;
        $data->CompanyName = $data->CompanyObj ? $data->CompanyObj->Code : null;
        $data->Action = $this->action($data);

        foreach ($data->Packages as $row) {

            $row->ItemParentName = $row->ItemParentObj ? $row->ItemParentObj->Name : null;
        }

        return $data;
    }

    public function show(Item $data)
    {
        try {
            return $this->showSub($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        $query = "SELECT RIGHT(Barcode,LENGTH(Barcode)-1) AS lastBarcode FROM mstitem WHERE LENGTH(Barcode) = 7 AND LEFT(Barcode,2)='A0' ORDER BY Barcode DESC LIMIT 1";
        $getBarcode = DB::select($query);
        $query = "SELECT RIGHT(Code,LENGTH(Code)-1) AS lastCode FROM mstitem WHERE LENGTH(Code) = 7 AND LEFT(Code,2)='A0' ORDER BY Code DESC LIMIT 1";
        $getCode = DB::select($query);
        
        if ($getBarcode) $getBarcode = is_numeric($getBarcode[0]->lastBarcode) ? intval($getBarcode[0]->lastBarcode) +1 : 0;
        if ($getCode) $getCode = is_numeric($getCode[0]->lastCode) ? (intval($getCode[0]->lastCode))+1 : 0;
        if($getBarcode){
            $numberBarcode = $getBarcode > $getCode ? $getBarcode : $getCode;
            $replaceNumber = str_replace(",","",$numberBarcode);

            $barcode = $replaceNumber;
            if (!isset($barcode)) $barcode = '';
            if ($barcode == []) $barcode = '';
            $numlength = strlen($barcode ?: '');
            $length = 6 - $numlength;
            $nol = "";
            for($i=1;$i<=$length;$i++)
            {
                $nol .= '0';
            }
            $resultBarcode = 'A'.$nol.$barcode;
        } else {
            $resultBarcode = null;
        }

        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));


        try {
            if (!$Oid) $data = new Item();
            else $data = Item::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data, $resultBarcode) {
                $company = Auth::user()->CompanyObj;
                if (!$data->Oid) {
                    $request->IsUsingPriceMethod = 1;
                    if ($company->IsAutoGenerateBarcode == true) {
                        // $request->Code = $resultBarcode;
                        $request->Barcode = $resultBarcode;
                    }
                    if (!isset($request->ItemType)) $request->ItemType = ItemType::where('Code','Product')->first()->Oid;
                }
                $disabled = array_merge(disabledFieldsForEdit(), ['ParentName', 'ParentObj', 'ItemGroupName', 'ItemGroupObj', 'ItemUnitName', 'ItemUnitObj', 'ItemAccountGroupName', 'ItemAccountGroupObj', 'PurchaseCurrencyName', 'PurchaseCurrencyObj', 'SalesCurrencyName', 'SalesCurrencyObj', 'CityName', 'CityObj', 'PurchaseBusinessPartnerName', 'PurchaseBusinessPartnerObj', 'AgentCurrencyName', 'AgentCurrencyObj', 'AgentAccountName', 'AgentAccountObj', 'Image1', 'Image2', 'Image3', 'Image4', 'Image5', 'Image6', 'Image7', 'Image8', 'ItemTypeName', 'ItemTypeObj', 'ItemStockReplacementName', 'ItemStockReplacementObj', 'ItemPriceMethodName', 'ItemPriceMethodObj', 'POSEticketUploadName', 'POSEticketUploadObj', 'SalesAddMethodName', 'SalesAddMethodObj', 'SalesAdd1MethodName', 'SalesAdd1MethodObj', 'SalesAdd2MethodName', 'SalesAdd2MethodObj', 'SalesAdd3MethodName', 'SalesAdd3MethodObj', 'SalesAdd4MethodName', 'SalesAdd4MethodObj', 'SalesAdd5MethodName', 'SalesAdd5MethodObj', 'ItemContentName', 'ItemContentObj', 'ItemSourceName', 'ItemSourceObj', 'ItemParentName', 'ItemParentObj', 'TravelHotelRoomTypeName', 'TravelHotelRoomTypeObj', 'ItemAdultName', 'ItemAdultObj', 'ItemChildName', 'ItemChildObj', 'ItemInfantName', 'ItemInfantObj', 'Packages']);;
                $data = serverSideSave($data, $request, $disabled);
                
                // $itemType = ItemType::findOrFail($data->ItemType)->Code;
                $itemGroup = ItemGroup::findOrFail($data->ItemGroup);
                // if ($data->Code == '<<Auto>>') $request->Code = now()->format('ymdHis').'-'.str_random(3);
                if (company()->IsItemAutoGenerateNameFromItemGroup) $request->Name = $itemGroup ? $itemGroup->Name : null;
                if (!isset($data->Slug)) $data->Slug = $data->Name ?: null;
                if (!isset($data->Name)) $data->NameEN = $data->Name ?: null;
                if (!isset($data->Description)) $data->Description = null;
                if (!isset($data->Description)) $data->DescriptionEN = $data->Description ?: null;
                if (!isset($data->ItemAccountGroup)) $data->ItemAccountGroup = $itemGroup->ItemAccountGroup ?: null;
                $iag = ItemAccountGroup::findOrFail($data->ItemAccountGroup);
                $city = null;
                if (isset($data->PurchaseBusinessPartner)) $city = BusinessPartner::where('Oid',$data->PurchaseBusinessPartner)->first()->City;
                if (!isset($data->ItemUnit)) $data->ItemUnit = $company->ItemUnit ?: null;
                if (!isset($data->City)) $data->City = $city ?: $company->City;
                if (!isset($data->IsActive)) $data->IsActive = 1;
                if (!isset($data->PurchaseCurrency)) $data->PurchaseCurrency = $iag->PurchaseCurrency ?: $company->Currency;
                if (!isset($data->SalesCurrency)) $data->SalesCurrency = $iag->SalesCurrency ?: $company->Currency;
                if (!isset($data->IsPurchase)) $data->IsPurchase = $iag->IsPurchase ?: 1;
                if (!isset($data->IsSales)) $data->IsSales = $iag->IsSales ?: 1;
                if (!isset($data->PurchaseAmount)) $data->PurchaseAmount = 0;
                if (!isset($data->UsualAmount)) $data->UsualAmount = $data->SalesAmount ?: 0;
                if (!isset($data->SalesAmount)) $data->SalesAmount = $data->UsualAmount ?: 0;
                if (!isset($data->IsStock)) $request->IsStock = 1;
                if (isset($request->Image1->base64)) $data->Image1 = $this->fileCloudService->uploadImage($request->Image1, $data->Image1);
                if (isset($request->Image2->base64)) $data->Image2 = $this->fileCloudService->uploadImage($request->Image2, $data->Image2);
                if (isset($request->Image3->base64)) $data->Image3 = $this->fileCloudService->uploadImage($request->Image3, $data->Image3);
                if (isset($request->Image4->base64)) $data->Image4 = $this->fileCloudService->uploadImage($request->Image4, $data->Image4);
                if (isset($request->Image5->base64)) $data->Image5 = $this->fileCloudService->uploadImage($request->Image5, $data->Image5);
                if (isset($request->Image6->base64)) $data->Image6 = $this->fileCloudService->uploadImage($request->Image6, $data->Image6);
                if (isset($request->Image7->base64)) $data->Image7 = $this->fileCloudService->uploadImage($request->Image7, $data->Image7);
                if (isset($request->Image8->base64)) $data->Image8 = $this->fileCloudService->uploadImage($request->Image8, $data->Image8);

                if($data->Barcode){
                    $qrCode = QrCode::format('png')
                        ->size(500)->errorCorrection('H')
                        ->generate($data->Barcode);
                    $qrCode = base64_encode($qrCode);
                    $data->QRCode = 'data:image/png;base64,'.$qrCode;
                }
                $data->save();
                if ($data->Code == '<<Auto>>') $data->Code = $this->autoNumberService->generate($data, 'mstitem');

                if (isset($request->Packages)) {
                    $disabled = array_merge(disabledFieldsForEdit(), ['ItemParentName', 'ItemParentObj']);;

                    serverSideDeleteDetail($data->Packages, $request->Packages);
                    foreach ($request->Packages as $row) {
                        if (isset($row->Oid)) $detail = ItemPackage::findOrFail($row->Oid);
                        else $detail = new ItemPackage();
                        $detail->Company = $data->Company;
                        $detail->Item = $data->Oid;
                        $detail = serverSideSave($detail, $row, $disabled);
                        $detail->save();
                    }
                    $data->load('Packages');
                    $data->fresh();
                }

                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $data->IsParent = false;
            if ($data->Details()->count() == 0) $data->IsParent = false;
            else $data->IsParent = true;
            $data->IsDetail = $data->ItemContent ? true : false; 
            $data->save();
            
            $role = $this->roleService->list('Item'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Role = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(Item $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }    

    public function fields() {
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Code');
        $fields[] = serverSideConfigField('Name');
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'text', 'n'=>'Barcode',];
        $fields[] = ['w'=> 0,   'f'=>'ItemGroup.Name', 'n'=>'ItemGroup'];
        $fields[] = ['w'=> 0,   'f'=>'SalesCurrency.Code', 'n'=>'SalesCurrency'];
        $fields[] = ['w'=> 0, 'r'=>0, 't'=>'text', 'n'=>'SalesAmount',];
        $fields[] = serverSideConfigField('IsActive');
        return $fields;
    }

    public function quickConfig(Request $request) {
        $fields = serverSideFields($this->fields());
        return $fields;
    }
    public function quickList(Request $request) {
        $fields = $this->fields();
        $data = DB::table('mstitem as data')
        ->leftJoin('mstcurrency AS SalesCurrency', 'SalesCurrency.Oid', '=', 'data.SalesCurrency')
        ->leftJoin('mstitemgroup AS ItemGroup', 'ItemGroup.Oid', '=', 'data.ItemGroup')
        ->leftJoin('sysitemtype AS ItemType', 'ItemType.Oid', '=', 'data.ItemType')
        ;
        if ($request->has('itemtype')) $data = $data->where('ItemGroup.ItemType', $request->input('itemtype'));
        $data = serverSideQuery($data, $fields, $request, 'mstitem');
        $role = $this->roleService->list('Item'); //rolepermission
        foreach($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }
}
