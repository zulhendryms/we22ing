<?php

namespace App\AdminApi\Collaboration\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Services\HttpService;
use App\Core\Internal\Services\AutoNumberService;

class FeedController extends Controller
{
    private $httpService;
    private $autoNumberService;
    protected $roleService;
    public function __construct(
        RoleModuleService $roleService,
        HttpService $httpService,
        AutoNumberService $autoNumberService
    ) {
        $this->roleService = $roleService;
        $this->httpService = $httpService;
        $this->autoNumberService = $autoNumberService;
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
    }

    public function config(Request $request)
    {
        $fields = $this->httpService->get('/portal/api/development/table/vuemaster?code=FerryPort');
        foreach ($fields as &$row) { //combosource
            if ($row->headerName  == 'Company') $row->source = comboselect('company');
            if ($row->headerName == 'City') $row->source = comboselect('mstcity');
        };
        return $fields;
    }
    public function fields()
    {
        $fields = []; //f = 'FIELD, t = TITLE

        $fields[] = ['w' => 0, 't' => 'text', 'n' => 'Oid'];
        $fields[] = ['w' => 150, 't' => 'int', 'n' => 'Code'];
        return $fields;
    }

    public function list(Request $request)
    {
        $user = Auth::user();
        $result = [];
        $count = 20;

        $query = "SELECT n.PublicPost FROM notificationuser nu 
            LEFT OUTER JOIN user u ON u.Oid = nu.User 
            LEFT OUTER JOIN notification n ON n.Oid = nu.Notification
            WHERE nu.User = '{$user->Oid}'
            AND nu.DateRead IS NULL 
            AND n.Type IS NULL AND n.PublicPost IS NOT NULL
            ORDER BY n.CreatedAt DESC LIMIT 10;";
        $comments = DB::select($query); //= 'Comment' 
        $tmp = collect($comments)->pluck('PublicPost');
        $Oids = $tmp;

        $query = "SELECT data.Oid FROM pubapproval data 
            LEFT OUTER JOIN pubpost p ON data.PublicPost = p.Oid
            LEFT OUTER JOIN sysstatus s On s.Oid = p.Status
            LEFT OUTER JOIN pubapproval prev ON p.Oid = prev.PublicPost AND prev.Sequence = data.Sequence - 1 AND prev.Action != 'Request'
            WHERE s.Code = 'submit'
            AND data.User = '{$user->Oid}' 
            AND data.ActionDate IS NULL
            AND data.Type IS NOT NULL
            AND IFNULL(data.Action,'') != 'Request'
            AND CASE WHEN data.Sequence = 1 THEN TRUE ELSE prev.ActionDate IS NOT NULL END
            ORDER BY data.CreatedAt DESC LIMIT 10";
        $approvals = DB::select($query);
        $tmp = collect($approvals)->pluck('Oid');
        $Oids = $Oids->merge($tmp);

        $query = "SELECT data.Oid FROM pubpost data 
            WHERE data.ObjectType IN ('PostVideo','PostImage','PostText')
            ORDER BY data.CreatedAt DESC LIMIT 10";
        $posts = DB::select($query);
        $tmp = collect($posts)->pluck('Oid');
        $Oids = $Oids->merge($tmp);
        
        $data = DB::table('pubpost as data') //jointable
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->leftJoin('user AS CreatedBy', 'CreatedBy.Oid', '=', 'data.CreatedBy')
            ->whereIn('data.Oid', $Oids);
        $data = serverSideQuery($data, $this->fields(), $request, 'pubpost', 'data.CreatedAt');
        return serverSideReturn($data, $this->fields());
    }


}
