<?php

namespace App\AdminApi\Travel\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Travel\Entities\TravelItemTourPackage;
use App\Core\Travel\Entities\TravelItemTourPackagePrice;
use App\Core\Travel\Entities\TravelItemTourPackageOtherAmount;
use App\Core\Travel\Entities\TravelItemTourPackageAttraction;
use App\Core\Travel\Entities\TravelItemTourPackageRestaurant;
use App\Core\Travel\Entities\TravelItemTourPackageTransport;
use App\Core\Travel\Entities\TravelItemTourPackageItinerary;
use App\Core\Travel\Entities\TravelItemTourPackageHotel;
use App\Core\Master\Entities\BusinessPartnerGroupUser;
use App\Core\Internal\Services\FileCloudService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Internal\Services\AutoNumberService;
use Validator;

class TravelItemTourPackageController extends Controller
{
    protected $roleService;
    protected $fileCloudService;
    private $autoNumberService;

    public function __construct(
        RoleModuleService $roleService,
        FileCloudService $fileCloudService,
        AutoNumberService $autoNumberService
        )
    {
        $this->roleService = $roleService;
        $this->fileCloudService = $fileCloudService;
        $this->autoNumberService = $autoNumberService;
    }

    public function fields()
    {
        $fields = []; //f = 'FIELD, t = TITLE

        $fields[] = ['w' => 0, 't' => 'text', 'n' => 'Oid'];
        $fields[] = ['w' => 150, 'r' => 1, 't' => 'text', 'n' => 'Code', 'def' => '<<Auto>>'];
        $fields[] = ['w' => 150, 'r' => 1, 't' => 'text', 'n' => 'Name'];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'NameID'];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'NameZH'];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'NameCH'];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'NameTH'];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'DateStart', 'def' => now()];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'DateEnd', 'def' => now()];
        $fields[] = ['w' => 150, 't' => 'text', 'n' => 'Note'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image1'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesSGL'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesTWN'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesTRP'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesQuad'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesQuint'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesCWB'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesCHT'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesCNB'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesAdult'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesChild'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesInfant'];
        $fields[] = ['w' => 150, 't' => 'double', 'n' => 'SalesAmount'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image2'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image3'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image4'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image5'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image6'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image7'];
        $fields[] = ['w' => 150, 't' => 'image', 'n' => 'Image8'];
        $fields[] = ['w' => 150, 't' => 'combo', 'n' => 'Currency', 'f' => 'Currency.Name', 'def' => company()->Currency];
        return $fields;
    }

    public function config(Request $request)
    {
        $fields = serverSideFields($this->fields());
        foreach ($fields as &$row) { //combosource
            if ($row['headerName'] == 'Currency') $row['source'] = comboselect('mstcurrency');
            elseif ($row['headerName']  == 'Company') $row['source'] = comboselect('company');
        };
        return $fields;
    }

    public function list(Request $request)
    {
        $user = Auth::user();
        $fields = $this->fields();
        $data = DB::table('trvitemtourpackage as data') //jointable
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->leftJoin('mstcurrency AS Currency', 'Currency.Oid', '=', 'data.Currency');
        
        // filter businesspartnergroupuser
        
        $businessPartnerGroupUser = BusinessPartnerGroupUser::select('BusinessPartnerGroup')->where('User', $user->Oid)->pluck('BusinessPartnerGroup');
        if ($businessPartnerGroupUser->count() > 0) $data->whereIn('data.BusinessPartnerGroup', $businessPartnerGroupUser);
        $data = serverSideQuery($data, $fields, $request, 'trvitemtourpackage');
        $role = $this->roleService->list('TravelItemTourPackage'); //rolepermission
        foreach ($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }


    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = TravelItemTourPackage::whereNull('GCRecord');

            $data = $data->orderBy('Name')->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function show(TravelItemTourPackage $data)
    {
        try {
            $data = TravelItemTourPackage::with(['Prices','Prices.CountryObj','Amounts','Attractions','Attractions.ItemContentObj','Attractions.ItemObj','Restaurants','Restaurants.ItemContentObj','Restaurants.ItemObj',
            'Transports','Transports.ItemContentObj','Transports.ItemObj','Details','Hotels','Hotels.ItemContentObj','Hotels.ItemObj'])->findOrFail($data->Oid);

            foreach($data->Prices as $row) {
                $row->CountryName = $row->CountryObj ? $row->CountryObj->Name : null;
                unset($row->CountryObj);
            }

            foreach($data->Attractions as $row) {
                $row->ItemContentName = $row->ItemContentObj ? $row->ItemContentObj->Name : null;
                $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
                unset($row->ItemContentObj);
                unset($row->ItemObj);
            }

            foreach($data->Restaurants as $row) {
                $row->ItemContentName = $row->ItemContentObj ? $row->ItemContentObj->Name : null;
                $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
                unset($row->ItemContentObj);
                unset($row->ItemObj);
            }

            foreach($data->Transports as $row) {
                $row->ItemContentName = $row->ItemContentObj ? $row->ItemContentObj->Name : null;
                $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
                unset($row->ItemContentObj);
                unset($row->ItemObj);
            }

            foreach($data->Hotels as $row) {
                $row->ItemContentName = $row->ItemContentObj ? $row->ItemContentObj->Name : null;
                $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
                unset($row->ItemContentObj);
                unset($row->ItemObj);
            }
            
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        // $dataArray = object_to_array($request);

        // $messsages = array(

        //     'Code.required' => __('_.Code') . __('error.required'),
        //     'Name.required' => __('_.Name') . __('error.required'),
        //     'SalesSGL.numeric' => __('_.SalesSGL') . __('error.numeric'),
        //     'SalesTWN.numeric' => __('_.SalesTWN') . __('error.numeric'),
        //     'SalesTRP.numeric' => __('_.SalesTRP') . __('error.numeric'),
        //     'SalesQuad.numeric' => __('_.SalesQuad') . __('error.numeric'),
        //     'SalesQuint.numeric' => __('_.SalesQuint') . __('error.numeric'),
        //     'SalesCWB.numeric' => __('_.SalesCWB') . __('error.numeric'),
        //     'SalesCHT.numeric' => __('_.SalesCHT') . __('error.numeric'),
        //     'SalesCNB.numeric' => __('_.SalesCNB') . __('error.numeric'),
        //     'SalesAdult.numeric' => __('_.SalesAdult') . __('error.numeric'),
        //     'SalesChild.numeric' => __('_.SalesChild') . __('error.numeric'),
        //     'SalesInfant.numeric' => __('_.SalesInfant') . __('error.numeric'),
        //     'SalesAmount.numeric' => __('_.SalesAmount') . __('error.numeric'),
        //     'Currency.exists' => __('_.Currency') . __('error.exists'),
        // );

        // $rules = array(

        //     'Code' => 'required',
        //     'Name' => 'required',
        //     'SalesSGL' => 'numeric',
        //     'SalesTWN' => 'numeric',
        //     'SalesTRP' => 'numeric',
        //     'SalesQuad' => 'numeric',
        //     'SalesQuint' => 'numeric',
        //     'SalesCWB' => 'numeric',
        //     'SalesCHT' => 'numeric',
        //     'SalesCNB' => 'numeric',
        //     'SalesAdult' => 'numeric',
        //     'SalesChild' => 'numeric',
        //     'SalesInfant' => 'numeric',
        //     'SalesAmount' => 'numeric',
        //     'Currency' => 'required|exists:mstcurrency,Oid',
        // );

        // $validator = Validator::make($dataArray, $rules, $messsages);

        // if ($validator->fails()) {
        //     return response()->json(
        //         $validator->messages(),
        //         Response::HTTP_UNPROCESSABLE_ENTITY
        //     );
        // }

        try {
            if (!$Oid) $data = new TravelItemTourPackage();
            else $data = TravelItemTourPackage::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $disabled = array_merge(disabledFieldsForEdit(), ['trvitemtourpackageName', 'CurrencyName', 'Prices','Amounts','Attractions','Restaurants','Transports','Details','Hotels','Image1', 'Image2', 'Image3', 'Image4', 'Image5', 'Image6', 'Image7', 'Image8']);
                if (isset($request->Code) == '<<Auto>>') $request->Code = now()->format('ymdHis').'-'.str_random(3);
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                if (isset($request->Image1->base64)) $data->Image1 = $this->fileCloudService->uploadImage($request->Image1, $data->Image1);
                if (isset($request->Image2->base64)) $data->Image2 = $this->fileCloudService->uploadImage($request->Image2, $data->Image2);
                if (isset($request->Image3->base64)) $data->Image3 = $this->fileCloudService->uploadImage($request->Image3, $data->Image3);
                if (isset($request->Image4->base64)) $data->Image4 = $this->fileCloudService->uploadImage($request->Image4, $data->Image4);
                if (isset($request->Image5->base64)) $data->Image5 = $this->fileCloudService->uploadImage($request->Image5, $data->Image5);
                if (isset($request->Image6->base64)) $data->Image6 = $this->fileCloudService->uploadImage($request->Image6, $data->Image6);
                if (isset($request->Image7->base64)) $data->Image7 = $this->fileCloudService->uploadImage($request->Image7, $data->Image7);
                if (isset($request->Image8->base64)) $data->Image8 = $this->fileCloudService->uploadImage($request->Image8, $data->Image8);
                $data->save();
                if ($data->Code == '<<Auto>>') $data->Code = $this->autoNumberService->generate($data, 'trvitemtourpackage');

                $disabled2 = array_merge(disabledFieldsForEdit(), ['ItemContentName','ItemName']);
                if (isset($request->Prices)) {
                    if ($data->Prices()->count() != 0) {
                        foreach ($data->Prices as $rowdb) {
                            $found = false;
                            foreach ($request->Prices as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackagePrice::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Prices as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackagePrice::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackagePrice();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Prices');
                    $data->fresh();
                }

                if (isset($request->Amounts)) {
                    if ($data->Amounts()->count() != 0) {
                        foreach ($data->Amounts as $rowdb) {
                            $found = false;
                            foreach ($request->Amounts as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackageOtherAmount::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Amounts as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackageOtherAmount::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackageOtherAmount();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Amounts');
                    $data->fresh();
                }

                if (isset($request->Attractions)) {
                    if ($data->Attractions()->count() != 0) {
                        foreach ($data->Attractions as $rowdb) {
                            $found = false;
                            foreach ($request->Attractions as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackageAttraction::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Attractions as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackageAttraction::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackageAttraction();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Attractions');
                    $data->fresh();
                }

                if (isset($request->Restaurants)) {
                    if ($data->Restaurants()->count() != 0) {
                        foreach ($data->Restaurants as $rowdb) {
                            $found = false;
                            foreach ($request->Restaurants as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackageRestaurant::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }

                    foreach ($request->Restaurants as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackageRestaurant::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackageRestaurant();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Restaurants');
                    $data->fresh();
                }

                if (isset($request->Transports)) {
                    if ($data->Transports()->count() != 0) {
                        foreach ($data->Transports as $rowdb) {
                            $found = false;
                            foreach ($request->Transports as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackageTransport::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }
                
                    foreach ($request->Transports as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackageTransport::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackageTransport();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Transports');
                    $data->fresh();
                }

                if (isset($request->Details)) {
                    if ($data->Details()->count() != 0) {
                        foreach ($data->Details as $rowdb) {
                            $found = false;
                            foreach ($request->Details as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackageItinerary::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }
                
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackageItinerary::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackageItinerary();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (isset($request->Hotels)) {
                    if ($data->Hotels()->count() != 0) {
                        foreach ($data->Hotels as $rowdb) {
                            $found = false;
                            foreach ($request->Hotels as $rowapi) {
                                if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                            if (!$found) {
                                $detail = TravelItemTourPackageHotel::findOrFail($rowdb->Oid);
                                $detail->delete();
                            }
                        }
                    }
               
                    foreach ($request->Hotels as $row) {
                        if (isset($row->Oid)) $detail = TravelItemTourPackageHotel::findOrFail($row->Oid);
                        else $detail = new TravelItemTourPackageHotel();
                        $detail->TravelItemTourPackage = $data->Oid;
                        foreach ($row as $field => $key) {
                            if (in_array($field, $disabled2)) continue;
                            $detail->{$field} = $row->{$field};
                        }
                        $detail->save();
                    }
                    $data->load('Hotels');
                    $data->fresh();
                }

                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('TravelItemTourPackage'); //rolepermission

            $data->CurrencyName = $data->Currency ? $data->CurrencyObj->Name : null;
            $data->Role = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(TravelItemTourPackage $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Prices()->delete();
                $data->Amounts()->delete();
                $data->Attractions()->delete();
                $data->Restaurants()->delete();
                $data->Transports()->delete();
                $data->Details()->delete();
                $data->Hotels()->delete();
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
