<?php

namespace App\AdminApi\Development\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Internal\Entities\Status;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Internal\Services\FileCloudService;
use App\Core\Base\Services\HttpService;
use App\Core\Internal\Services\AutoNumberService;
use App\AdminApi\Development\Controllers\ServerCRUDController;

class CRUDLogicController extends Controller
{
    private $httpService;
    protected $fileCloudService;
    protected $roleService;
    private $autoNumberService;
    private $CRUDController;
    public function __construct()
    {
        $this->httpService = new HttpService();
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
        $this->autoNumberService = new AutoNumberService();
        $this->roleService = new RoleModuleService($this->httpService);
        $this->fileCloudService = new FileCloudService();
        $this->CRUDController = new ServerCRUDController();
    }

    public function config($table) {
        try {
            $tableData = $this->CRUDController->getDataJSON($table, 'all');
            $fields = $this->CRUDController->generateVueList($table, $tableData->FormType == 'Transaction');
            $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($table, 'config');
            foreach ($fields as &$row) { //combosource
                if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
                foreach ($fieldCombos as $combo) if ($row->headerName == $combo->FieldName) {
                    if ($combo->ComboSourceManual) $row->source = json_decode($combo->ComboSourceManual);
                    // else $row->source = $this->functionComboSelect($combo->TableName);
                }
            };
            if (isset($tableData->topbutton) && (isJson($tableData->topbutton) || gettype($tableData->topbutton) == 'array')) $fields[0]->topButton = $tableData->topbutton;
            return $fields;
        } catch (\Exception $e) {
            err_return($e);
        }
    }
    public function presearch($table) {
        try {
            $table = $this->CRUDController->getDataJSON($table, 'presearch');
            if (isset($table) && (isJson($table) || gettype($table) == 'array')) return $table;            
        } catch (\Exception $e) {
            err_return($e);
        }
    }
    public function action($table) {
        try {
            $table = $this->CRUDController->getDataJSON($table, 'action');
            if (isset($table) && (isJson($table) || gettype($table) == 'array')) return $table;           
        } catch (\Exception $e) {
            err_return($e);
        }
    }

    private function functionComboSelect($tableName)
    {
        //combo1
        if ($tableName == 'user') return DB::table('user')
            ->select('Oid', DB::raw("UserName AS Name") )->whereRaw('GCRecord IS NULL')->where('IsActive',true)->orderBy('UserName')->limit(100)->get();
        elseif ($tableName == 'role') return DB::table('role')
            ->select('Oid', DB::raw("Name AS Name"))->orderBy('Name')->limit(100)->get();
        elseif ($tableName == 'company') return DB::table('company')
            ->select('Oid', DB::raw("Code AS Name"))->orderBy('Name')->limit(100)->get();
        elseif ($tableName == 'mstcurrency') return DB::table('mstcurrency')
            ->select('Oid', DB::raw("Code AS Name"))->orderBy('Name')->limit(100)->get();
        elseif (in_array($tableName, ['pospointofsale'])) return DB::table('pospointofsale')
            ->select('Oid', DB::raw("Code AS Name"))->orderBy('Name')->limit(100)->get();
        else return DB::table($tableName)
            ->select('Oid', DB::raw("CONCAT(Name, ' - ', Code) AS Name") )->whereRaw('GCRecord IS NULL')->orderBy('Name')->limit(100)->get();
    }
    
    public function list($table, $data = null, $request)
    {
        try {

            // ########### declaration ####################################################################
            $company = Auth::user()->CompanyObj;
            $tableData = $this->CRUDController->getDataJSON($table, 'all');
            $fields = $this->CRUDController->generateVueList($table, $tableData->FormType == 'Transaction');
            $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($table, 'list');
            $defaultSort = $this->CRUDController->functionGetDefaultSort($table);

            // ########### table join ####################################################################
            if (!$data) $data = DB::table($tableData->Code.' as data');
            foreach ($fieldCombos as $combo) $data = $data->leftJoin($combo->TableName." AS ".$combo->FieldName, $combo->FieldName.".Oid", "=", "data.".$combo->FieldName);
            

            // ########### selected fields ####################################################################
            $selectFields = [];
            $selectFields[] = 'data.Oid';
            foreach($fields as $row) {
                if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
                if ($row->field == 'Action') continue;             
                if (!isset($row->type)) $row->type = "text";
                if ($row->type == 'combobox' || $row->type == 'autocomplete') {
                    $field = isset($row->fieldjoin) ? $row->fieldjoin : 'data.'.$row->fieldToSave;
                    $selectFields[] = $field.' AS '.$row->fieldToSave;
                    $selectFields[] = $row->fieldToSearch.' AS '.$row->field;
                } else {
                    $field = isset($row->fieldToSearch) ? $row->fieldToSearch : 'data.'.$row->field;
                    if ($row->field == 'IsActive') $selectFields[] = DB::raw("CASE WHEN ".$field."=1 THEN 'Y' ELSE 'N' END AS ".$row->field);
                    elseif ($row->field == 'Date') $selectFields[] = DB::raw("DATE_FORMAT(".$field.", '%Y-%m-%d') AS ".$row->field);
                    else $selectFields[] = DB::raw($field.' AS '.$row->field);                
                }
            }


            // ########### sorting ####################################################################
            if ($defaultSort == 'Name') $defaultSort = 'data.Name';
            elseif (strpos($defaultSort,'Name') < 1) $defaultSort = 'data.'.$defaultSort;
            if ($request->query->has('sort')) $sort = returnDataField($request->query('sort')); else $sort = $defaultSort;
            foreach($fields as $row) {
                if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
                if ($sort == $row->field) {
                    $field = isset($row->field) ? $row->field : 'data.'.$row->field;
                    $sort = $field;
                    break;
                }
            }


            // ########### pagination declaration ####################################################################
            $page = $request->query->has('page') ? $request->query('page') : 1;
            $size = $request->query->has('size') ? $request->query('size') : 20;
            $sort = $request->query->has('sort') ? $sort : $defaultSort;

            // ########### search ####################################################################
            if (in_array($sort, ['Date','data.Date','data.UpdatedAt','data.CreatedAt','UpdatedAt','CreatedAt'])) $sortAsc = 'desc'; else $sortAsc = 'asc';
            $sorttype = $request->query->has('sorttype') ? $request->query('sorttype') : $sortAsc;
            if (!$sort) $sort = $defaultSort;
            $stringSearch=null;
            foreach($fields as $row) {
                if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
                if ($row->field == 'Action') continue;
                if (isset($row->hide)) if ($row->hide) continue;
                $field = !isset($row->fieldToSearch) ? 'data.'.$row->field : $field = $row->fieldToSearch;
                if ($request->has($field)) $data = $data->where($field,'LIKE',$request->query($field)[0].'%');                
                if ($request->has('search')) $stringSearch = ($stringSearch ? $stringSearch." OR " : "").$field." LIKE '%".$request->query('search')."%'";
            }
            if ($stringSearch) $data = $data->whereRaw("(".$stringSearch.")");
            

            // ########### company filter ####################################################################
            $found = '';
            if (substr($table,0,3) != 'sys') {
                $tmp = json_decode($company->ModuleGlobal);
                if ($found == '' && $tmp) $found = companyMultiModuleFound($tmp, $table, 'Global');
                $tmp = json_decode($company->ModuleGroup);
                if ($found == '' && $tmp) $found = companyMultiModuleFound($tmp, $table, 'Group');
                
                $criteriaCompany = companyMultiModuleCriteria($found, $company, 'Company');
                
                if ($criteriaCompany) $data->whereRaw($criteriaCompany);
            }

            // ########### server side return ####################################################################
            $data = $data->select($selectFields)->whereRaw('data.GCRecord IS NULL')->orderBy($sort, $sorttype)->limit(500)->paginate($size);        
            // foreach($data as $row) $row->Action = 
            $data = collect($data);
            $data = [
                'data' => $data['data'],
                // 'fields' => $returnfield,
                'meta' => [
                    'current_page' => $data['current_page'],
                    'from' => $data['from'],
                    'last_page' => $data['last_page'],
                    'path' => $data['path'],
                    'per_page' => $data['per_page'],
                    'to' => $data['to'],
                    'total' => $data['total'],
                ],
                'links' => [
                    'first' => $data['first_page_url'],
                    'last' => $data['last_page_url'],
                    'next' => $data['next_page_url'],
                    'previous' => $data['prev_page_url'],
                ],
            ];
            return json_decode(json_encode($data), FALSE);
                   
        } catch (\Exception $e) {
            err_return($e);
        }
    }

    private function functionSetComboData($data, $f) {
        // +"Oid": "aa6da29d-305a-11ea-818a-1a582ceaab05"
        // +"FieldName": "TravelHotelRoomType"
        // +"TableName": "trvhotelroomtype"
        // +"TableParentCode": "ItemContent"
        // +"TableParentDisplayName": null
        // +"TableComboCode": "TravelHotelRoomType"
        // +"TableComboField": "Name"
        // +"ComboSourceManual": null
        // +"TableFieldDisplay": "Name"
        // +"TableFormType": "Auto"
        if (!isset($data->{$f->FieldName})) return $data;
        if (!isset($data->{$f->FieldName.'Obj'})) {
            $class = config('autonumber.'.$f->TableName);
            $class = $class::where('Oid',$data->{$f->FieldName})->first();
            if ($class) $data->{$f->FieldName.'Name'} = $class ? $class->Name : null;
        } else {
            $data->{$f->FieldName.'Name'} = $data->{$f->FieldName.'Obj'} ? $data->{$f->FieldName.'Obj'}->{$f->TableComboField} : null;
        }
        unset($data->{$f->FieldName.'Obj'});
        return $data;
    }

    public function detail($table, $data, $Oid)
    {
        try {
            //declaration
            $tableData = $this->CRUDController->getDataJSON($table, 'all');
            $tableDetails = $this->CRUDController->getTableDetails($tableData);
            $fieldCombos = $this->CRUDController->functionGetFieldsComboFromTable($table, 'list');
            $fieldComboDetails = $this->CRUDController->functionGetFieldsComboFromTable($table, 'detail', $tableData);
            $user = Auth::user();
            
            //getdata & with
            $with = [];
            foreach ($tableDetails as $row) $with = array_merge($with , [$row->APITableParentRelationshipName]);
            if ($with) $data = $data->with($with);
            if ($tableData->IsUsingModuleComment) $data = $data->with(['Comments' => function($query) {
                    $query->orderBy('CreatedAt');
                }]);
            if ($tableData->IsUsingModuleApproval) $data = $data->with(['Approvals' => function($query) {
                    $query->orderBy('Sequence');
                }]);
            $data = $data->where('Oid',$Oid)->first();
            
            // //combo parent
            foreach ($fieldCombos as $row)  {
                $data= $this->functionSetComboData($data, $row);
            }

            // //combo detail
            foreach ($tableDetails as $detail) { //per details
                foreach ($data->{$detail->APITableParentRelationshipName} as $row) { //per record
                    foreach ($fieldComboDetails as $combo) { //per combo di detail
                        if ($combo->TableParentDisplayName == $detail->APITableParentRelationshipName) {
                            $row= $this->functionSetComboData($row, $combo);
                        }
                    }
                }
            }
            
            if ($tableData->IsUsingModuleComment) { //comment
                foreach($data->Comments as $row) $row = $user->returnUserObj($row, 'User');
            }

            if ($tableData->IsUsingModuleApproval) { //approval
                $data->Approvals = $data->Approvals->filter(function ($value, $key) use ($tableData) {
                    return $value->Action !== "Request";
                });
                foreach ($data->Approvals as $row) {
                    $row->NextUserName = $row->NextUserObj ? $row->NextUserObj->Name : null;
                    $row->UserName = $row->UserObj ? $row->UserObj->Name : null;            
                }
            }
            // if ($tableData->IsUsingModuleImage) 
            // if ($tableData->IsUsingModuleFile) 
            // if ($tableData->IsUsingModuleEmail) 

            if ($tableData->ActionDropDownRow) {
                $data->Action = json_decode($tableData->ActionDropDownRow);
            }
            return $data;

        } catch (\Exception $e) {
            err_return($e);
        }
    }

    public function saveTotal($data) {        
        $totalAmount = 0;
        if (isset($data->Details)) foreach($data->Details as $row) $totalAmount = $totalAmount + $row->TotalAmount;        
        if (isset($data->SubtotalAmount)) $data->SubtotalAmount = $totalAmount;
        if (isset($data->Price)) $totalAmount = $totalAmount + $data->Price;
        if (isset($data->Amount)) $totalAmount = $totalAmount + $data->Amount;
        if (isset($data->TaxAmount)) $totalAmount = $totalAmount + $data->TaxAmount;
        if (isset($data->AdditionalAmount)) $totalAmount = $totalAmount + $data->AdditionalAmount;
        if (isset($data->DiscountAmount)) $totalAmount = $totalAmount - $data->DiscountAmount;
        if (isset($data->DiscountPercentageAmount)) $totalAmount = $totalAmount - $data->DiscountPercentageAmount;
        if (isset($data->Quantity)) $totalAmount = $totalAmount * $data->Quantity;
        if (isset($data->TotalAmountWording)) $data->TotalAmountWording = convert_number_to_words($data->TotalAmount);
        $data->TotalAmount = $totalAmount;
        $rate = isset($data->Rate) ? $data->Rate : (isset($data->RateAmount) ? $data->RateAmount : 1);
        if (isset($data->TotalBase)) $data->TotalBase = $rate * $data->TotalAmount;
        if (isset($data->QuantityBase)) $data->QuantityBase = $data->Quantity;
        $data->save();
        return $data;
    }
    private function disabledFieldsForEdit()
    {
        return ['id','Index','GCRecord','OptimisticLock','CreatedAt','UpdatedAt','CreatedAtUTC','UpdatedAtUTC','CreatedBy','UpdatedBy', 'prev', 'index','Index','exists'];
    }
    public function save($table, $data, $request, $dataParent = null)
    {
        try {
            //field type, validation require, permission
            $company = Auth::user()->CompanyObj ?: company();
            $tableData = $this->CRUDController->getDataJSON($table, 'all');
            $fields = $this->CRUDController->functionGetFieldsFromTable($tableData->Code);
            
            //parent
            if ($dataParent) {
                $data->Company = $dataParent->Company;
                $data->{$tableData->APITableParentFieldName} = $dataParent->Oid;
            }
            foreach ($fields as $field) {
                if (in_array($field->Code, $this->disabledFieldsForEdit())) continue;
                // $field->Code = 'IsFeaturedItem';
                $err = false;
                try {  $value = is_null($request->{$field->Code}); } 
                catch (\Exception $ex) {  $err = true; }

                if ($err) continue;
                if ($request->{$field->Code} == "" && !in_array($field->FieldType,['bit','bool','boolean'])) {
                    $request->{$field->Code} = null;
                }
                if (isset($request->{$field->Code}->base64)) {
                    if ($request->{$field->Code} == null) {
                        if ($data->{$field->Code}) $this->fileCloudService->deleteImage($data->{$field->Code});
                        $data->{$field->Code} = null;
                    } else {
                        $data->{$field->Code} = $this->fileCloudService->uploadImage($request->{$field->Code}, $data->{$field->Code});
                    }                    
                } elseif (in_array($field->FieldType,['double','int','integer','decimal','money','smallint','bigint'])) {
                    $request->{$field->Code} = $request->{$field->Code} == "" ? null : $request->{$field->Code};
                    $request->{$field->Code} = str_replace(",","",$request->{$field->Code}); //hilangkan koma dari vue money
                    $data->{$field->Code} = $request->{$field->Code} ?: 0;
                } elseif (in_array($field->FieldType,['bit','bool','boolean'])) {
                    if     ($request->{$field->Code} == null) $data->{$field->Code} = 0;
                    elseif ($request->{$field->Code} == "1") $data->{$field->Code} = 1;
                    elseif ($request->{$field->Code} == "0") $data->{$field->Code} = 0;
                    elseif ($request->{$field->Code} == "true") $data->{$field->Code} = 1;
                    elseif ($request->{$field->Code} == "false") $data->{$field->Code} = 0;
                    elseif ($request->{$field->Code} == true) $data->{$field->Code} = 1;
                    elseif ($request->{$field->Code} == false) $data->{$field->Code} = 0;
                    else    $data->{$field->Code} = $request->{$field->Code};
                } else {
                    $data->{$field->Code} = $request->{$field->Code};
                }
                // if ($field->Code == 'IsFeaturedItem') dd($data->{$field->Code});
            }

            //company
            if (isset($request->Company)) $data->Company = $request->Company; //kdg tdk mau ke set dg yg diisi
            if (isset($request->Type) && !in_array($table, ['mstbusinesspartner','trdsalesinvoice'])) $data->Type = $request->Type; //kdg tdk mau ke set dg yg diisi
            //defaulvalue
            $codeAutoGenerate = false;
            foreach ($fields as $f) {
                if ($f->Code == 'Company'          && !isset($data->{$f->Code})) $data->{$f->Code} = $company->Oid;
                if ($f->Code == 'Date'             && !isset($data->{$f->Code})) $data->{$f->Code} = now()->addHours(company_timezone())->toDateTimeString();
                if ($f->Code == 'ItemUnit'         && !isset($data->{$f->Code})) $data->{$f->Code} = $company->ItemUnit;
                if ($f->Code == 'BusinessPartner'  && !isset($data->{$f->Code})) $data->{$f->Code} = $company->CustomerCash;
                if ($f->Code == 'Status'           && !isset($data->{$f->Code})) $data->{$f->Code} = Status::entry()->first()->Oid;
                if ($f->Code == 'Warehouse'        && !isset($data->{$f->Code})) $data->{$f->Code} = $company->POSDefaultWarehouse;
                if ($f->Code == 'Currency'         && !isset($data->{$f->Code})) $data->{$f->Code} = $company->Currency;
                if ($f->Code == 'Rate'             && !isset($data->{$f->Code})) $data->{$f->Code} = 1;
                if ($f->Code == 'RateAmount'       && !isset($data->{$f->Code})) $data->{$f->Code} = 1;
                if ($f->Code == 'IsActive'         && !isset($data->{$f->Code})) $data->{$f->Code} = 1;
                if ($f->Code == 'Code') if (!isset($data->Code)) $data->Code = '<<Auto>>';
                if ($f->Code == 'Code') if ($data->{$f->Code} == '<<AutoGenerate>>' || $data->{$f->Code} == '<<Auto>>') $codeAutoGenerate = true;
            }

            $data->save();
            //autogenerate
            $code = $this->autoNumberService->generate($data, $table);
            if ($codeAutoGenerate) $data->Code = $this->autoNumberService->generate($data, $table);            
            
            return $data;
        } catch (\Exception $e) {
            err_return($e);
            // throw new \Exception($e->getMessage().PHP_EOL.$e->getFile()." (Line No. ".$e->getLine().")", $e->getCode());
        }
    }

    public function delete($data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            err_return($e);
        }
    }

    public function deleteDetail($data,$request)
    {
        try {
            if ($data->count() != 0) {
                foreach ($data as $rowdb) {
                    $found = false;               
                    foreach ($request as $rowapi) {
                        if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                    }
                    if (!$found) {
                        $detail = $data->where('Oid',$rowdb->Oid)->first();
                        $detail->delete();
                    }
                }
            }
        } catch (\Exception $e) {
            err_return($e);
        }
    }

    public function getIndex($data, $request, $order ='Oid') {
        try {
            $type = $request->has('type') ? $request->input('type') : 'detail';
            if ($type == 'combo') $data = $data->addSelect('Oid','Code','Name');
            $data = $data->orderBy($order)->get();
            return $data;

        } catch (\Exception $e) {
            err_return($e);
        }   
    }

    public function combo($data, $fields = ['Oid', 'Name'], $order ='Oid') {
        try {
            $data = $data->addSelect($fields);
            $data = $data->orderBy($order)->get();
            return $data;

        } catch (\Exception $e) {
            err_return($e);
        }   
    }
}
