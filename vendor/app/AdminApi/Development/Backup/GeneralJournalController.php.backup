<?php

namespace App\AdminApi\Accounting\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Accounting\Entities\GeneralJournal;
use App\Core\Accounting\Entities\Journal;
use App\Core\Master\Entities\Currency;
use App\Core\Internal\Entities\Status;
use App\Core\Accounting\Resources\GeneralJournalCollection;
use App\Core\Accounting\Resources\GeneralJournalResource;
use App\Core\Accounting\Services\GeneralJournalService;
use App\Core\Security\Services\RoleModuleService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use Validator;

class GeneralJournalController extends Controller
{
    protected $generalJournalService;
    public function __construct(
        GeneralJournalService $generalJournalService,
        RoleModuleService $roleService  
        )
    {
        $this->generalJournalService = $generalJournalService;
        $this->roleService = $roleService;
    }
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Code');
        $fields[] = serverSideConfigField('Date');
        $fields[] = serverSideConfigField('Currency');
        $fields[] = ['w'=> 180, 'n'=>'TotalAmount'];
        $fields[] = serverSideConfigField('Status');
        return $fields;
    }

    public function config(Request $request) {
        return serverSideFields($this->fields());
    }
    public function list(Request $request) {
        $fields = $this->fields();
        $data = DB::table('accgeneraljournal as data')
        ->leftJoin('mstcurrency AS c', 'c.Oid', '=', 'data.Currency')
        ->leftJoin('sysstatus AS s', 's.Oid', '=', 'data.Status');
        $data = serverSideQuery($data, $fields, $request,'Date');
        $role = $this->roleService->list('GeneralJournal');
        $action = $this->roleService->action('GeneralJournal');
        foreach($data as $row) $row->Role = $this->roleService->generateRole($row, $role, $action);
        return serverSideReturn($data, $fields);
    }
    
    public function index(Request $request, $Oid = null)
    {
        try {            
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = GeneralJournal::whereNull('GCRecord');
            if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            
            // [zfx] TODO: reverse if else
            if ($request->has('date')) {
                $data = $data
                    ->where('Date','>=', Carbon::parse($request->date)->startOfMonth()->toDateString())
                    ->where('Date','<', Carbon::parse($request->date)->startOfMonth()->addMonths(1)->toDateString());
            }
            else {
                return (new GeneralJournalCollection(collect([])))->type($type);
            }

            if ($type == 'list') $data->with(['CurrencyObj','StatusObj']);
            $data = $data->get();
            
            $result = [];
            $role = $this->roleService->list('GeneralJournal');
            $action = $this->roleService->action('GeneralJournal');
            foreach ($data as $row) {
                $result[] = [
                    'Oid' => $row->Oid,
                    'Code' => $row->Code,
                    'Date' => Carbon::parse($row->Date)->format('Y-m-d'),
                    'TotalAmount' => number_format($row->TotalAmount,$row->CurrencyObj->Decimal),
                    'CurrencyName' => $row->CurrencyObj ? $row->CurrencyObj->Code : null,
                    'StatusName' => $row->StatusObj ? $row->StatusObj->Name : null,
                    'Role' => $this->GenerateRole($row, $role, $action)
                ];
            }
            return $result;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function show(GeneralJournal $data)
    {
        try {    
            $data = GeneralJournal::with('Details')->with([
                'Details.AccountObj' => function ($query) {$query->addSelect('Oid', 'Code','Name','Currency');},
            ])->findOrFail($data->Oid);
            $data->Role = $this->generateRole($data);
            return (new GeneralJournalResource($data))->type('detail');
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function post(GeneralJournal $data)
    {
        try{
            $this->generalJournalService->post($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function unpost(GeneralJournal $data)
    {
        try{
            $this->generalJournalService->unpost($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function cancelled(GeneralJournal $data)
    {
        try{
            $this->generalJournalService->cancelled($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function destroy(GeneralJournal $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                // $data->Journals()->delete();
                $data->Details()->delete();
                $data->delete();
            });
            
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
    
    public function journal(GeneralJournal $data)
    {
        try {            
            return Journal::where('GeneralJournal', $data->Oid);
            // return $data->Journals();   
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }     
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        $dataArray = object_to_array($request);
        // return response()->json(
        //     $request, Response::HTTP_OK
        // );
        // if ($request->AdditionalAmount < 0 ) throw new \Exception("Additional amount cannot below 0");
        // if ($request->DiscountAmount < 0 ) throw new \Exception("Discount amount cannot below 0");
        // if ($request->PrepaidAmount < 0 ) throw new \Exception("Prepaid amount cannot below 0");
        // if ($request->RateAmount < 0 ) throw new \Exception("Rate amount cannot below 0");
        // if ($request->TransferAmount < 0 ) throw new \Exception("Transfer amount cannot below 0");        
        // checkperiod
        
        $messsages = array(
            'Code.required'=>__('_.Code').__('error.required'),
            'Code.max'=>__('_.Code').__('error.max'),
            'Date.required'=>__('_.Date').__('error.required'),
            'Date.date'=>__('_.Date').__('error.date'),
            'Rate.required'=>__('_.Rate').__('error.required'),
            'Rate.max'=>__('_.Rate').__('error.max'),
            'Currency.required'=>__('_.Currency').__('error.required'),
            'Currency.exists'=>__('_.Currency').__('error.exists'),
        );
        $rules = array(
            'Code' => 'required|max:255',
            'Date' => 'required|date',
            'Rate' => 'required|max:255',
            'Currency' => 'required|exists:mstcurrency,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {
            DB::transaction(function () use ($request, $Oid, &$data) {
                if (!$Oid) $data = new GeneralJournal();
                else $data = GeneralJournal::findOrFail($Oid);
                $cur = Currency::findOrFail($request->Currency);
                // $data->Company = Auth::user()->Company;
                $data->Code = $request->Code == '<<Auto>>' ? now()->format('ymdHis').'-'.str_random(3) : $request->Code;
                $data->Date = $request->Date;
                $data->Currency = $request->Currency;
                $data->Note = $request->Note;
                // $data->Project = $request->Project;
                // $data->Warehouse = $request->Warehouse;
                $data->Rate = $request->Rate ?: 1;
                $data->Status = $request->Status ?: Status::entry()->first()->Oid;
                $data->save();

                if ($data->Details()->count() != 0) {
                    foreach ($data->Details as $rowdb) {
                        $found = false;               
                        foreach ($request->Details as $rowapi) {
                            if (isset($rowapi->Oid)) {
                                if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                        }
                        if (!$found) {
                            $detail = Journal::findOrFail($rowdb->Oid);
                            $detail->delete();
                        }
                    }
                }
                if($request->Details) {
                    $details = [];
                    $totalAmount = 0;
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) {
                            $detail = Journal::findOrFail($row->Oid);
                            $detail->Code = $data->Code;
                            $detail->Date = $data->Date;
                            $detail->Rate = $data->Rate;
                            $detail->Currency = $data->Currency;
                            $detail->Description = $row->Description;
                            $detail->DebetAmount = $row->DebetAmount;
                            $detail->CreditAmount = $row->CreditAmount;
                            $detail->DebetBase = $cur->toBaseAmount($row->DebetAmount, $data->Rate);
                            $detail->CreditBase = $cur->toBaseAmount($row->CreditAmount, $data->Rate);
                            $detail->save();
                        } else {
                            $details[] = new Journal([
                                'Code' => $data->Code,
                                'Date' => $data->Date,
                                'Rate' => $data->Rate,
                                'Currency' => $data->Currency,
                                'Account' => $row->Account,
                                'Description' => $row->Description,
                                'Currency' => $data->Currency,
                                'DebetAmount' => $row->DebetAmount,
                                'CreditAmount' => $row->CreditAmount,
                                'DebetBase' => $cur->toBaseAmount($row->DebetAmount, $data->Rate),
                                'CreditBase' => $cur->toBaseAmount($row->CreditAmount, $data->Rate)
                            ]);
                        }
                        $totalAmount += $row->DebetAmount;
                    }
                    $data->Details()->saveMany($details);
                    $data->TotalAmount = $totalAmount;
                    $data->TotalBase = $cur->toBaseAmount($data->TotalAmount, $data->Rate);
                    $data->save();
                    $data->load('Details');
                    $data->fresh();
                
                    $data->CurrencyName = $data->CurrencyObj->Code;
                    $data->StatusName = $data->StatusObj->Name;
                    $data->Role = $this->generateRole($data);
                }
            });

            // $data = new GeneralJournalResource($data);
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    private function generateRole(GeneralJournal $data, $role = null, $action = null) {
        if (!$role) $role = $this->roleService->list('GeneralJournal');
        if (!$action) $action = $this->roleService->action('GeneralJournal');

        return [
            'IsRead' => $role->IsRead,
            'IsAdd' => $role->IsAdd,
            'IsEdit' => $this->roleService->isAllowDelete($data->StatusObj, $role->IsEdit),
            'IsDelete' => 0, //$this->roleService->isAllowDelete($row->StatusObj, $role->IsDelete),
            'Cancel' => $this->roleService->isAllowCancel($data->StatusObj, $action->Cancel),
            'Entry' => $this->roleService->isAllowEntry($data->StatusObj, $action->Entry),
            'Post' => $this->roleService->isAllowPost($data->StatusObj, $action->Posted),
            'ViewJournal' => $this->roleService->isPosted($data->StatusObj, 1),
        ];
    }
}
            
