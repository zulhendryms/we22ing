<?php

namespace App\AdminApi\Master\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\CurrencyRate;
use App\Core\Master\Entities\CurrencyRateDate;
use App\Core\Master\Resources\CurrencyRateResource;
use App\Core\Master\Resources\CurrencyRateCollection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use Validator;
use App\Core\Security\Services\RoleModuleService;

class CurrencyRateController extends Controller
{    
    protected $roleService;

    public function __construct(RoleModuleService $roleService  )
    {
        $this->roleService = $roleService;
    }
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = serverSideConfigField('Date');
        return $fields;
    }

    public function config(Request $request) {
        $fields = serverSideFields($this->fields());
        foreach ($fields as &$row) { //combosource
            // if ($row['headerName'] == 'CurrencyRateDate') $row['source'] = comboSelect('mstcurrencyratedate');
            // elseif ($row['headerName'] == 'Currency') $row['source'] = comboSelect('mstcurrency');
            if ($row['headerName']  == 'Company') $row->source = comboselect('company');
        }
        return $fields;

    }
    public function list(Request $request) {
        $fields = $this->fields();
        $data = DB::table('mstcurrencyratedate as data')
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            // ->leftJoin('mstcurrencyrate AS cr', 'cr.Oid', '=', 'data.CurrencyRateDate')
            // ->leftJoin('mstcurrency AS c', 'c.Oid', '=', 'data.Currency')
        ;
        $data = serverSideQuery($data, $fields, $request, 'mstcurrencyratedate','Date');
        $role = $this->roleService->list('CurrencyRate');
        foreach($data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return serverSideReturn($data, $fields);
    }

    public function detailfields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        // $fields[] = serverSideConfigField('Oid');
        $fields[] = ['w'=> 0, 'h'=>0, 'n'=>'Oid', 'f'=>'Oid'];
        // $fields[] = serverSideConfigField('Date');
        $fields[] = ['w'=> 0, 'h'=>0, 'dis'=>1, 't'=>'combo', 'n'=>'Currency', 'f'=>'c.Name'];
        $fields[] = ['w'=> 0, 'h'=>0, 't'=>'double', 'n'=>'BuyRate',];
        $fields[] = ['w'=> 0, 'h'=>0, 't'=>'double', 'n'=>'SellRate',];
        // $fields[] = ['w'=> 0, 'h'=>0, 't'=>'double', 'n'=>'MidRate', 'hide'=>true];
        return $fields;
    }
    public function detailconfig(Request $request) {
        $fields = serverSideFields($this->detailfields(),true);
        foreach ($fields as $row) { //combosource
            if ($row['headerName'] == 'MidRate') $row = array_merge($row, [
                'hideInput' => true
            ]);
            // dd(array_merge($row, [
            //     'hideInput' => true
            // ]));
        }
        $result = [];
        $result[] = [
            "fieldToSave" => "Details",
            "addButton" => false,
            "showPopup" => false,
            "data" => $fields
        ];
        return $result;
    }

    public function index(Request $request)
    {       
        try {            
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = CurrencyRate::whereNull('GCRecord');
            if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            $data = $data->get();
            return (new CurrencyRateCollection($data))->type($type);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }  
    }

    public function currencyRateDate()
    {       
        try {            
            $data = CurrencyRateDate::whereNull('GCRecord');
            $data = $data->orderBy('Date', 'desc')->get();
            foreach($data as $row){            
                $row->Date = Carbon::parse($row->Date)->format('Y-m-d');      
            }
            return response()->json(
                $data
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }  
    }
    
    public function show($Oid = null)
    {
        try {            
            // return (new CurrencyRateResource($data))->type('detail');
            $data = CurrencyRateDate::with(['Details' => function($q) {
                $q->orderBy('MidRate');
            }])->where('Oid', $Oid)->first();
            foreach ($data->Details as $row) {
                $row->CurrencyName = $row->CurrencyObj->Code;
                unset($row->CurrencyObj);
            }
            return response()->json(
                $data, Response::HTTP_OK
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }  
    }

    public function insert(Request $request) 
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Date.required'=>__('_.Date').__('error.required'),
            'Date.date'=>__('_.Date').__('error.date'),
        );
        $rules = array(
            'Date' => 'required|date',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            $data = CurrencyRateDate::where('Date',$request->Date)->first();
            
            if (!$data) {
                $data = new CurrencyRateDate();
                $data->Date = $request->Date;
                $data->save();
            }
            $user = Auth::user();
            $query = "INSERT INTO mstcurrencyrate (Oid, Company, CurrencyRateDate, Currency, Date, BuyRate, SellRate, MidRate)
                SELECT UUID(), '{$user->Company}', '".$data->Oid."', cr.Currency, '".$data->Date."', cr.BuyRate, cr.SellRate, (cr.BuyRate+cr.SellRate) / 2
                FROM mstcurrencyrate cr
                LEFT OUTER JOIN mstcurrencyrate crd ON cr.Currency = crd.Currency AND crd.Date = '".$data->Date."'
                WHERE cr.CurrencyRateDate = 
                (SELECT CurrencyRateDate FROM mstcurrencyrate crd WHERE crd.Date <= '".$data->Date."' AND CurrencyRateDate IS NOT NULL ORDER BY crd.Date DESC LIMIT 1) AND
                crd.Oid IS NULL AND cr.Company='{$user->Company}';";
            DB::insert($query);
            $query = "INSERT INTO mstcurrencyrate (Oid, Company, CurrencyRateDate, Currency, Date, BuyRate, SellRate, MidRate)
                SELECT UUID(), '{$user->Company}', '".$data->Oid."', c.Oid, '".$data->Date."', 1,1,1
                FROM mstcurrency c 
                LEFT OUTER JOIN mstcurrencyrate rt ON c.Oid = rt.Currency AND rt.CurrencyRateDate='".$data->Oid."'
                WHERE rt.Oid IS NULL AND c.IsActive = 1 AND c.Company='{$user->Company}'";
            DB::insert($query);
            $data = CurrencyRateDate::with('Details')->where('Oid',$data->Oid)->first();
            $role = $this->roleService->list('CurrencyRate');
            $data->Role = $this->roleService->generateActionMaster($role);

            if ($data->Details()->count() == 0) DB::insert($query);

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function reupdate(Request $request, $Oid = null) {
        try {            
            $data = CurrencyRateDate::findOrFail($Oid)->first();
            
            $query = "INSERT INTO mstcurrencyrate (Oid, Company, CurrencyRateDate, Currency, Date, BuyRate, SellRate, MidRate)
                SELECT UUID(), c.Company, '".$data->Oid."', c.Oid, '".$data->Date."', 1,1,1
                FROM mstcurrency c 
                LEFT OUTER JOIN mstcurrencyrate rt ON c.Oid = rt.Currency AND rt.CurrencyRateDate='".$data->Oid."'
                WHERE rt.Oid IS NULL AND c.IsActive = 1";
            DB::insert($query);
            $data = CurrencyRateDate::with('Details')->where('Oid',$data->Oid)->first();
            if ($data->Details()->count() == 0) DB::insert($query);

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function update(Request $request, $Oid = null)
    {        
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF

        try {            
            $data = CurrencyRateDate::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {     
                $user = Auth::user();
                if ($data->Details()->count() != 0) {
                    foreach ($data->Details as $rowdb) {
                        $found = false;               
                        foreach ($request->Details as $rowapi) {
                            if (isset($rowapi->Oid)) {
                                if ($rowdb->Oid == $rowapi->Oid) $found = true;
                            }
                        }
                        if (!$found) {
                            $detail = CurrencyRate::findOrFail($rowdb->Oid);
                            $detail->delete();
                        }
                    }
                }
                if($request->Details) {
                    $details = [];  
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) {
                            $detail = CurrencyRate::findOrFail($row->Oid);
                            $detail->Company = $data->Company ?: $user->Company;
                            $detail->Date = $data->Date;
                            $detail->Currency = $row->Currency;
                            $detail->BuyRate = $row->BuyRate;
                            $detail->SellRate = $row->SellRate;
                            $detail->MidRate = ($row->SellRate + $row->BuyRate) / 2;
                            $detail->save();
                            
                        } else {
                            $details[] = new CurrencyRate([
                                'Company' => $data->Company,
                                'Currency' => $row->Currency,
                                'Date' => $data->Date,
                                'BuyRate' => $row->BuyRate ?: $row->MidRate,
                                'SellRate' => $row->SellRate ?: $row->MidRate,
                                'MidRate' => ($row->SellRate + $row->BuyRate) / 2,
                            ]);
                        }
                    }
                    $data->Details()->saveMany($details);
                    $data->load('Details');
                    $data->fresh();
                }
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            // $data = (new CurrencyRateResource($data))->type('detail');
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(CurrencyRateDate $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->Details()->delete();
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
