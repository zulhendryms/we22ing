<?php

namespace App\AdminApi\Pub\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Pub\Entities\PublicPost;
use App\Core\Internal\Entities\Status;
use App\Core\Pub\Entities\PublicApproval;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Internal\Services\FileCloudService;
use App\Core\Base\Services\HttpService;
use App\Core\Internal\Services\AutoNumberService;
use App\Core\Internal\Events\EventSendNotificationSocketOneSignal;
use App\AdminApi\Pub\Controllers\PublicCRUDVueController;

class PublicCRUDController extends Controller
{
    private $httpService;
    protected $fileCloudService;
    protected $roleService;
    private $autoNumberService;
    private $dbConnection;
    private $publicCRUDVueController;
    public function __construct()
    {
        $this->httpService = new HttpService();
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
        $this->autoNumberService = new AutoNumberService();
        $this->roleService = new RoleModuleService($this->httpService);
        $this->fileCloudService = new FileCloudService();
        $this->publicCRUDVueController = new PublicCRUDVueController();
        $this->dbConnection = DB::connection('server');
    }

    public function config($table) {
        // $return = $this->dbConnection->select(DB::raw("SELECT Oid,Code FROM company"));

        //vuelist //vuemaster
        $source = $this->httpService->get('/portal/api/development/table/phpformconfig?code='.$table);
        $fields = $source->config;
        $fieldCombos = $source->combos;
        foreach ($fields as &$row) { //combosource
            foreach ($fieldCombos as $combo) if ($row->headerName == $combo->FieldName) {
                if ($combo->ComboSourceManual) $row->source = json_decode($combo->ComboSourceManual);
                else $row->source = $this->functionComboSelect($combo->TableName);
            }
        };

        $topbutton = $source->topbutton;
        if (isset($topbutton) && (isJson($topbutton) || gettype($topbutton) == 'array')) $fields[0]->topButton = $topbutton;

        return $fields;
    }
    public function presearch($table) {
        $table = $this->httpService->get('/portal/api/development/table/phpgetcode?type=presearch&code='.$table);
        if (isset($table) && (isJson($table) || gettype($table) == 'array')) return $table;
    }
    public function action($table) {
        $table = $this->httpService->get('/portal/api/development/table/phpgetcode?type=action&code='.$table);
        if (isset($table) && (isJson($table) || gettype($table) == 'array')) return $table;
    }

    private function functionComboSelect($tableName)
    {
        if ($tableName == 'user') return DB::table('user')
            ->select('Oid', DB::raw("UserName AS Name") )->whereRaw('GCRecord IS NULL')->where('IsActive',true)->orderBy('UserName')->limit(100)->get();
        elseif ($tableName == 'role') return DB::table('role')
            ->select('Oid', DB::raw("Name AS Name"))->orderBy('Name')->limit(100)->get();
        elseif ($tableName == 'company') return DB::table('company')
            ->select('Oid', DB::raw("Code AS Name"))->orderBy('Name')->limit(100)->get();
        elseif ($tableName == 'mstcurrency') return DB::table('mstcurrency')
            ->select('Oid', DB::raw("Code AS Name"))->orderBy('Name')->limit(100)->get();
        elseif (in_array($tableName, ['pospointofsale'])) return DB::table('pospointofsale')
            ->select('Oid', DB::raw("Code AS Name"))->orderBy('Name')->limit(100)->get();
        else return DB::table($tableName)
            ->select('Oid', DB::raw("CONCAT(Name, ' - ', Code) AS Name") )->whereRaw('GCRecord IS NULL')->orderBy('Name')->limit(100)->get();
    }
    
    public function list($table, $data, $request)
    {

        // ########### declaration ####################################################################
        $company = Auth::user()->CompanyObj;
        // $source = $this->httpService->get('/portal/api/development/table/phpformlist?code='.$table);
        // $fields = $source->list;
        // $fieldCombos = $source->combos;
        // $defaultSort = $source->sort;
        $fields = $this->publicCRUDVueController->generateVueList($table);
        $fieldCombos = $this->publicCRUDVueController->functionGetFieldsComboFromTable($table, 'list');
        $defaultSort = $this->publicCRUDVueController->functionGetDefaultSort($table);

        // ########### table join ####################################################################
        foreach ($fieldCombos as $combo) $data = $data->leftJoin($combo->TableName." AS ".$combo->FieldName, $combo->FieldName.".Oid", "=", "data.".$combo->FieldName);        
        

        // ########### selected fields ####################################################################
        $selectFields = [];
        $selectFields[] = 'data.Oid';
        foreach($fields as $row) {
            if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
            if ($row->field == 'Action') continue;             
            if (!isset($row->type)) $row->type = "text";
            if ($row->type == 'combobox' || $row->type == 'autocomplete') {
                $field = isset($row->fieldjoin) ? $row->fieldjoin : 'data.'.$row->fieldToSave;
                $selectFields[] = $field.' AS '.$row->fieldToSave;
                $selectFields[] = $row->fieldToSearch.' AS '.$row->field;
            } else {
                // logger($row->field.' '.$row->fieldToSave);
                $field = isset($row->fieldToSearch) ? $row->fieldToSearch : 'data.'.$row->field;
                if ($row->field == 'IsActive') $selectFields[] = DB::raw("CASE WHEN ".$field."=1 THEN 'Y' ELSE 'N' END AS ".$row->field);
                elseif ($row->field == 'Date') $selectFields[] = DB::raw("DATE_FORMAT(".$field.", '%Y-%m-%d') AS ".$row->field);
                else $selectFields[] = DB::raw($field.' AS '.$row->field);                
            }
        }


        // ########### sorting ####################################################################
        if ($defaultSort == 'Name') $defaultSort = 'data.Name';
        elseif (strpos($defaultSort,'Name') < 1) $defaultSort = 'data.'.$defaultSort;
        if ($request->query->has('sort')) $sort = returnDataField($request->query('sort')); else $sort = $defaultSort;
        foreach($fields as $row) {
            if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
            if ($sort == $row->field) {
                $field = isset($row->field) ? $row->field : 'data.'.$row->field;
                $sort = $field;
                break;
            }
        }


        // ########### pagination declaration ####################################################################
        $page = $request->query->has('page') ? $request->query('page') : 1;
        $size = $request->query->has('size') ? $request->query('size') : 20;
        $sort = $request->query->has('sort') ? $sort : $defaultSort;

        // ########### search ####################################################################
        if (in_array($sort, ['Date','data.Date','data.UpdatedAt','data.CreatedAt','UpdatedAt','CreatedAt'])) $sortAsc = 'desc'; else $sortAsc = 'asc';
        $sorttype = $request->query->has('sorttype') ? $request->query('sorttype') : $sortAsc;
        if (!$sort) $sort = $defaultSort;
        $stringSearch=null;
        foreach($fields as $row) {
            if (gettype($row) == 'array') $row = json_decode(json_encode($row), FALSE);
            if ($row->field == 'Action') continue;
            if (isset($row->hide)) if ($row->hide) continue;
            $field = !isset($row->fieldToSearch) ? 'data.'.$row->field : $field = $row->fieldToSearch;
            if ($request->has($field)) $data = $data->where($field,'LIKE',$request->query($field)[0].'%');                
            if ($request->has('search')) $stringSearch = ($stringSearch ? $stringSearch." OR " : "").$field." LIKE '%".$request->query('search')."%'";
        }
        if ($stringSearch) $data = $data->whereRaw("(".$stringSearch.")");
        // dd($stringSearch);


        // ########### company filter ####################################################################
        $found = '';
        if (substr($table,0,3) != 'sys') {
            $tmp = json_decode($company->ModuleGlobal);
            if ($found == '' && $tmp) $found = companyMultiModuleFound($tmp, $table, 'Global');
            $tmp = json_decode($company->ModuleGroup);
            if ($found == '' && $tmp) $found = companyMultiModuleFound($tmp, $table, 'Group');
            
            $criteriaCompany = companyMultiModuleCriteria($found, $company, 'Company');
            
            if ($criteriaCompany) $data->whereRaw($criteriaCompany);
        }

        // ########### server side return ####################################################################
        $data = $data->select($selectFields)->whereRaw('data.GCRecord IS NULL')->orderBy($sort, $sorttype)->limit(500)->paginate($size);        
        $data = collect($data);
        $data = [
            'data' => $data['data'],
            // 'fields' => $returnfield,
            'meta' => [
                'current_page' => $data['current_page'],
                'from' => $data['from'],
                'last_page' => $data['last_page'],
                'path' => $data['path'],
                'per_page' => $data['per_page'],
                'to' => $data['to'],
                'total' => $data['total'],
            ],
            'links' => [
                'first' => $data['first_page_url'],
                'last' => $data['last_page_url'],
                'next' => $data['next_page_url'],
                'previous' => $data['prev_page_url'],
            ],
        ];
        return json_decode(json_encode($data), FALSE);
    }

    public function detail($table, $data, $Oid)
    {
        $source = $this->httpService->get("/portal/api/development/table/phpfielddetail?code=".$table);
        $data = $data->with($source->tableDetail);
        $data = $data->findOrFail($Oid);
        
        foreach ($source->fieldCombo as $row)  {
            //combo1
            $data->{$row->Code.'Name'} = $data->{$row->Code.'Obj'} ? $data->{$row->Code.'Obj'}->Name : null;
            unset($data->{$row->Code.'Obj'});
        }

        foreach ($source->tableDetail as $detail) {
            foreach ($data->{$detail} as $row) {
                foreach ($source->tableField as $combo) {
                    if ($combo->TableParentName == $detail) {
                        $row->{$combo->Code.'Name'} = $row->{$combo->Code.'Obj'} ? $row->{$combo->Code.'Obj'}->Name : null;
                        unset($row->{$combo->Code.'Obj'});
                    }
                }
            }
        }

        if ($source->table->IsUsingModuleEmail) {

        }
        if ($source->table->IsUsingModuleComment) {
            foreach($data->Comments as $row) {
                $row->UserName = $row->UserObj ? $row->UserObj->Name : null;
                $row->UserObj = [
                    'Oid' => $row->UserObj->Oid,
                    'Name' => $row->UserObj->Name,
                    'Image' => $row->UserObj->Image,
                ];                
            }
        }
        if ($source->table->IsUsingModuleApproval) {
            foreach ($data->Approvals as $row) {
                $row->NextUserName = $row->NextUserObj ? $row->NextUserObj->Name : null;
                $row->UserName = $row->UserObj ? $row->UserObj->Name : null;            
            }
        }
        if ($source->table->IsUsingModuleImage) {
            
        }        
        if ($source->table->IsUsingModuleFile) {
            
        }

        return $data;
    }

    public function save($table, $data, $request, $disabledField = [], $dataParent = null)
    {
        //field type
        //validation require
        //permission
        $company = Auth::user()->CompanyObj ?: company();
        $source = $this->httpService->get("/portal/api/development/table/phpfieldsave?code=".$table);

        //parent
        if ($dataParent) {
            $data->Company = $dataParent->Company;
            $data->{$source->table->APITableParentRelationshipName} = $dataParent->Oid;
        }
        
        //disabled
        $disabled = [];
        $disabled = array_merge($disabled, disabledFieldsForEdit());
        if ($disabledField != []) $disabled = array_merge($disabled, $disabledField);
        if (isset($source->tableChildren)) $disabled = array_merge($disabled, $source->tableChildren);
        foreach($source->fieldCombo as $row) $disabled = array_merge($disabled, [ $row->FieldName.'Obj', $row->FieldName.'Name' ]);
        foreach($source->tableImage as $row) $disabled = array_merge($disabled, [ $row->Code ]);
        
        //set value
        foreach ($request as $field => $key) {
            if (in_array($field, $disabled)) continue;
            if ($request->{$field} == '0') $request->{$field} = 0;
            if ($request->{$field} == '1') $request->{$field} = 1;
            if ($request->{$field} == 'true') $request->{$field} = 1;
            if ($request->{$field} == 'false') $request->{$field} = 0;
            
            $data->{$field} = $request->{$field};
        }

        //company
        if (isset($request->Company)) $data->Company = $request->Company; //kdg tdk mau ke set dg yg diisi
        if (isset($request->Type) && $table != 'mstbusinesspartner') $data->Type = $request->Type; //kdg tdk mau ke set dg yg diisi

        //image
        foreach($source->tableImage as $row) {
            if (isset($request->{$row->Code}->base64)) 
            $data->{$row->Code} = $this->fileCloudService->uploadImage($request->{$row->Code}, $data->{$row->Code});
        }
        
        //defaulvalue
        $codeAutoGenerate = false;
        foreach ($data->getAttributes() as $field => $key) {
            if ($field == 'Company'          && !isset($data->{$field})) $data->{$field} = $company->Oid;
            if ($field == 'Date'             && !isset($data->{$field})) $data->{$field} = now()->addHours(company_timezone())->toDateTimeString();
            if ($field == 'ItemUnit'         && !isset($data->{$field})) $data->{$field} = $company->ItemUnit;
            if ($field == 'BusinessPartner'  && !isset($data->{$field})) $data->{$field} = $company->CustomerCash;
            if ($field == 'Status'           && !isset($data->{$field})) $data->{$field} = Status::entry()->first()->Oid;
            if ($field == 'Warehouse'        && !isset($data->{$field})) $data->{$field} = $company->POSDefaultWarehouse;
            if ($field == 'Currency'         && !isset($data->{$field})) $data->{$field} = $company->Currency;
            if ($field == 'Rate'             && !isset($data->{$field})) $data->{$field} = 1;
            if ($field == 'RateAmount'       && !isset($data->{$field})) $data->{$field} = 1;
            if ($field == 'IsActive'         && !isset($data->{$field})) $data->{$field} = 1;
            if ($field == 'Code') if ($data->{$field} == '<<Auto>>' || $data->{$field} == '' ) $codeAutoGenerate = true;
        }
        $data->save();
        
        //autogenerate
        if ($codeAutoGenerate) $data->Code = $this->autoNumberService->generate($data, $table);
        return $data;
    }

    public function delete($data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function deleteDetail($data,$request)
    {
        if ($data->count() != 0) {
            foreach ($data as $rowdb) {
                $found = false;               
                foreach ($request as $rowapi) {
                    if (isset($rowapi->Oid)) if ($rowdb->Oid == $rowapi->Oid) $found = true;
                }
                if (!$found) {
                    $detail = $data->where('Oid',$rowdb->Oid)->first();
                    $detail->delete();
                }
            }
        }
    }

    public function getIndex($data, $request, $order ='Oid') {
        try {
            $type = $request->input('type') ?: 'combo';
            if ($type == 'combo') $data = $data->addSelect('Oid','Code','Name');
            $data = $data->orderBy($order)->get();
            return $data;

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }   

    }
}
