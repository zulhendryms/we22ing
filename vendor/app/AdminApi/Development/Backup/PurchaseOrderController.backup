<?php

namespace App\AdminApi\Trading\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Services\HttpService;

use App\Core\Trading\Entities\PurchaseRequest;
use App\Core\Trading\Entities\PurchaseRequestDetail;
use App\Core\Trading\Entities\PurchaseOrder;
use App\Core\Trading\Entities\PurchaseOrderDetail;
use App\Core\Trading\Entities\PurchaseOrderLog;
use App\Core\Trading\Entities\PurchaseDelivery;
use App\Core\Trading\Entities\PurchaseDeliveryDetail;
use App\Core\Trading\Entities\PurchaseInvoice;
use App\Core\Trading\Entities\PurchaseInvoiceDetail;
use App\Core\Master\Entities\Department;
use App\Core\Accounting\Entities\CashBank;
use App\Core\Accounting\Entities\CashBankDetail;
use App\Core\Internal\Services\AutoNumberService;
use App\Core\Internal\Entities\Status;
use App\AdminApi\Pub\Controllers\PublicApprovalController;
use App\AdminApi\Pub\Controllers\PublicPostController;
use Carbon\Carbon;

class PurchaseOrderController extends Controller
{
    private $httpService;
    protected $roleService;
    private $publicPostController;
    private $publicApprovalController;
    private $autoNumberService;
    public function __construct(
        RoleModuleService $roleService,
        HttpService $httpService,
        AutoNumberService $autoNumberService
        )
    {
        $this->roleService = $roleService;
        $this->httpService = $httpService;
        $this->autoNumberService = $autoNumberService;
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
        $this->publicPostController = new PublicPostController(new RoleModuleService(new HttpService), new HttpService);
        $this->publicApprovalController = new PublicApprovalController();
    }
    
    public function fields() {    
        $fields = []; //f = 'FIELD, t = TITLE
        $fields[] = serverSideConfigField('Oid');
        $fields[] = ['w'=> 140, 'r'=>0, 't'=>'text', 'n'=>'PR', 'fs' => "data.PurchaseRequestCode"];
        $fields[] = ['w'=> 140, 'r'=>0, 't'=>'text', 'n'=>'Code', 'f' => "Code"];
        $fields[] = ['w'=> 140, 'r'=>0, 't'=>'text', 'n'=>'Date', 'f' => "CASE WHEN Type='PurchaseRequest' THEN data.PurchaseRequestDate ELSE Date END AS Date"];
        $fields[] = ['w'=> 140, 'r'=>0, 't'=>'text', 'n'=>'Type', 'f' => "data.Type"];
        $fields[] = ['w'=> 180, 'r'=>0, 't'=>'combo', 'n'=>'Department', 'fs'=>'Department.Name'];
        $fields[] = ['w'=> 140, 'r'=>0, 't'=>'text', 'n'=>'TotalAmount', 'f' => "CASE WHEN Type='PurchaseRequest' THEN data.TotalAmount1 ELSE data.TotalAmount END AS TotalAmount"];
        $fields[] = ['w'=> 160, 'r'=>0, 't'=>'combo', 'n'=>'Status', 'fs'=>'Status.Name'];
        // $fields[] = ['w'=> 180, 'r'=>0, 't'=>'text', 'n'=>'Purchaser', 'f'=> 'Purchaser.Name'];
        // $fields[] = ['w'=> 180, 'r'=>0, 't'=>'text', 'n'=>'PrimeMover', 'f'=> 'TruckingPrimeMover.Name'];
        return $fields;
    }

    public function config(Request $request)
    {
        // $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=PurchaseOrder');
        $fields = serverSideFields($this->fields(),false,true);
        if (gettype($fields) == 'array') $fields = json_decode(json_encode($fields), FALSE);
        $fields[0]->cellRenderer = 'actionCell';
        $fields[0]->topButton =[
            [
                'name' => 'Add Purchase Request',
                'icon' => 'PlusIcon',
                'type' => 'open_form',
                'url' => "purchaseorder/form?type=PurchaseRequest"
            ],
            // [
            // 'name' => 'Add Purchase Order',
            // 'icon' => 'PlusIcon',
            // 'type' => 'open_form',
            // 'url' => "purchaseorder/form?type=PurchaseOrder"
            // ]
        ];
        return $fields;
    }

    public function list(Request $request)
    {
        $user = Auth::user();
        // $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=PurchaseOrder');
        $fields = serverSideFields($this->fields(),false,true);
        // dd($fields);
        $data = DB::table('trdpurchaseorder as data') //jointable
            ->leftJoin('company AS Company', 'Company.Oid', '=', 'data.Company')
            ->leftJoin('mstbusinesspartner AS BusinessPartner', 'BusinessPartner.Oid', '=', 'data.BusinessPartner')
            ->leftJoin('accaccount AS Account', 'Account.Oid', '=', 'data.Account')
            ->leftJoin('mstcurrency AS Currency', 'Currency.Oid', '=', 'data.Currency')
            ->leftJoin('sysstatus AS Status', 'Status.Oid', '=', 'data.Status')
            ->leftJoin('mstemployee AS Employee', 'Employee.Oid', '=', 'data.Employee')
            ->leftJoin('mstwarehouse AS Warehouse', 'Warehouse.Oid', '=', 'data.Warehouse')
            ->leftJoin('mstproject AS Project', 'Project.Oid', '=', 'data.Project')
            ->leftJoin('mstpaymentterm AS PaymentTerm', 'PaymentTerm.Oid', '=', 'data.PaymentTerm')
            ->leftJoin('msttax AS Tax', 'Tax.Oid', '=', 'data.Tax')
            ->leftJoin('trdpurchaserequest AS PurchaseRequest', 'PurchaseRequest.Oid', '=', 'data.PurchaseRequest')
            ->leftJoin('user AS Requestor', 'Requestor.Oid', '=', 'data.Requestor')
            ->leftJoin('mstemployee AS Requestor1', 'Requestor1.Oid', '=', 'data.Requestor1')
            ->leftJoin('mstemployee AS Requestor2', 'Requestor2.Oid', '=', 'data.Requestor2')
            ->leftJoin('mstemployee AS Requestor3', 'Requestor3.Oid', '=', 'data.Requestor3')
            ->leftJoin('mstbusinesspartner AS Supplier1', 'Supplier1.Oid', '=', 'data.Supplier1')
            ->leftJoin('mstbusinesspartner AS Supplier2', 'Supplier2.Oid', '=', 'data.Supplier2')
            ->leftJoin('mstbusinesspartner AS Supplier3', 'Supplier3.Oid', '=', 'data.Supplier3')
            ->leftJoin('mstpaymentterm AS Supplier1PaymentTerm', 'Supplier1PaymentTerm.Oid', '=', 'data.Supplier1PaymentTerm')
            ->leftJoin('mstpaymentterm AS Supplier2PaymentTerm', 'Supplier2PaymentTerm.Oid', '=', 'data.Supplier2PaymentTerm')
            ->leftJoin('mstpaymentterm AS Supplier3PaymentTerm', 'Supplier3PaymentTerm.Oid', '=', 'data.Supplier3PaymentTerm')
            ->leftJoin('mstdepartment AS Department', 'Department.Oid', '=', 'data.Department')
            ->leftJoin('user AS Purchaser', 'Purchaser.Oid', '=', 'data.Purchaser')
            ->leftJoin('user AS User', 'User.Oid', '=', 'data.User')
            ;
        if (!$user->IsAccessAllPurchaseRequest) $data = $data->where('Department.Purchaser',$user->Oid);
        $type = $request->has('Type') ? $request->input('Type') : 'All';
        if ($type == 'Entry') $data = $data->whereIn('Status.Code',['entry','requested']);
        if ($type == 'Submit') $data = $data->whereIn('Status.Code',['submit']);
        if ($type == 'Posted') $data = $data->whereIn('Status.Code',['posted','post']);
        if ($type == 'Rejected') $data = $data->whereIn('Status.Code',['rejected','reject']);
        if ($type == 'Cancelled') $data = $data->whereIn('Status.Code',['cancel']);
        $data = serverSideQueryJSon($data, $fields, $request, 'trdpurchaseorder', 'CreatedAt');
        $role = $this->roleService->list('PurchaseOrder'); //rolepermission
        foreach ($data as $row) {
            $tmp = PurchaseOrder::findOrFail($row->Oid);
            $row->Action = $this->action($tmp);
            $row->Role = $this->generateRole($row, $role);
        }
        return serverSideReturn($data, $fields);
    }


    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = PurchaseOrder::whereNull('GCRecord');

            $data = $data->orderBy('Oid')->get();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    private function showSub($Oid)
    {
        $data = PurchaseOrder::with('Details','Images','Files','Comments')->findOrFail($Oid);
        $data->CompanyName = $data->CompanyObj ? $data->CompanyObj->Code : null;
        $data->BusinessPartnerName = $data->BusinessPartnerObj ? $data->BusinessPartnerObj->Name : null;
        $data->AccountName = $data->AccountObj ? $data->AccountObj->Name : null;
        $data->CurrencyName = $data->CurrencyObj ? $data->CurrencyObj->Name : null;
        $data->StatusName = $data->StatusObj ? $data->StatusObj->Name : null;
        $data->EmployeeName = $data->EmployeeObj ? $data->EmployeeObj->Name : null;
        $data->WarehouseName = $data->WarehouseObj ? $data->WarehouseObj->Name : null;
        $data->ProjectName = $data->ProjectObj ? $data->ProjectObj->Name : null;
        $data->PaymentTermName = $data->PaymentTermObj ? $data->PaymentTermObj->Name : null;
        $data->TaxName = $data->TaxObj ? $data->TaxObj->Name : null;
        $data->PurchaseRequestName = $data->PurchaseRequestObj ? $data->PurchaseRequestObj->Name : null;
        $data->RequestorName = $data->RequestorObj ? $data->RequestorObj->Name : null;
        $data->Requestor1Name = $data->Requestor1Obj ? $data->Requestor1Obj->Name : null;
        $data->Requestor2Name = $data->Requestor2Obj ? $data->Requestor2Obj->Name : null;
        $data->Requestor3Name = $data->Requestor3Obj ? $data->Requestor3Obj->Name : null;
        $data->Supplier1Name = $data->Supplier1Obj ? $data->Supplier1Obj->Name : null;
        $data->Supplier2Name = $data->Supplier2Obj ? $data->Supplier2Obj->Name : null;
        $data->Supplier3Name = $data->Supplier3Obj ? $data->Supplier3Obj->Name : null;
        $data->Supplier1PaymentTermName = $data->Supplier1PaymentTermObj ? $data->Supplier1PaymentTermObj->Name : null;
        $data->Supplier2PaymentTermName = $data->Supplier2PaymentTermObj ? $data->Supplier2PaymentTermObj->Name : null;
        $data->Supplier3PaymentTermName = $data->Supplier3PaymentTermObj ? $data->Supplier3PaymentTermObj->Name : null;
        $data->DepartmentName = $data->DepartmentObj ? $data->DepartmentObj->Name : null;
        $data->PurchaserName = $data->PurchaserObj ? $data->PurchaserObj->Name : null;
        $data->UserName = $data->UserObj ? $data->UserObj->Name : null;
        $data->Action =$this->action($data);

        $data->Logs = $data->Logs->sortBy('CreatedAt');
        foreach ($data->Logs as $row) {
            $row->NextUserName = $row->NextUserObj ? $row->NextUserObj->Name : null;
            $row->UserName = $row->UserObj ? $row->UserObj->Name : null;
        }

        foreach($data->Comments as $row) {
            $row->UserObj = [
                'Oid' => $row->UserObj->Oid,
                'Name' => $row->UserObj->Name,
                'Image' => $row->UserObj->Image,
              ];
        }

        $data->Approvals = $data->Approvals->where('Action','!=','Request')->sortBy('Sequence');
        foreach ($data->Approvals as $row) {
            $row->NextUserName = $row->NextUserObj ? $row->NextUserObj->Name : null;
            $row->UserName = $row->UserObj ? $row->UserObj->Name : null;
        }

        $data->Details = $data->Details->sortBy('Sequence');
        foreach ($data->Details as $row) {
            $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
            $row->ItemUnitName = $row->ItemUnitObj ? $row->ItemUnitObj->Name : null;
            $row->CostCenterName = $row->CostCenterObj ? $row->CostCenterObj->Name : null;
            if ($row->PurchaseRequestDetail) {
                $tmp = PurchaseRequestDetail::with('PurchaseRequestObj')->where('Oid',$row->PurchaseRequestDetail)->first();
                $row->PurchaseRequestDetailName = $tmp ? $tmp->PurchaseRequestObj->Code : null;
            }
            
        }

        return $data;
    }

    public function show(PurchaseOrder $data)
    {
        try {
            return $this->showSub($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        try {
            if (!$Oid) $data = new PurchaseOrder();
            else $data = PurchaseOrder::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {

                $disabled = array_merge(disabledFieldsForEdit(), ['BusinessPartnerName','BusinessPartnerObj', 'AccountName','AccountObj', 'CurrencyName','CurrencyObj', 'StatusName','StatusObj', 'EmployeeName','EmployeeObj', 'WarehouseName','WarehouseObj', 'ProjectName','ProjectObj', 'PaymentTermName','PaymentTermObj', 'TaxName','TaxObj', 'PurchaseRequestName','PurchaseRequestObj', 'RequestorName','RequestorObj', 'Requestor1Name','Requestor1Obj', 'Requestor2Name','Requestor2Obj', 'Requestor3Name','Requestor3Obj', 'TruckingPrimeMoverName','TruckingPrimeMoverObj', 'Supplier1Name','Supplier1Obj', 'Supplier2Name','Supplier2Obj', 'Supplier3Name','Supplier3Obj', 'Supplier1PaymentTermName','Supplier1PaymentTermObj', 'Supplier2PaymentTermName','Supplier2PaymentTermObj', 'Supplier3PaymentTermName','Supplier3PaymentTermObj','DepartmentName','DepartmentObj', 'PurchaserName','PurchaserObj','UserName','UserObj','Logs', 'Details','Amounts','Files','Comments']);;                
                if (!$data->Oid) {
                    $request->Status = Status::where('Code','entry')->first()->Oid; 
                }
                $data = serverSideSave($data, $request, $disabled);
                $data = serverSideDefaultValue($data,['Status','Date','Warehouse','Currency','Rate']);
                if (!$data->Code || $data->Code == '<<Auto>>') $data->Code = now()->format('ymdHis').'-'.str_random(3);
                if (!isset($data->Type)) $data->Type = isset($request->Type) ? $request->Type : 'PurchaseRequest';
                if (isset($request->Company)) $data->Company = $request->Company;
                if (isset($data->PaymentTerm)) $data->DueDate = addPaymentTermDueDate($data->Date, $data->PaymentTerm);
                if (isset($data->SupplierChosen)) {
                    $data->BusinessPartner = $data->{'Supplier'.$data->SupplierChosen};
                    $data->DiscountAmount = $data->{'DiscountAmount'.$data->SupplierChosen};
                }
                $data->save();
                if (!$data->PurchaseRequestCode || $data->PurchaseRequestCode == '<<Auto>>') $data->PurchaseRequestCode = $this->autoNumberService->generate($data, 'trdpurchaseorder','PurchaseRequestCode');
                
                $this->publicPostController->sync($data, 'PurchaseOrder');
                if (isset($data->Department) && !in_array($data->StatusObj->Code, ['submit','post','posted','cancel'])) $this->publicApprovalController->formCreate($data, 'PurchaseOrder');
                
                if (isset($request->Details)) {
                    $disabled=array_merge(disabledFieldsForEdit(), ['AccountName','AccountObj', 'TaxName','TaxObj', 'ItemName','ItemObj', 'ItemUnitName','ItemUnitObj', 'StatusName','StatusObj', 'PurchaseRequestDetailName','PurchaseRequestDetailObj','CostCenterName','CostCenterObj','TruckingPrimeMoverName','TruckingPrimeMoverObj']);;
                
                    serverSideDeleteDetail($data->Details, $request->Details);
                    $sequence = (PurchaseOrderDetail::where('PurchaseOrder',$data->Oid)->max('Sequence') ?: 0) + 1;
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) $detail = PurchaseOrderDetail::findOrFail($row->Oid);
                        else $detail = new PurchaseOrderDetail();
                        $detail->Company = $data->Company;
                        $detail->PurchaseOrder = $data->Oid;
                        if (!isset($detail->Sequence)) {
                            $detail->Sequence = $sequence;
                            $sequence = $sequence + 1;
                        }
                        $detail = serverSideSave($detail, $row, $disabled);
                        if (isset($data->SupplierChosen)) $detail->Price = $detail->{'Price'.$data->SupplierChosen};
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                $totalAmount = 0;
                $this->calculateTotalAmount($data);
                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('PurchaseOrder'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Role = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(PurchaseOrder $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }    

    public function presearch(Request $request) {
        return [
            [
                'fieldToSave' => "Type",
                'hideLabel' => true,
                'type' => "combobox",
                'column' => "1/3",
                'source' => [],
                'store' => "",
                'source' => [
                    ['Oid' => 'All', 'Name' => 'All'],
                    ['Oid' => 'Entry', 'Name' => 'Entry'],
                    ['Oid' => 'Submit', 'Name' => 'Submit'],
                    ['Oid' => 'Posted', 'Name' => 'Posted'],
                    ['Oid' => 'Cancelled', 'Name' => 'Cancelled'],
                    ['Oid' => 'Rejected', 'Name' => 'Rejected'],
                ],
                'defaultValue' => "All"
            ],
            [
                'type' => 'action',
                'column' => '1/3'
            ]
        ];
    }

    public function action(PurchaseOrder $data)
    {
        $url = 'purchaseorder';
        $pra = 'paymentrequest';
        $actionOpen = [
            'name' => 'Open',
            'icon' => 'ViewIcon',
            'type' => 'open_url',
            'url' => $url.'/form?item={Oid}&type='.($data->Type ?: 'PurchaseRequest'),
        ];
        $actionEntry = [
            'name' => 'Change to ENTRY',
            'icon' => 'UnlockIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/unpost',
        ];
        $actionPosted = [
            'name' => 'Change to POSTED',
            'icon' => 'CheckIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/post',
        ];
        $actionCancelled = [ 
            'name' => 'Change to Cancelled',
            'icon' => 'XIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/cancelled',
        ];
        $actionConvertToPurchaseDelivery = [
            'name' => 'Convert to PurchaseDelivery',
            'icon' => 'ZapIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/convert1',
        ];
        $actionConvertToPurchaseInvoice = [
            'name' => 'Convert to PurchaseInvoice',
            'icon' => 'ZapIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/convert2',
        ];
        $actionPrintprereportpo = [
            'name' => 'Print Purchase Order',
            'icon' => 'PrinterIcon',
            'type' => 'open_report',
            'get' => 'prereport/'.$url.'?oid={Oid}&report=purchaseorder',
            'afterRequest' => 'init'
        ];
        $printprereportpr = [
            'name' => 'Print Purchase Request',
            'icon' => 'PrinterIcon',
            'type' => 'open_report',
            'get' => 'prereport/'.$url.'?oid={Oid}&report=purchaserequest',
            'afterRequest' => 'init'
        ];
        $printprereportpra = [
            'name' => 'Print Payment Request',
            'icon' => 'PrinterIcon',
            'type' => 'open_report',
            'get' => 'prereport/'.$url.'?oid={Oid}&report='.$pra,
            'afterRequest' => 'init'
        ];
        $actionDelete = [ 
            'name' => 'Delete',
            'icon' => 'TrashIcon',
            'type' => 'confirm',
            'delete' => $url.'/{Oid}'
        ];
        $actionSubmit = $this->publicApprovalController->formAction($data, 'PurchaseOrder','submit');
        $actionRequest = $this->publicApprovalController->formAction($data, 'PurchaseOrder','request');
        $actionCancel = [
            'name' => 'Cancel',
            'icon' => 'ArrowUpCircleIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/cancel',
            'afterRequest' => 'apply'
        ];
        $return = [];
        switch ($data->Status ? $data->StatusObj->Code : "entry") {
            case "":
                $return[] = $actionPosted;
                $return[] = $actionOpen;
                // $return[] = $actionDelete;
                break;
            case "request":
                $return[] = $actionEntry;
                $return[] = $actionSubmit;
                break;
            case "entry":
                $return[] = $actionRequest;
                $return[] = $actionSubmit;
                // $return[] = $actionDelete;
                $return[] = $actionCancel;
                $return[] = $printprereportpr;
                break;
            case "submit":
                $return = $this->publicApprovalController->formAction($data, 'PurchaseOrder','approval');
                $return[] = $actionEntry;
                $return[] = $printprereportpr;
                break;
            case "posted":
                $return[] = $actionEntry;
                $return[] = $actionConvertToPurchaseDelivery;
                $return[] = $actionConvertToPurchaseInvoice;
                $return[] = $actionPrintprereportpo;
                $return[] = $printprereportpr;
                break;
        }
        return $return;
    }

    private function calculateTotalAmount(PurchaseOrder $data) {
        $totalAmount = 0;
        $totalAmount1 = 0;
        $totalAmount2 = 0;
        $totalAmount3 = 0;
        foreach ($data->Details as $row) {
            $totalAmount += ($row->Quantity ?: 0) * ($row->Price ?: 0);
            $totalAmount1 += ($row->Quantity ?: 0) * ($row->Price1 ?: 0);
            $totalAmount2 += ($row->Quantity ?: 0) * ($row->Price2 ?: 0);
            $totalAmount3 += ($row->Quantity ?: 0) * ($row->Price3 ?: 0);
        }
        $data->SubtotalAmount = $totalAmount;
        $data->TotalAmount = $data->SubtotalAmount + $data->AdditionalAmount - $data->DiscountAmount;
        $data->Supplier1Amount = $totalAmount1 - $data->DiscountAmount1;
        $data->Supplier2Amount = $totalAmount2 - $data->DiscountAmount2;
        $data->Supplier3Amount = $totalAmount3 - $data->DiscountAmount3;
        $data->TotalAmountWording = convert_number_to_words($data->TotalAmount);
        $data->save();
    }

    public function statusUnpost(PurchaseOrder $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::where('Code', 'Entry')->first()->Oid;
                $data->save();
            });

            return response()->json(
                $data,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function statusPost(PurchaseOrder $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::where('Code', 'Posted')->first()->Oid;
                $data->Type = 'PurchaseOrder';
                $data->Code = $this->autoNumberService->generate($data, 'trdpurchaseorder');
                $data->save();
            });

            return response()->json(
                $data,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function cancelled(PurchaseOrder $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::cancelled()->first()->Oid;
                $data->save();
            });

            return response()->json(
                $data,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function convertToPurchaseDelivery(PurchaseOrder $data)
    {
        $tmp = PurchaseOrderDetail::where('PurchaseOrder',$data->Oid)->pluck('Oid');        
        $check = PurchaseDeliveryDetail::whereIn('PurchaseOrderDetail',$tmp)->get();
        if ($check->count() > 0) throw new \Exception("Purchase Order has already Purchase Deliver");
        $check = PurchaseInvoiceDetail::whereIn('PurchaseOrderDetail',$tmp)->get();
        if ($check->count() > 0) throw new \Exception("Purchase Order has already Purchase Invoice");        
        $check = CashBankDetail::whereIn('PurchaseOrderDetail',$tmp)->get();
        if ($check->count() > 0) throw new \Exception("Purchase Order has already Cash Bank");

        $purchaseDelivery = new PurchaseDelivery();
        try {
            DB::transaction(function () use ($purchaseDelivery, &$data) {
                $purchaseDelivery->PurchaseOrder = $data->Oid;
                $purchaseDelivery->Company = Auth::user()->Company;
                $purchaseDelivery->Code = '<<Auto>>';
                $purchaseDelivery->Date = Carbon::now();
                $purchaseDelivery->Account = $data->Account;
                $purchaseDelivery->Currency = $data->Currency;
                $purchaseDelivery->BusinessPartner = $data->BusinessPartner;
                $purchaseDelivery->Quantity = $data->Quantity;
                $purchaseDelivery->Employee = $data->Employee;
                $purchaseDelivery->Warehouse = $data->Warehouse;
                $purchaseDelivery->DiscountAmount = $data->DiscountAmount;
                $purchaseDelivery->SubtotalAmount = $data->SubtotalAmount;
                $purchaseDelivery->TotalAmount = $data->TotalAmount;
                $purchaseDelivery->Rate = $data->Rate;
                $purchaseDelivery->Status = Status::entry()->first()->Oid;
                $purchaseDelivery->save();
                $purchaseDelivery->Code = $this->autoNumberService->generate($purchaseDelivery->Oid, 'trdpurchasedelivery');
                $purchaseDelivery->save();

                $data->IsConvertPD = true;
                $data->save();

                foreach ($data->Details as $row) {
                    $detail = new PurchaseDeliveryDetail();
                    $detail->Company = $purchaseDelivery->Company;
                    $detail->PurchaseDelivery = $purchaseDelivery->Oid;
                    $detail->Sequence = $row->Sequence;
                    $detail->PurchaseOrderDetail = $row->Oid;
                    $detail->Item = $row->Item;
                    $detail->Quantity = $row->Quantity;
                    $detail->Price = $row->Price;
                    $detail->Note = $row->Note;
                    $detail->save();

                    $row->QuantityDelivered = $row->Quantity;
                    $row->save();
                }
                if (!$purchaseDelivery) throw new \Exception('Data is failed to be saved');
            });

            return response()->json(
                $purchaseDelivery,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function convertToPurchaseInvoice(PurchaseOrder $data)
    {
        $tmp = PurchaseOrderDetail::where('PurchaseOrder',$data->Oid)->pluck('Oid');        
        $check = PurchaseDeliveryDetail::whereIn('PurchaseOrderDetail',$tmp)->get();
        if ($check->count() > 0) throw new \Exception("Purchase Order has already Purchase Deliver");
        $check = PurchaseInvoiceDetail::whereIn('PurchaseOrderDetail',$tmp)->get();
        if ($check->count() > 0) throw new \Exception("Purchase Order has already Purchase Invoice");        
        $check = CashBankDetail::whereIn('PurchaseOrderDetail',$tmp)->get();
        if ($check->count() > 0) throw new \Exception("Purchase Order has already Cash Bank");

        $purchaseInvoice = new PurchaseInvoice();
        try {
            DB::transaction(function () use ($purchaseInvoice, &$data) {
                $purchaseInvoice->PurchaseOrder = $data->Oid;
                $purchaseInvoice->Company = Auth::user()->Company;
                $purchaseInvoice->Code = '<<Auto>>';
                $purchaseInvoice->Date = Carbon::now();
                $purchaseInvoice->Account = $data->Account;
                $purchaseInvoice->Currency = $data->Currency;
                $purchaseInvoice->BusinessPartner = $data->BusinessPartner;
                $purchaseInvoice->Quantity = $data->Quantity;
                $purchaseInvoice->Employee = $data->Employee;
                $purchaseInvoice->PaymentTerm = $data->PaymentTerm;
                $purchaseInvoice->Warehouse = $data->Warehouse;
                $purchaseInvoice->Status = $data->Status;
                $purchaseInvoice->DiscountAmount = $data->DiscountAmount;
                $purchaseInvoice->SubtotalAmount = $data->SubtotalAmount;
                $purchaseInvoice->TotalAmount = $data->TotalAmount;
                $purchaseInvoice->Rate = $data->Rate;
                $purchaseInvoice->Status = Status::entry()->first()->Oid;
                $purchaseInvoice->save();
                $purchaseInvoice->Code = $this->autoNumberService->generate($purchaseInvoice->Oid, 'trdpurchaseinvoice');
                $purchaseInvoice->save();

                $data->IsConvertPI = true;
                $data->save();

                $details = [];
                foreach ($data->Details as $row) {
                    $detail = new PurchaseInvoiceDetail();
                    $detail->Company = $purchaseInvoice->Company;
                    $detail->PurchaseInvoice = $purchaseInvoice->Oid;
                    $detail->Sequence = $row->Sequence;
                    $detail->PurchaseOrderDetail = $row->Oid;
                    $detail->Item = $row->Item;
                    $detail->Price = $row->Price;
                    $detail->Quantity = $row->Quantity;
                    $detail->Note = $row->Note;
                    $detail->save();

                    $totalAmount = $row->Quantity * $row->Price;

                    $row->QuantityInvoiced = $row->Quantity;
                    $row->save();
                }
                $purchaseInvoice->SubtotalAmount = $totalAmount;
                $purchaseInvoice->TotalAmount = $purchaseInvoice->SubtotalAmount + $purchaseInvoice->AdditionalAmount - $purchaseInvoice->DiscountAmount;
                $purchaseInvoice->save();
                if (!$purchaseInvoice) throw new \Exception('Data is failed to be saved');
            });
            return response()->json(
                $purchaseInvoice,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }


    public function partialRequest(Request $request)
    {
        $query = "
            SELECT prd.Oid, pr.Code, CONCAT(i.Name,' - ',i.Code) AS Name,
            (IFNULL(prd.Quantity,0) - IFNULL(prd.QuantityOrdered,0)) AS Quantity, c.Code AS CurrencyCode,
            (CASE WHEN pr.SupplierChosen = 1 THEN prd.Price1
            WHEN pr.SupplierChosen = 2 THEN prd.Price2
            WHEN pr.SupplierChosen = 3 THEN prd.Price3 END) AS Price
            FROM trdpurchaserequest pr
            LEFT OUTER JOIN trdpurchaserequestdetail prd ON pr.Oid = prd.PurchaseRequest
            LEFT OUTER JOIN mstitem i ON prd.Item = i.Oid
            LEFT OUTER JOIN mstcurrency c ON c.Oid = pr.Currency
            WHERE (IFNULL(prd.Quantity,0) - IFNULL(prd.QuantityOrdered,0)) > 0
            AND pr.GCRecord IS NULL 
            AND pr.Oid NOT IN ({$request->input('exception')})
            AND (CASE WHEN pr.SupplierChosen = 1 THEN pr.Supplier1
            WHEN pr.SupplierChosen = 2 THEN pr.Supplier2
            WHEN pr.SupplierChosen = 3 THEN pr.Supplier3 END) = '{$request->input('businesspartner')}'
            AND DATE_FORMAT(pr.Date, '%Y-%m-%d') <= '{$request->input('date')}'
            AND pr.Company = '{$request->input('company')}'
            AND pr.PurchaseRequestStatus = 'posted'";
            // dd($query);
            $data = DB::select($query);

        return response()->json(
            $data,
            Response::HTTP_OK
        );
    }

    public function partialRequestAdd(Request $request)
    {
        try {
            $result = [];
            DB::transaction(function () use ($request, &$result) {
                $purchaseOrder = PurchaseOrder::findOrFail($request->input('oid'));
                $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
                $string = "";
                foreach ($request as $row) {
                    $string = ($string ? $string . "," : null) . "'" . $row . "'";
                }
                $query = "SELECT prd.*, (IFNULL(prd.Quantity,0) - IFNULL(prd.QuantityOrdered,0)) AS OutstandingQuantity,
                        i.Name AS ItemName
                        pr.SupplierChosen
                        FROM trdpurchaserequest pr
                        LEFT OUTER JOIN trdpurchaserequestdetail prd ON prd.PurchaseRequest = pr.Oid
                        LEFT OUTER JOIN mstitem i ON i.Oid = prd.Item
                        WHERE (IFNULL(prd.Quantity,0) - IFNULL(prd.QuantityOrdered,0)) > 0
                        AND pr.PurchaseRequestStatus = 'posted'
                        AND pr.GCRecord IS NULL AND prd.Oid IN (" . $string . ")
                        ";
                $data = DB::select($query);

                $total = 0;
                $sequence = (PurchaseOrderDetail::where('PurchaseOrder',$data->Oid)->max('Sequence') ?: 0) + 1;
                foreach ($data as $row) {
                    $detail = new PurchaseOrderDetail();
                    $supplierChosen = $row->SupplierChosen ?: 1;                    
                    $detail->PurchaseOrder = $purchaseOrder->Oid;
                    $detail->PurchaseRequestDetail = $row->Oid;
                    $detail->Company = $row->Company;
                    $detail->Sequence = $sequence;
                    $sequence = $sequence + 1;
                    $detail->Item = $row->Item;
                    $detail->Quantity = $row->OutstandingQuantity;
                    $detail->Price = $row->{'Price' . $supplierChosen};
                    $detail->QuantityBase = $row->OutstandingQuantity;
                    $detail->ItemUnit = $row->ItemUnit;
                    $detail->SubtotalAmount = $row->OutstandingQuantity * $row->{'Price' . $supplierChosen};
                    $detail->TotalAmount = $detail->SubtotalAmount;
                    $detail->save();

                    $detail->ItemName = $row->ItemName;
                    
                    $tmp = PurchaseRequestDetail::findOrFail($row->Oid);
                    $tmp->QuantityOrdered = $tmp->Quantity;
                    $tmp->save();

                    $total += $detail->TotalAmount;
                    $result[] = $detail;
                }
                $this->calculateTotalAmount($purchaseOrder);
            });

            return response()->json(
                $result,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    private function updateQtyPurchaseRequest($string) {        
        $query = "UPDATE trdpurchaserequestdetail pod
        LEFT OUTER JOIN (
            SELECT pdd.PurchaseRequestDetail, SUM(IFNULL(pdd.Quantity,0)) AS Quantity 
            FROM trdpurchaseorderdetail pdd 
            WHERE pdd.PurchaseRequestDetail IN (" . $string . ") 
            AND pdd.GCRecord IS NULL GROUP BY pdd.PurchaseRequestDetail
        ) pdd ON pdd.PurchaseRequestDetail = pod.Oid
        SET pod.QuantityOrdered = IFNULL(pdd.Quantity,0)
        WHERE pod.Oid IN (" . $string . ")";
    if ($string != '') DB::Update($query);
    }

    private function generateRole($data, $role = null, $action = null)
    {
        if ($data instanceof PurchaseOrder) $status = $data->StatusObj->Code;
        else $status = Status::entry();
        if (!$role) $role = $this->roleService->list('PurchaseOrder');
        if (!$action) $action = $this->roleService->action('PurchaseOrder');
        return [
            'IsRead' => $role->IsRead,
            'IsAdd' => $role->IsAdd,
            'IsEdit' => $this->roleService->isAllowDelete($status, $role->IsEdit),
            'IsDelete' => 0, //$this->roleService->isAllowDelete($row->StatusObj, $role->IsDelete),
            'Cancel' => $this->roleService->isAllowCancel($status, $action->Cancel),
            'Entry' => $this->roleService->isAllowEntry($status, $action->Entry),
            'Post' => $this->roleService->isAllowPost($status, $action->Posted),
            'ViewJournal' => $this->roleService->isPosted($status, 1),
            'ViewStock' => $this->roleService->isPosted($status, 1),
            'Print' => $this->roleService->isPosted($status, 1),
        ];
    }

    public function statusEntry(PurchaseOrder $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::where('Code','entry')->first()->Oid;
                $data->save();

                $this->publicApprovalController->formApprovalReset($data);
                $this->publicPostController->sync($data, 'PurchaseOrder');

                $user = Auth::user();
                $detail = new PurchaseOrderLog();
                $detail->Company = $data->Company;
                $detail->PurchaseOrder = $data->Oid;
                $detail->Date = now()->addHours(company_timezone())->toDateTimeString();
                $detail->User = $user->Oid;
                $detail->Type = 'Entry';
                $detail->NextUser = null;
                $detail->save();
            });

            return response()->json(
                $data,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function statusCancel(PurchaseOrder $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->Status = Status::where('Code','cancel')->first()->Oid;
                $data->save();
                $this->publicPostController->sync($data, 'PurchaseOrder');

                $user = Auth::user();
                $detail = new PurchaseOrderLog();
                $detail->Company = $data->Company;
                $detail->PurchaseOrder = $data->Oid;
                $detail->Date = now()->addHours(company_timezone())->toDateTimeString();
                $detail->User = $user->Oid;
                $detail->Type = 'Canceled';
                $detail->NextUser = null;
                $detail->save();
            });

            return response()->json(
                $data,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }    
    
}
