<?php

namespace App\AdminApi\Trading\Controllers;


use Illuminate\Http\Request;
use Illuminate\Http\Response;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Trading\Entities\PurchaseInvoice;
use App\Core\Trading\Entities\PurchaseInvoiceDetail;
use App\Core\POS\Entities\ETicket;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Services\HttpService;
use App\Core\Accounting\Entities\Account;
use App\Core\Internal\Entities\Status;
use App\Core\Trading\Entities\StockTransfer;
use App\Core\Trading\Entities\StockTransferDetail;
use App\Core\Trading\Resources\PurchaseInvoiceResource;
use App\Core\Trading\Resources\PurchaseInvoiceCollection;
use App\Core\Accounting\Services\PurchaseInvoiceService;
use App\Core\Internal\Services\ExportExcelService;
use Maatwebsite\Excel\Excel;
use Carbon\Carbon;

use Validator;

class PurchaseInvoiceFormController extends Controller
{
    private $httpService;
    protected $roleService;
    protected $PurchaseInvoiceService;
    protected $excelImportService;
    protected $excelExportService;
    public function __construct(
        PurchaseInvoiceService $PurchaseInvoiceService,
        RoleModuleService $roleService,
        HttpService $httpService,
        Excel $excelImportService,
        ExportExcelService $excelExportService
    ) {
        $this->purchaseInvoiceService = $PurchaseInvoiceService;
        $this->roleService = $roleService;
        $this->httpService = $httpService;
        $this->httpService->baseUrl('http://api1.ezbooking.co:888')->json();
        $this->excelImportService = $excelImportService;
        $this->excelExportService = $excelExportService;
    }


    public function config(Request $request)
    {
        $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=PurchaseInvoice');
        foreach ($fields as &$row) { //combosource
            if ($row->headerName == 'BusinessPartner') $row->source = 
            elseif ($row->headerName == 'Employee') $row->source = comboselect('mstemployee');
            elseif ($row->headerName == 'Currency') $row->source = comboselect('mstcurrency');
            elseif ($row->headerName == 'Status') $row->source = comboselect('sysstatus');
            elseif ($row->headerName == 'Warehouse') $row->source = comboselect('mstwarehouse');
            elseif ($row->headerName == 'PaymentTerm') $row->source = comboselect('mstpaymentterm');
            elseif ($row->headerName == 'Project') $row->source = comboselect('mstproject');
            elseif ($row->headerName == 'Tax') $row->source = comboselect('msttax');
        };
        return $fields;
    }

    public function list(Request $request)
    {
        $fields = $this->httpService->get('/portal/api/development/table/vuelist?code=PurchaseInvoice');
        $data = DB::table('trdpurchaseinvoice as data') //jointable

            ->leftJoin('mstbusinesspartner AS BusinessPartner', 'BusinessPartner.Oid', '=', 'data.BusinessPartner')
            ->leftJoin('accaccount AS Account', 'Account.Oid', '=', 'data.Account')
            ->leftJoin('mstemployee AS Employee', 'Employee.Oid', '=', 'data.Employee')
            ->leftJoin('mstcurrency AS Currency', 'Currency.Oid', '=', 'data.Currency')
            // ->leftJoin('mstcurrencyrate AS CurrencyRate', 'CurrencyRate.Oid', '=', 'data.CurrencyRate')
            ->leftJoin('sysstatus AS Status', 'Status.Oid', '=', 'data.Status')
            ->leftJoin('mstwarehouse AS Warehouse', 'Warehouse.Oid', '=', 'data.Warehouse')
            ->leftJoin('mstpaymentterm AS PaymentTerm', 'PaymentTerm.Oid', '=', 'data.PaymentTerm')
            ->leftJoin('mstproject AS Project', 'Project.Oid', '=', 'data.Project')
            ->leftJoin('msttax AS Tax', 'Tax.Oid', '=', 'data.Tax')
            ->leftJoin('accaccount AS AdditionalAccount', 'AdditionalAccount.Oid', '=', 'data.AdditionalAccount')
            ->leftJoin('accaccount AS DiscountAccount', 'DiscountAccount.Oid', '=', 'data.DiscountAccount')
            ->leftJoin('acccashbank AS CashBankPrepaid', 'CashBankPrepaid.Oid', '=', 'data.CashBankPrepaid')
            ->leftJoin('accaccount AS AccountPrepaid', 'AccountPrepaid.Oid', '=', 'data.AccountPrepaid')
            ->leftJoin('trdpurchaseorder AS PurchaseOrder', 'PurchaseOrder.Oid', '=', 'data.PurchaseOrder');
        $data = serverSideQueryJSon($data, $fields, $request, 'Oid');
        $role = $this->roleService->list('PurchaseInvoice'); //rolepermission
        $action = $this->roleService->action('PurchaseInvoice');
        foreach ($data as $row) $row->Role = $this->roleService->generateRole($row, $role, $action);
        return serverSideReturn($data, $fields);
    }


    // public function index(Request $request)
    // {
    //     try {
    //         $user = Auth::user();
    //         $type = $request->input('type') ?: 'combo';
    //         $data = PurchaseInvoice::whereNull('GCRecord');

    //         $data = $data->orderBy('Oid')->get();
    //         return $data;
    //     } catch (\Exception $e) {
    //         return response()->json(
    //             errjson($e),
    //             Response::HTTP_NOT_FOUND
    //         );
    //     }
    // }

    public function index(Request $request, $Oid = null)
    {
        try {
            $user = Auth::user();
            $type = $request->input('type') ?: 'combo';
            $data = PurchaseInvoice::whereNull('GCRecord');
            if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            if ($type == 'list') $data->with(['CurrencyObj', 'BusinessPartnerObj', 'AccountObj', 'StatusObj', 'WarehouseObj']);
            if ($request->has('date')) {
                $data = $data
                    ->where('Date', '>=', Carbon::parse($request->date)->startOfMonth()->toDateString())
                    ->where('Date', '<', Carbon::parse($request->date)->startOfMonth()->addMonths(1)->toDateString());
            }
            $data = $data->get();

            $result = [];
            $role = $this->roleService->list('PurchaseInvoice');
            $action = $this->roleService->action('PurchaseInvoice');
            foreach ($data as $row) {
                $result[] = [
                    'Oid' => $row->Oid,
                    'Code' => $row->Code,
                    'Date' => Carbon::parse($row->Date)->format('Y-m-d'),
                    'CodeReff' => $row->CodeReff,
                    'TotalAmount' => number_format($row->TotalAmount, $row->CurrencyObj ? $row->CurrencyObj->Decimal : 0),
                    'CurrencyName' => $row->CurrencyObj ? $row->CurrencyObj->Code : null,
                    'WarehouseName' => $row->WarehouseObj ? $row->WarehouseObj->Code : null,
                    'BusinessPartnerName' => $row->BusinessPartnerObj ? $row->BusinessPartnerObj->Name . ' - ' . $row->BusinessPartnerObj->Code : null,
                    'StatusName' => $row->StatusObj ? $row->StatusObj->Name : null,
                    'Role' => $this->GenerateRole($row, $role, $action)
                ];
            }
            return $result;
            // return (new PurchaseInvoiceCollection($data))->type($type);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    private function showSub($Oid)
    {
        $data = PurchaseInvoice::with('ETickets', 'Details')->findOrFail($Oid);

        $data->BusinessPartnerName = $data->BusinessPartnerObj ? $data->BusinessPartnerObj->Name : null;
        $data->AccountName = $data->AccountObj ? $data->AccountObj->Name : null;
        $data->EmployeeName = $data->EmployeeObj ? $data->EmployeeObj->Name : null;
        $data->CurrencyName = $data->CurrencyObj ? $data->CurrencyObj->Name : null;
        $data->StatusName = $data->StatusObj ? $data->StatusObj->Name : null;
        $data->WarehouseName = $data->WarehouseObj ? $data->WarehouseObj->Name : null;
        $data->PaymentTermName = $data->PaymentTermObj ? $data->PaymentTermObj->Name : null;
        $data->ProjectName = $data->ProjectObj ? $data->ProjectObj->Name : null;
        $data->TaxName = $data->TaxObj ? $data->TaxObj->Name : null;
        $data->AdditionalAccountName = $data->AdditionalAccountObj ? $data->AdditionalAccountObj->Name : null;
        $data->DiscountAccountName = $data->DiscountAccountObj ? $data->DiscountAccountObj->Name : null;
        $data->CashBankPrepaidName = $data->CashBankPrepaidObj ? $data->CashBankPrepaidObj->Name : null;
        $data->AccountPrepaidName = $data->AccountPrepaidObj ? $data->AccountPrepaidObj->Name : null;
        $data->PurchaseOrderName = $data->PurchaseOrderObj ? $data->PurchaseOrderObj->Name : null;
        $data->ItemName = $data->ItemObj ? $data->ItemObj->Name : null;
        $data->Role = $this->generateRole($data);
        $data->Action =$this->action($data);
        foreach ($data->ETickets as $row) {
            $row->PointOfSaleName = $row->PointOfSaleObj ? $row->PointOfSaleObj->Name : null;
            $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
            $row->ETicketUploadName = $row->ETicketUploadObj ? $row->ETicketUploadObj->Name : null;
            $row->RedeemAddressName = $row->RedeemAddressObj ? $row->RedeemAddressObj->Name : null;
            $row->BusinessPartnerName = $row->BusinessPartnerObj ? $row->BusinessPartnerObj->Name : null;
            $row->TravelTransactionDetailName = $row->TravelTransactionDetailObj ? $row->TravelTransactionDetailObj->Name : null;
            $row->PurchaseEticketName = $row->PurchaseEticketObj ? $row->PurchaseEticketObj->Name : null;
        }
        foreach ($data->Details as $row) {

            $row->TradingName = $row->TradingObj ? $row->TradingObj->Name : null;
            $row->TaxName = $row->TaxObj ? $row->TaxObj->Name : null;
            $row->ItemName = $row->ItemObj ? $row->ItemObj->Name : null;
            $row->ItemUnitName = $row->ItemUnitObj ? $row->ItemUnitObj->Name : null;
            $row->StatusName = $row->StatusObj ? $row->StatusObj->Name : null;
        }
        return $data;
    }

    public function show(PurchaseInvoice $data)
    {
        try {
            return $this->showSub($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function import(Request $request, PurchaseInvoice $data)
    {
        $validator = Validator::make($request->all(), ['file' => 'required|mimes:xls,xlsx']);

        if ($validator->fails()) return response()->json($validator->messages(), Response::HTTP_UNPROCESSABLE_ENTITY);
        if (!$request->hasFile('file')) return response()->json('No file found', Response::HTTP_UNPROCESSABLE_ENTITY);

        $file = $request->file('file');
        $this->excelImportService->import(new PurchaseInvoiceExcelImport($data), $file);
        return response()->json(null, Response::HTTP_CREATED);
    }

    public function post(PurchaseInvoice $data)
    {
        try {
            $this->purchaseInvoiceService->post($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function unpost(PurchaseInvoice $data)
    {
        try {
            $this->purchaseInvoiceService->unpost($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function cancelled(PurchaseInvoice $data)
    {
        try {
            $this->purchaseInvoiceService->cancelled($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    private function generateRole($data, $role = null, $action = null)
    {
        if ($data instanceof PurchaseInvoice) $status = $data->StatusObj;
        else $status = $data->Status;
        if (!$role) $role = $this->roleService->list('PurchaseInvoice');
        if (!$action) $action = $this->roleService->action('PurchaseInvoice');

        return [
            'IsRead' => $role->IsRead,
            'IsAdd' => $role->IsAdd,
            'IsEdit' => $this->roleService->isAllowDelete($status, $role->IsEdit),
            'IsDelete' => 0, //$this->roleService->isAllowDelete($row->StatusObj, $role->IsDelete),
            'Cancel' => $this->roleService->isAllowCancel($status, $action->Cancel),
            'Entry' => $this->roleService->isAllowEntry($status, $action->Entry),
            'Post' => $this->roleService->isAllowPost($status, $action->Posted),
            'ViewJournal' => $this->roleService->isPosted($status, 1),
            'ViewStock' => $this->roleService->isPosted($status, 1),
            'Print' => $this->roleService->isPosted($status, 1),
        ];
    }

    public function convertStockTransfer(PurchaseInvoice $data, Request $request)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF
        $stock = new StockTransfer();
        try {
            DB::transaction(function () use ($request, $stock, &$data) {
                $stock->Company = Auth::user()->Company;
                $stock->Code = now()->format('ymdHis') . '-' . str_random(3);
                $stock->Date = Carbon::now();
                $stock->User = Auth::user()->Oid;
                $stock->WarehouseFrom = $data->Warehouse;
                $stock->WarehouseTo = $request->WarehouseTo;
                $stock->Status = Status::entry()->first()->Oid;
                $stock->save();

                $details = [];
                if ($data->Details()->count() != 0) {
                    foreach ($data->Details as $rowdetail) {
                        $details[] = new StockTransferDetail([
                            'Item' => $rowdetail->Item,
                            'ItemUnit' => Auth::user()->CompanyObj->ItemUnit,
                            'Quantity' => $rowdetail->Quantity
                        ]);
                    }
                    $stock->Details()->saveMany($details);
                }

                if (!$stock) throw new \Exception('Data is failed to be saved');
            });


            return response()->json(
                $stock,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));


        try {
            if (!$Oid) $data = new PurchaseInvoice();
            else $data = PurchaseInvoice::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                if (!$data->Oid) { //default value
                    $request->Status = Status::where('Code', 'Entry')->first()->Oid;
                }
                $disabled = array_merge(disabledFieldsForEdit(), [
                    'BusinessPartnerName', 'AccountName', 'EmployeeName', 'CurrencyName',
                    'StatusName', 'WarehouseName', 'PaymentTermName', 'ProjectName', 'TaxName', 'AdditionalAccountName', 'DiscountAccountName', 'CashBankPrepaidName',
                    'PurchaseOrderName', 'ItemName', 'AccountPrepaidName', 'ETickets', 'Details'
                ]);;
                $data = serverSideSave($data, $request, $disabled);
                if (isset($request->Type)) $data->Type = $request->Type;
                $data->save();

                if (isset($request->ETickets)) {
                    $disabled = array_merge(disabledFieldsForEdit(), ['PointOfSaleName', 'ItemName', 'ETicketUploadName', 'RedeemAddressName', 'BusinessPartnerName', 'TravelTransactionDetailName', 'PurchaseEticketName']);;

                    serverSideDeleteDetail($data->ETickets, $request->ETickets);
                    foreach ($request->ETickets as $row) {
                        if (isset($row->Oid)) $detail = ETicket::findOrFail($row->Oid);
                        else $detail = new ETicket();
                        $detail->PurchaseInvoice = $data->Oid;
                        $detail->Type = $row->Type;
                        $detail = serverSideSave($detail, $row, $disabled);
                        $detail->save();
                    }
                    $data->load('ETickets');
                    $data->fresh();
                }

                $totalAmount = 0;
                if (isset($request->Details)) {
                    $disabled = array_merge(disabledFieldsForEdit(), ['TradingName', 'TaxName', 'ItemName', 'ItemUnitName', 'StatusName']);;

                    serverSideDeleteDetail($data->Details, $request->Details);
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) $detail = PurchaseInvoiceDetail::findOrFail($row->Oid);
                        else $detail = new PurchaseInvoiceDetail();
                        $detail->PurchaseInvoice = $data->Oid;
                        $detail = serverSideSave($detail, $row, $disabled);
                        $totalAmount += $row->Quantity * $row->Price;
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }

                if (!$data) throw new \Exception('Data is failed to be saved');

                $data->TotalAmount = $totalAmount + $data->AdditionalAmount - $data->DiscountAmount;
                $data->save();
            });

            $role = $this->roleService->list('PurchaseInvoice'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Role = $this->roleService->generateActionMaster($role);

            $strOid = '';
            foreach ($data->Details as $rowdb) {
                $strOid = $strOid . ($strOid ? ", " : "") . "'" . $rowdb->PurchaseDeliveryDetail . "'";
            }
            $query = "UPDATE trdpurchasedeliverydetail pdd
                LEFT OUTER JOIN (
                    SELECT pid.PurchaseDeliveryDetail, SUM(IFNULL(pid.Quantity,0)) AS Quantity 
                    FROM trdpurchaseinvoicedetail pid 
                    WHERE pid.PurchaseDeliveryDetail IN (" . $strOid . ")
                    AND pid.GCRecord IS NULL GROUP BY pid.PurchaseDeliveryDetail
                ) pid ON pid.PurchaseDeliveryDetail = pdd.Oid
                SET pdd.QuantityInvoiced = IFNULL(pid.Quantity,0)
                WHERE pdd.Oid IN (" . $strOid . ")";
            if ($strOid != '') DB::Update($query);

            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(PurchaseInvoice $data)
    {
        try {
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function action(PurchaseInvoice $data)
    {
        $actionEntry = [
            'name' => 'ENTRY',
            'icon' => 'SettingsIcon',
            'action' => 'purchaseinvoice/{Oid}/unpost',
        ];
        $actionPosted = [
            'name' => 'POSTED',
            'icon' => 'SettingsIcon',
            'action' => 'purchaseinvoice/{Oid}/post',
        ];
        $actionconvertStockTransfer = [
            'name' => 'POSTED',
            'icon' => 'SettingsIcon',
            'action' => 'purchaseinvoice/{Oid}/convert',
        ];
        $return = [];
        switch ($data->Status ? $data->StatusObj->Code : "entry") {
            case "":
                $return[] = $actionPosted;
                break;
            case "entry":
                $return[] = $actionPosted;
                break;
            case "posted":
                $return[] = $actionEntry;
                $return[] = $actionconvertStockTransfer;
                break;
        }
        return $return;
    }

    public function export(Request $request)
    {
        $criteria = "";
        $query = "SELECT p.Code PurchaseInvoice, DATE_FORMAT(p.Date, '%Y-%m%-%d') Date, 
            CONCAT(bp.Name,' - ',bp.Code) BusinessPartner, CONCAT(i.Name,' - ',i.Code) Item, 
            IFNULL(d.Quantity,0) Qty, c.Code Currency, 
            IFNULL(d.Price,0) Price, 
            IFNULL(d.Quantity,0)*IFNULL(d.Price,0) TotalAmount, p.Rate
            FROM trdpurchaseinvoice p
            LEFT OUTER JOIN trdpurchaseinvoicedetail d ON p.Oid = d.PurchaseInvoice
            LEFT OUTER JOIN mstbusinesspartner bp ON bp.Oid = p.BusinessPartner
            LEFT OUTER JOIN mstitem i ON i.Oid = d.Item
            LEFT OUTER JOIN mstcurrency c ON c.Oid = p.Currency
            WHERE p.GCRecord IS NULL ";
        $datefrom = Carbon::parse($request->input('datefrom'));
        $dateto = Carbon::parse($request->input('dateto'));
        if ($request->has('datefrom')) $criteria = $criteria . " AND p.Date >= '{$datefrom->format('Y-m-d')}' ";
        if ($request->has('dateuntil')) $criteria = $criteria . " AND p.Date <= '{$dateto->format('Y-m-d')}'";
        if ($request->has('businesspartner')) $criteria = $criteria . " AND p.BusinessPartner = '{$request->datefrom}'";
        if ($request->has('warehouse')) $criteria = $criteria . " AND p.Warehouse = '{$request->warehouse}'";
        if ($request->has('item')) $criteria = $criteria . " AND d.Item = '{$request->item}'";

        $data = DB::select($query . $criteria);
        $string = '';
        $i = 0;
        foreach ($data as $item) {
            $j = 0;
            foreach ($item  as $itemChild) {
                $string .= $itemChild;
                if ($i < count($data)) {
                    $string .= ';';
                }
                $j++;
            }
            if ($i < count($data)) {
                $string .= '\n';
            }
            $i++;
        }
        return response()->json(
            $string,
            '200'
        );
        //        return $this->excelExportService->export($data);
    }

    public function partialDelivery(Request $request)
    {
        $query = "SELECT pdd.Oid, i.Oid AS Item, CONCAT(i.Name,' - ',i.Code) AS Name,
            c.Oid AS Currency, (IFNULL(pdd.Quantity,0) - IFNULL(pdd.QuantityInvoiced,0)) AS Quantity, pdd.Price
            FROM trdpurchasedelivery pd
            LEFT OUTER JOIN trdpurchasedeliverydetail pdd ON pdd.PurchaseDelivery = pd.Oid
            LEFT OUTER JOIN mstitem i ON pdd.Item = i.Oid
            LEFT OUTER JOIN mstbusinesspartner bp ON pd.BusinessPartner = bp.Oid
            LEFT OUTER JOIN mstcurrency c ON pd.Currency = c.Oid
            LEFT OUTER JOIN sysstatus s ON pd.Status = s.Oid
            WHERE (IFNULL(pdd.Quantity,0) - IFNULL(pdd.QuantityInvoiced,0)) > 0
            AND pd.GCRecord IS NULL
            AND pd.Oid NOT IN ({$request->input('exception')})
            AND pd.BusinessPartner = '{$request->input('businesspartner')}'
            AND DATE_FORMAT(pd.Date, '%Y-%m-%d') <= '{$request->input('date')}'
            AND s.Code = 'posted'";
        $data = DB::select($query);

        return response()->json(
            $data,
            Response::HTTP_OK
        );
    }

    public function partialDeliveryAdd(Request $request)
    {
        try {
            $detail = [];
            DB::transaction(function () use ($request, &$detail) {
                $purchaseInvoice = PurchaseInvoice::findOrFail($request->input('oid'));
                $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
                $string = "";
                foreach ($request as $row) {
                    $string = ($string ? $string . "," : null) . "'" . $row . "'";
                }
                // $param = collect($request)->pluck('Oid');
                $query = "SELECT pdd.*, (IFNULL(pdd.Quantity,0) - IFNULL(pdd.QuantityInvoiced,0)) AS OutstandingQuantity
                    FROM trdpurchasedelivery pd
                    LEFT OUTER JOIN trdpurchasedeliverydetail pdd ON pdd.PurchaseDelivery = pd.Oid
                    LEFT OUTER JOIN sysstatus s ON pd.Status = s.Oid
                    WHERE (IFNULL(pdd.Quantity,0) - IFNULL(pdd.QuantityInvoiced,0)) > 0
                    AND pd.GCRecord IS NULL AND pd.Oid IN (" . $string . ")
                    ";
                $data = DB::select($query);
                foreach ($data as $row) {
                    $details = new PurchaseInvoiceDetail();
                    $details->PurchaseInvoice = $purchaseInvoice->Oid;
                    $details->PurchaseDeliveryDetail = $row->Oid;
                    $details->Company = $row->Company;
                    $details->Item = $row->Item;
                    $details->Quantity = $row->OutstandingQuantity;
                    $details->QuantityBase = $row->OutstandingQuantity;
                    $details->ItemUnit = $row->ItemUnit;
                    $details->Price = $row->Price;
                    $details->DiscountAmount = $row->DiscountAmount;
                    $details->DiscountPercentage = $row->DiscountPercentage;
                    $details->SubtotalAmount = $row->OutstandingQuantity * $row->Price;
                    $details->TotalBase = $row->SubtotalAmount - $row->DiscountAmount;

                    $details->save();
                    $detail[] = $details;
                }
            });

            return response()->json(
                $detail,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
