<?php

namespace App\AdminApi\Master\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\Item;
use App\Core\Master\Entities\ItemPackage;
use App\Core\Master\Entities\ItemGroupUser;
use App\Core\Security\Services\RoleModuleService;
use App\AdminApi\Development\Controllers\CRUDLogicController;

class ItemPackageController extends Controller
{
    protected $roleService;
    public function __construct(
        RoleModuleService $roleService
    ) {
        $this->roleService = $roleService;
        $this->crudController = new CRUDLogicController();
    }

    public function config(Request $request)
    {
        $data = $this->crudController->config('mstitempackage');
        return response()->json($data, Response::HTTP_OK);
    }

    public function list(Request $request)
    {
        $data = DB::table('mstitempackage as data');
        $data = $this->crudController->list('mstitempackage', $data, $request);
        return response()->json($data, Response::HTTP_OK);
    }

    public function index(Request $request)
    {
        $user = Auth::user();
        $data = DB::table('mstitempackage as data');
        $itemGroupUser = ItemGroupUser::select('Oid')->where('User', $user->Oid)->get();
        if ($itemGroupUser) $data->whereIn('ig.Oid', $itemGroupUser);

        $data = $this->crudController->getIndex($data, $request, 'Name');
        $role = $this->roleService->list('ItemPackage'); //rolepermission
        foreach ($data->data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return response()->json($data, Response::HTTP_OK);
    }

    private function showSub($Oid)
    {
        $data = ItemPackage::whereNull('GCRecord');
        $data = $this->crudController->detail('mstitempackage', $data, $Oid);
        return $data;
    }

    public function show(ItemPackage $data)
    {
        return response()->json($this->showSub($data->Oid), Response::HTTP_OK);
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));

        try {
            if (!$Oid) $data = new ItemPackage();
            else $data = ItemPackage::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $data = $this->crudController->save('mstitempackage', $data, $request);
                $data->save();

                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('ItemPackage'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Action = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(ItemPackage $data)
    {
        return $this->crudController->delete($this->module, $data);
    }

    public function getItemPackage($Oid = null)
    {
        try {
            $data = ItemPackage::where('ItemParent', $Oid)->get();
            foreach ($data as $row) {
                $row->ItemParentName = $row->ItemParent ? $row->ItemParentObj->Name . ' - ' . $row->ItemParentObj->Code : null;
                $row->ItemName = $row->Item ? $row->ItemObj->Name . ' - ' . $row->ItemObj->Code : null;

                unset($row->ItemParentObj);
            }

            return response()->json(
                $data,
                Response::HTTP_OK
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function createItemPackage(Request $request)
    {
        $itemParent = Item::findOrFail($request->input('item'));
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent())))); //WILLIAM ZEF
        try {
            DB::transaction(function () use ($request, $itemParent) {
                $data = ItemPackage::where('ItemParent',$itemParent->Oid)->get();
                $disabled = array_merge(disabledFieldsForEdit(), ['ItemParentName']);

                serverSideDeleteDetail($data, $request);
                foreach ($request as $row) {
                    if (isset($row->Oid)) $detail = ItemPackage::findOrFail($row->Oid);
                    else $detail = new ItemPackage();
                    $detail->Company = $data->Company;
                    $detail->ItemParent = $itemParent->Oid;
                    $detail = serverSideSave($detail, $row, $disabled);
                    $detail->save();
                }

                if (!$detail) throw new \Exception('Data is failed to be saved');
            });
            
            return response()->json(
                $request,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
