<?php

namespace App\AdminApi\Master\Controllers;

use Validator;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\ItemUnit;
use App\Core\Security\Services\RoleModuleService;
use App\Core\Base\Exceptions\UserFriendlyException;
use App\AdminApi\Development\Controllers\CRUDLogicController;
use App\Core\Internal\Services\ExportExcelService;

class ItemUnitController extends Controller
{
    protected $roleService;
    protected $excelExportService;

    public function __construct(
        RoleModuleService $roleService,
        ExportExcelService $excelExportService
    ) {
        $this->roleService = $roleService;
        $this->crudController = new CRUDLogicController();
        $this->excelExportService = $excelExportService;
    }

    public function config(Request $request)
    {
        $data = $this->crudController->config('mstitemunit');
        return response()->json($data, Response::HTTP_OK);
    }

    public function list(Request $request)
    {
        $data = DB::table('mstitemunit as data');
        $data = $this->crudController->list('mstitemunit', $data, $request);

        $role = $this->roleService->list('ItemUnit'); //rolepermission
        foreach ($data->data as $row) $row->Action = $this->roleService->generateActionMaster($role);
        return response()->json($data, Response::HTTP_OK);
    }

    public function index(Request $request)
    {
        $data = DB::table('mstitemunit as data');
        $data = $this->crudController->getIndex($data, $request, 'Name');
        return response()->json($data, Response::HTTP_OK);
    }

    private function showSub($Oid)
    {
        $data = ItemUnit::whereNull('GCRecord');
        $data = $this->crudController->detail('mstitemunit', $data, $Oid);
        return $data;
    }

    public function show(ItemUnit $data)
    {
        return response()->json($this->showSub($data->Oid), Response::HTTP_OK);
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
        if ($request->Code == 'test11') return response()->json('Code test11 respon json di luar try catch', Response::HTTP_NOT_FOUND);
        if ($request->Code == 'test17') throw new UserFriendlyException('Code test17 throw friendly di luar try catch');
        if ($request->Code == 'test18') throw new \Exception('Code test18 throw di luar try catch');
        if ($request->Code == 'test19') $data = ItemUnit::findOrFail(323232);

        try {
            if ($request->Code == 'test12') return response()->json('Code test12 respon json di dalam try catch', Response::HTTP_NOT_FOUND);
            if ($request->Code == 'test13') throw new UserFriendlyException('Code test13 throw friendly di dalam try catch');
            if ($request->Code == 'test14') throw new \Exception('Code test14 throw di dalam try catch');
            if ($request->Code == 'test20') $data = ItemUnit::findOrFail(323232);
            if (!$Oid) $data = new ItemUnit();
            else $data = ItemUnit::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                if ($request->Code == 'test15') throw new UserFriendlyException('Code test15 throw friendly di dalam db transaction');
                if ($request->Code == 'test16') throw new \Exception('Code test16 throw friendly di dalam db transaction');
                if ($request->Code == 'test21') $data = ItemUnit::findOrFail(323232);

                $data = $this->crudController->save('mstitemunit', $data, $request);
                $data->save();

                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('ItemUnit'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Action = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(ItemUnit $data)
    {
        return $this->crudController->delete($this->module, $data);
    }

    public function export(Request $request)
    {
        $data = ItemUnit::whereNull('GCRecord')->get();
       
        return $this->excelExportService->export($data);
    }
}
