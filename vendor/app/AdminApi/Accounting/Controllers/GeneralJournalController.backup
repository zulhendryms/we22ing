<?php

namespace App\AdminApi\Accounting\Controllers;

use Validator;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Accounting\Entities\GeneralJournal;
use App\Core\Accounting\Entities\Journal;
use App\Core\Security\Services\RoleModuleService;
use App\AdminApi\Development\Controllers\CRUDDevelopmentController;
use App\Core\Pub\Entities\PublicPost;
use App\Core\Pub\Entities\PublicComment;
use App\Core\Pub\Entities\PublicApproval;
use App\Core\Pub\Entities\PublicFile;
use App\Core\Master\Entities\Image;

class GeneralJournalController extends Controller
{
    protected $roleService;
    private $crudController;
    public function __construct(
        RoleModuleService $roleService
    ) {
        $this->roleService = $roleService;
        $this->crudController = new CRUDDevelopmentController();
    }

    public function config(Request $request)
    {
        try {
            return $this->crudController->config('accgeneraljournal');
        } catch (\Exception $e) {
  return response()->json(
  errjson($e), 
Response::HTTP_UNPROCESSABLE_ENTITY);
}
    }

    public function list(Request $request)
    {
        try {
            $user = Auth::user();
            $data = DB::table('accgeneraljournal as data');
            $role = $this->roleService->list('GeneralJournal'); //rolepermission
            foreach ($data->data as $row) {
                $tmp = GeneralJournal::findOrFail($row->Oid);
                $row->Action = $this->action($tmp);
                $row->Role = $this->roleService->generateRole($row, $role);
            }
            return response()->json($data, Response::HTTP_OK);
        } catch (\Exception $e) {
  return response()->json(
  errjson($e), 
Response::HTTP_UNPROCESSABLE_ENTITY);
}
    }

    public function presearch(Request $request)
    {
        try {
            return $this->crudController->presearch('accgeneraljournal');
        } catch (\Exception $e) {
  return response()->json(
  errjson($e), 
Response::HTTP_UNPROCESSABLE_ENTITY);
}
    }

    public function index(Request $request)
    {
        try {
            $data = DB::table('accgeneraljournal as data');
            $data = $this->crudController->index('accgeneraljournal', $data, $request, false);
            return response()->json($data, Response::HTTP_OK);
        } catch (\Exception $e) {
  return response()->json(
  errjson($e), 
Response::HTTP_UNPROCESSABLE_ENTITY);
}
    }

    private function showSub($Oid)
    {
        $data = $this->crudController->detail('accgeneraljournal', $Oid);
        $data->Action = $this->action($data);
        return $data;
    }

    public function show(GeneralJournal $data)
    {
        try {
            return $this->showSub($data->Oid);
        } catch (\Exception $e) {
  return response()->json(
  errjson($e), 
Response::HTTP_UNPROCESSABLE_ENTITY);
}
    }

    public function save(Request $request, $Oid = null)
    {
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));

        try {
            if (!$Oid) $data = new GeneralJournal();
            else $data = GeneralJournal::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $data = $this->crudController->save('accgeneraljournal', $data, $request);
                $data->save();


                if (isset($request->Details)) {
                    $this->crudController->deleteDetail($data->Details, $request->Details);
                    foreach ($request->Details as $row) {
                        if (isset($row->Oid)) $detail = Journal::findOrFail($row->Oid);
                        else $detail = new Journal();
                        $detail = $this->crudController->save('accjournal', $detail, $row, $data);
                        $detail->save();
                    }
                    $data->load('Details');
                    $data->fresh();
                }
                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('GeneralJournal'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Action = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(GeneralJournal $data)
    {
        try {
            DB::transaction(function () use ($data) {
                //delete
                $delete = PublicApproval::where('PublicPost', $data->Oid)->get();
                foreach ($delete as $row) $row->delete();

                $delete = Image::where('PublicPost', $data->Oid)->get();
                foreach ($delete as $row) $row->delete();

                $delete = PublicComment::where('PublicPost', $data->Oid)->get();
                foreach ($delete as $row) $row->delete();

                $delete = PublicFile::where('PublicPost', $data->Oid)->get();
                foreach ($delete as $row) $row->delete();

                $delete = PublicPost::where('Oid', $data->Oid)->get();
                foreach ($delete as $row) $row->delete();

                $delete = Journal::where('GeneralJournal', $data->Oid)->get();
                foreach ($delete as $row) $row->delete();

                $data->delete();
            });
            return response()->json(
                null,
                Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function action(GeneralJournal $data)
    {
        $url = 'generaljournal';
        $actionEntry = [
            'name' => 'Change to ENTRY',
            'icon' => 'UnlockIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/unpost',
        ];
        $actionPosted = [
            'name' => 'Change to POSTED',
            'icon' => 'CheckIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/post',
        ];
        $actionCancelled = [ 
            'name' => 'Change to Cancelled',
            'icon' => 'XIcon',
            'type' => 'confirm',
            'post' => $url.'/{Oid}/cancelled',
        ];
        $actionViewJournal = [ 
            'name' => 'View Journal',
            'icon' => 'BookOpenIcon',
            'type' => 'open_grid',
            'get' => 'journal?'.$url.'={Oid}',
        ];
        $actionViewStock = [ 
            'name' => 'View Stock',
            'icon' => 'PackageIcon',
            'type' => 'open_grid',
            'get' => 'stock?'.$url.'={Oid}',
        ];
        $actionDelete = [ 
            'name' => 'Delete',
            'icon' => 'TrashIcon',
            'type' => 'confirm',
            'delete' => $url.'/{Oid}'
        ];
        $return = [];
        // switch ($data->StatusObj->Code) {
        switch ($data->Status ? $data->StatusObj->Code : "entry") {
            case "":
                $return[] = $actionPosted;
                $return[] = $actionDelete;
                $return[] = $actionCancelled;
                break;
            case "posted":
                $return[] = $actionEntry;
                $return[] = $actionViewJournal;
                $return[] = $actionViewStock;
                break;
            case "entry":
                $return[] = $actionPosted;
                $return[] = $actionCancelled;
                $return[] = $actionDelete;
                break;
        }
        return $return;
    }

    public function post(GeneralJournal $data)
    {
        try {
            $this->generalJournalService->post($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function unpost(GeneralJournal $data)
    {
        try {
            $this->generalJournalService->unpost($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
    public function cancelled(GeneralJournal $data)
    {
        try {
            $this->generalJournalService->cancelled($data->Oid);
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function journal(GeneralJournal $data)
    {
        try {
            return Journal::where('GeneralJournal', $data->Oid);
            // return $data->Journals();   
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }
}
