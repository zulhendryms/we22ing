<?php

namespace App\AdminApi\Master\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Laravel\Http\Controllers\Controller;
use App\Core\Master\Entities\Company;
use App\Core\Master\Entities\ItemPriceMethod;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Core\Internal\Services\FileCloudService; 
use App\Core\Internal\Services\AutoNumberService;
use Validator;

class CompanyController extends Controller
{
    
    protected $fileCloudService;
    private $autoNumberService;
    
    public function __construct(
        FileCloudService $fileCloudService,
        AutoNumberService $autoNumberService
        ) 
        { 
            $this->fileCloudService = $fileCloudService;
            $this->autoNumberService = $autoNumberService;
        }

    public function index(Request $request)
    {
        $company = Auth::user()->CompanyObj;

        $query = "SELECT Oid, Code AS Name FROM company WHERE GCRecord IS NULL";
        
        
        if ($request->has('all')) $query = $query." AND GCRecord IS NULL";
        else {
            $found = false;
            $tmp = json_decode($company->ModuleGlobal);        
            if ($found == '' && $tmp) foreach($tmp as $row) if ($row == 'company') $found = 'Global';        
            $tmp = json_decode($company->ModuleGroup);
            if ($found == '' && $tmp) foreach($tmp as $row) if ($row == 'company') $found = 'Group';
            if ($found == 'Group') {
                $query = $query." AND (CompanySource = '".$company->CompanySource."' OR CompanySource = '".$company->Oid."')";
            } elseif ($found == '') {
                $query." AND Oid = '".$company->Oid."'";
            } else {
                // logger("HELPER LIST NOFILTER ".'company'."=".$company->Oid);
            }
        }        
        if ($request->has('excludeself')) $query = $query." AND Oid != '".$company->Oid."'";
        if ($request->input('type') == 'combo') return DB::select($query);
        else return $this->list($request->input('type'));
    }
    
    public function masterlist(Request $request)
    {       
        $user = Auth::user();
        $query = "SELECT Oid, Code AS Name FROM company WHERE GCRecord IS NULL";
        if ($request->has('excludeself')) $query = $query." AND Oid != '".$user->Company."'";        
        return DB::select($query);
    }

    public function list($type)
    {
        try {            
            $user = Auth::user();
            $type = $type ?: 'combo';
            // if ($user->BusinessPartner) $data = $data->where('Code', $user->BusinessPartner);
            $data = Company::with([
                'WarehouseObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
                'CityObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
                'CurrencyObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Decimal');},
                'BusinessPartnerObj' => function ($query) {$query->addSelect('Oid', 'Name');},
                'BusinessPartnerAmountDifferenceObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'AccountProfitLossObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'PurchaseDiscountAccountObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'SalesDiscountAccountObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'BusinessPartnerPurchaseDeliveryObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'BusinessPartnerPurchaseInvoiceObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'BusinessPartnerSalesDeliveryObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'BusinessPartnerSalesInvoiceObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemStockObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemAgentObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemSalesIncomeObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemSalesProductionObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemPurchaseExpenseObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemPurchaseProductionObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'IncomeInProgressObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ExpenseInProgressObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'CashBankExchRateGainObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'CashBankExchRateLossObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ARAPExchRateGainObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ARAPExchRateLossObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'AccountIncomeObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'AccountExpenseObj' => function ($query) {$query->addSelect('Oid', 'Name', 'Currency');},
                'ItemAccountGroupObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
                'BusinessPartnerAccountGroup' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},


                'POSDefaultWarehouseObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
                'POSPaymentMethodForChangesObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
                'POSDefaultTableObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
                'POSDefaultEmployeeObj' => function ($query) {$query->addSelect('Oid', 'Code', 'Name');},
            ])->where('Oid',$user->Company)->firstOrFail();
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }   
    }
    
    public function show(Company $data)
    {
        try {       

            $data = Company::with(['BusinessPartnerObj'])->findOrFail($data->Oid); 
            $data->WarehouseName = $data->WarehouseObj ? $data->WarehouseObj->Name : null;
            $data->CityName = $data->CityObj ? $data->CityObj->Name : null;         
            $data->CurrencyName = $data->CurrencyObj ? $data->CurrencyObj->Name : null;            
            $data->BusinessPartnerName = $data->BusinessPartnerObj ? $data->BusinessPartnerObj->Name : null; 
            $data->BusinessPartnerAmountDifferenceName = $data->BusinessPartnerAmountDifferenceObj ? $data->BusinessPartnerAmountDifferenceObj->Name : null;
            $data->AccountProfitLossName = $data->AccountProfitLossObj ? $data->AccountProfitLossObj->Name : null;
            $data->PurchaseDiscountAccountName = $data->PurchaseDiscountAccountObj ? $data->PurchaseDiscountAccountObj->Name : null;
            $data->SalesDiscountAccountName = $data->SalesDiscountAccountObj ? $data->SalesDiscountAccountObj->Name : null;
            $data->BusinessPartnerPurchaseDeliveryName = $data->BusinessPartnerPurchaseDeliveryObj ? $data->BusinessPartnerPurchaseDeliveryObj->Name : null;
            $data->BusinessPartnerPurchaseInvoiceName = $data->BusinessPartnerPurchaseInvoiceObj ? $data->BusinessPartnerPurchaseInvoiceObj->Name : null;
            $data->BusinessPartnerSalesDeliveryName = $data->BusinessPartnerSalesDeliveryObj ? $data->BusinessPartnerSalesDeliveryObj->Name : null;
            $data->BusinessPartnerSalesInvoiceName = $data->BusinessPartnerSalesInvoiceObj ? $data->BusinessPartnerSalesInvoiceObj->Name : null;
            $data->ItemUnitName = $data->ItemUnitObj ? $data->ItemUnitObj->Name : null;
            $data->ItemStockName = $data->ItemStockObj ? $data->ItemStockObj->Name : null;
            $data->ItemAgentName = $data->ItemAgentObj ? $data->ItemAgentObj->Name : null;
            $data->ItemSalesIncomeName = $data->ItemSalesIncomeObj ? $data->ItemSalesIncomeObj->Name : null;
            $data->ItemSalesProductionName = $data->ItemSalesProductionObj ? $data->ItemSalesProductionObj->Name : null;
            $data->ItemPurchaseExpenseName = $data->ItemPurchaseExpenseObj ? $data->ItemPurchaseExpenseObj->Name : null;
            $data->ItemPurchaseProductionName = $data->ItemPurchaseProductionObj ? $data->ItemPurchaseProductionObj->Name : null;
            $data->IncomeInProgressName = $data->IncomeInProgressObj ? $data->IncomeInProgressObj->Name : null;
            $data->ExpenseInProgressName = $data->ExpenseInProgressObj ? $data->ExpenseInProgressObj->Name : null;
            $data->CashBankExchRateGainName = $data->CashBankExchRateGainObj ? $data->CashBankExchRateGainObj->Name : null;
            $data->CashBankExchRateLossName = $data->CashBankExchRateLossObj ? $data->CashBankExchRateLossObj->Name : null;
            $data->ARAPExchRateGainName = $data->ARAPExchRateGainObj ? $data->ARAPExchRateGainObj->Name : null;
            $data->ARAPExchRateLossName = $data->ARAPExchRateLossObj ? $data->ARAPExchRateLossObj->Name : null;
            $data->AccountIncomeName = $data->AccountIncomeObj ? $data->AccountIncomeObj->Name : null;
            $data->AccountExpenseName = $data->AccountExpenseObj ? $data->AccountExpenseObj->Name : null;
            $data->ItemAccountGroupName = $data->ItemAccountGroupObj ? $data->ItemAccountGroupObj->Name : null;         
            $data->BusinessPartnerAccountGroupName = $data->BusinessPartnerAccountGroupObj ? $data->BusinessPartnerAccountGroupObj->Name : null;           
            return $data;
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function save(Request $request, $Oid = null)
    {        
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
        $dataArray = object_to_array($request);
        
        $messsages = array(
            'Code.required'=>__('_.Code').__('error.required'),
            'Code.max'=>__('_.Code').__('error.max'),
            'Name.required'=>__('_.Name').__('error.required'),
            'Name.max'=>__('_.Name').__('error.max'),

            'Country.required'=>__('_.Country').__('error.required'),
            'Country.exists'=>__('_.Country').__('error.exists'),
            'City.required'=>__('_.City').__('error.required'),
            'City.exists'=>__('_.City').__('error.exists'),
            'Currency.required'=>__('_.Currency').__('error.required'),
            'Currency.exists'=>__('_.Currency').__('error.exists'),
            'CustomerCash.required'=>__('_.CustomerCash').__('error.required'),
            'CustomerCash.exists'=>__('_.CustomerCash').__('error.exists'),
            'ItemUnit.required'=>__('_.ItemUnit').__('error.required'),
            'ItemUnit.exists'=>__('_.ItemUnit').__('error.exists'),
            'PurchaseDiscountAccount.required'=>__('_.PurchaseDiscountAccount').__('error.required'),
            'PurchaseDiscountAccount.exists'=>__('_.PurchaseDiscountAccount').__('error.exists'),
            'SalesDiscountAccount.required'=>__('_.SalesDiscountAccount').__('error.required'),
            'SalesDiscountAccount.exists'=>__('_.SalesDiscountAccount').__('error.exists'),
            'BusinessPartnerPurchaseDelivery.required'=>__('_.BusinessPartnerPurchaseDelivery').__('error.required'),
            'BusinessPartnerPurchaseDelivery.exists'=>__('_.BusinessPartnerPurchaseDelivery').__('error.exists'),
            'BusinessPartnerPurchaseInvoice.required'=>__('_.BusinessPartnerPurchaseInvoice').__('error.required'),
            'BusinessPartnerPurchaseInvoice.exists'=>__('_.BusinessPartnerPurchaseInvoice').__('error.exists'),
            'BusinessPartnerSalesDelivery.required'=>__('_.BusinessPartnerSalesDelivery').__('error.required'),
            'BusinessPartnerSalesDelivery.exists'=>__('_.BusinessPartnerSalesDelivery').__('error.exists'),

            'ItemStock.required'=>__('_.ItemStock').__('error.required'),
            'ItemStock.exists'=>__('_.ItemStock').__('error.exists'),
            'ItemAgent.required'=>__('_.ItemAgent').__('error.required'),
            'ItemAgent.exists'=>__('_.ItemAgent').__('error.exists'),
            'ItemSalesIncome.required'=>__('_.ItemSalesIncome').__('error.required'),
            'ItemSalesIncome.exists'=>__('_.ItemSalesIncome').__('error.exists'),
            'ItemSalesProduction.required'=>__('_.ItemSalesProduction').__('error.required'),
            'ItemSalesProduction.exists'=>__('_.ItemSalesProduction').__('error.exists'),
            'ItemPurchaseExpense.required'=>__('_.ItemPurchaseExpense').__('error.required'),
            'ItemPurchaseExpense.exists'=>__('_.ItemPurchaseExpense').__('error.exists'),
            'ItemPurchaseProduction.required'=>__('_.ItemPurchaseProduction').__('error.required'),
            'ItemPurchaseProduction.exists'=>__('_.ItemPurchaseProduction').__('error.exists'),
            'IncomeInProgress.required'=>__('_.IncomeInProgress').__('error.required'),
            'IncomeInProgress.exists'=>__('_.IncomeInProgress').__('error.exists'),
            'ExpenseInProgress.required'=>__('_.ExpenseInProgress').__('error.required'),
            'ExpenseInProgress.exists'=>__('_.ExpenseInProgress').__('error.exists'),
            'ExpenseInProgress.required'=>__('_.ExpenseInProgress').__('error.required'),
            'ExpenseInProgress.exists'=>__('_.ExpenseInProgress').__('error.exists'),
            'CashBankExchRateGain.required'=>__('_.CashBankExchRateGain').__('error.required'),
            'CashBankExchRateGain.exists'=>__('_.CashBankExchRateGain').__('error.exists'),
            'CashBankExchRateLoss.required'=>__('_.CashBankExchRateLoss').__('error.required'),
            'CashBankExchRateLoss.exists'=>__('_.CashBankExchRateLoss').__('error.exists'),
            'ARAPExchRateGain.required'=>__('_.ARAPExchRateGain').__('error.required'),
            'ARAPExchRateGain.exists'=>__('_.ARAPExchRateGain').__('error.exists'),
            'ARAPExchRateLoss.required'=>__('_.ARAPExchRateLoss').__('error.required'),
            'ARAPExchRateLoss.exists'=>__('_.ARAPExchRateLoss').__('error.exists'),
            'AccountProfitLoss.required'=>__('_.AccountProfitLoss').__('error.required'),
            'AccountProfitLoss.exists'=>__('_.AccountProfitLoss').__('error.exists'),
            'BusinessPartnerAmountDifference.required'=>__('_.BusinessPartnerAmountDifference').__('error.required'),
            'BusinessPartnerAmountDifference.exists'=>__('_.BusinessPartnerAmountDifference').__('error.exists'),
            'POSPaymentMethodForChanges.required'=>__('_.POSPaymentMethodForChanges').__('error.required'),
            'POSPaymentMethodForChanges.exists'=>__('_.POSPaymentMethodForChanges').__('error.exists'),
            'POSDefaultWarehouse.required'=>__('_.POSDefaultWarehouse').__('error.required'),
            'POSDefaultWarehouse.exists'=>__('_.POSDefaultWarehouse').__('error.exists'),
            'POSDefaultTable.required'=>__('_.POSDefaultTable').__('error.required'),
            'POSDefaultTable.exists'=>__('_.POSDefaultTable').__('error.exists'),
            'POSDefaultEmployee.required'=>__('_.POSDefaultEmployee').__('error.required'),
            'POSDefaultEmployee.exists'=>__('_.POSDefaultEmployee').__('error.exists'),
        );
        $rules = array(
            'Code' => 'required|max:255',
            'Name' => 'required|max:255',
            'Country' => 'required|exists:syscountry,Oid',
            'City' => 'required|exists:mstcity,Oid',
            'Currency' => 'required|exists:mstcurrency,Oid',
            'CustomerCash' => 'required|exists:mstbusinesspartner,Oid',
            'ItemUnit' => 'required|exists:mstitemunit,Oid',

            'PurchaseDiscountAccount' => 'required|exists:accaccount,Oid',
            'SalesDiscountAccount' => 'required|exists:accaccount,Oid',
            'BusinessPartnerPurchaseDelivery' => 'required|exists:accaccount,Oid',
            'BusinessPartnerPurchaseInvoice' => 'required|exists:accaccount,Oid',
            'BusinessPartnerSalesDelivery' => 'required|exists:accaccount,Oid',
            'BusinessPartnerSalesInvoice' => 'required|exists:accaccount,Oid',

            'ItemStock' => 'required|exists:accaccount,Oid',
            'ItemAgent' => 'required|exists:accaccount,Oid',
            'ItemSalesIncome' => 'required|exists:accaccount,Oid',
            'ItemSalesProduction' => 'required|exists:accaccount,Oid',
            'ItemPurchaseExpense' => 'required|exists:accaccount,Oid',
            'ItemPurchaseProduction' => 'required|exists:accaccount,Oid',
            'IncomeInProgress' => 'required|exists:accaccount,Oid',
            'ExpenseInProgress' => 'required|exists:accaccount,Oid',

            'CashBankExchRateGain' => 'required|exists:accaccount,Oid',
            'CashBankExchRateLoss' => 'required|exists:accaccount,Oid',
            'ARAPExchRateGain' => 'required|exists:accaccount,Oid',
            'ARAPExchRateLoss' => 'required|exists:accaccount,Oid',

            'AccountProfitLoss' => 'required|exists:accaccount,Oid',
            'BusinessPartnerAmountDifference' => 'required|exists:accaccount,Oid',

            'POSPaymentMethodForChanges' => 'required|exists:mstpaymentmethod,Oid',
            'POSDefaultWarehouse' => 'required|exists:mstwarehouse,Oid',
            'POSDefaultTable' => 'required|exists:postable,Oid',
            'POSDefaultEmployee' => 'required|exists:mstemployee,Oid',
        );

        $validator = Validator::make($dataArray, $rules,$messsages);

        if ($validator->fails()) {
            return response()->json(
                $validator->messages(),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        try {            
            if (!$Oid) $data = new Company();
            else $data = Company::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $disabled = disabledFieldsForEdit();
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                $data->save();
                if ($data->Code == '<<Auto>>') $data->Code = $this->autoNumberService->generate($data, 'company');
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            return $data;
            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function edit(Request $request)
    {   
        try {            
            $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF
            $dataCompany = Auth::user()->CompanyObj;
            $Oid= $dataCompany->Oid;

            $data = Company::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $excluded = ['Image', 'Image1','LogoIcon','LogoLogin','LogoPrint'];
                $disabled = array_merge(disabledFieldsForEdit(), $excluded);
                foreach ($request as $field => $key) {
                    if (in_array($field, $disabled)) continue;
                    $data->{$field} = $request->{$field};
                }
                if (isset($request->Image->base64)) $data->Image = $this->fileCloudService->uploadImage($request->Image, $data->Image);
                if (isset($request->LogoIcon->base64)) $data->LogoIcon = $this->fileCloudService->uploadImage($request->LogoIcon, $data->LogoIcon);
                if (isset($request->LogoLogin->base64)) $data->LogoLogin = $this->fileCloudService->uploadImage($request->LogoLogin, $data->LogoLogin);
                if (isset($request->LogoPrint->base64)) $data->LogoPrint = $this->fileCloudService->uploadImage($request->LogoPrint, $data->LogoPrint);
                $data->save();
                if($data->PriceMethodApitude == null){
                    $itemPriceMethod = new ItemPriceMethod();
                    $itemPriceMethod->save();
                    $data->PriceMethodApitude = $itemPriceMethod->Oid;
                    $data->save();
                }
                if($data->PriceMethodGlobaltix == null){
                    $itemPriceMethod = new ItemPriceMethod();
                    $itemPriceMethod->save();
                    $data->PriceMethodGlobaltix = $itemPriceMethod->Oid;
                    $data->save();
                }
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(Company $data)
    {
        try {            
            DB::transaction(function () use ($data) {
                $data->delete();
            });
            return response()->json(
                null, Response::HTTP_NO_CONTENT
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function getPriceMethodApitude()
    {
        try {          
            $dataCompany = Auth::user()->CompanyObj;
            $Oid= $dataCompany->Oid;

            $company = Company::findOrFail($Oid); 
            $data = ItemPriceMethod::with(['SalesAddMethodObj','SalesAdd1MethodObj','SalesAdd2MethodObj','SalesAdd3MethodObj','SalesAdd4MethodObj','SalesAdd5MethodObj'])->where('Oid',$company->PriceMethodApitude)->first();
    
            return response()->json(
                $data,
                Response::HTTP_OK
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function savePriceMethodApitude(Request $request)
    {  
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF

        try {            
            $CompanyOid = Auth::user()->CompanyObj->Oid;

            $Oid = Company::findOrFail($CompanyOid)->PriceMethodApitude; 
            if (!$Oid) throw new \Exception('Data is failed to be saved');
            $data = ItemPriceMethod::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $data->Code = $request->Code;
                $data->Name = $request->Name;
                $data->IsActive = 1;
                $data->SalesAddMethod = $request->SalesAddMethod;
                $data->SalesAddAmount1 = $request->SalesAddAmount1;
                $data->SalesAddAmount2 = $request->SalesAddAmount2;
                $data->SalesAdd1Method = $request->SalesAdd1Method;
                $data->SalesAdd1Amount1 = $request->SalesAdd1Amount1;
                $data->SalesAdd1Amount2 = $request->SalesAdd1Amount2;
                $data->SalesAdd2Method = $request->SalesAdd2Method;
                $data->SalesAdd2Amount1 = $request->SalesAdd2Amount1;
                $data->SalesAdd2Amount2 = $request->SalesAdd2Amount2;
                $data->SalesAdd3Method = $request->SalesAdd3Method;
                $data->SalesAdd3Amount1 = $request->SalesAdd3Amount1;
                $data->SalesAdd3Amount2 = $request->SalesAdd3Amount2;
                $data->SalesAdd4Method = $request->SalesAdd4Method;
                $data->SalesAdd4Amount1 = $request->SalesAdd4Amount1;
                $data->SalesAdd4Amount2 = $request->SalesAdd4Amount2;
                $data->SalesAdd5Method = $request->SalesAdd5Method;
                $data->SalesAdd5Amount1 = $request->SalesAdd5Amount1;
                $data->SalesAdd5Amount2 = $request->SalesAdd5Amount2;
                $data->save();
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function getPriceMethodGlobalTix()
    {
        try {          
            $dataCompany = Auth::user()->CompanyObj;
            $Oid= $dataCompany->Oid;

            $company = Company::findOrFail($Oid);   
            $data = ItemPriceMethod::with(['SalesAddMethodObj','SalesAdd1MethodObj','SalesAdd2MethodObj','SalesAdd3MethodObj','SalesAdd4MethodObj','SalesAdd5MethodObj'])->where('Oid',$company->PriceMethodGlobaltix)->first();
    
            return response()->json(
                $data,
                Response::HTTP_OK
            );

        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_NOT_FOUND
            );
        }
    }

    public function savePriceMethodGlobalTix(Request $request)
    {  
        $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))))   ; //WILLIAM ZEF

        try {            
            $CompanyOid = Auth::user()->CompanyObj->Oid;

            $Oid = Company::findOrFail($CompanyOid)->PriceMethodGlobaltix; 
            if (!$Oid) throw new \Exception('Data is failed to be saved');
            $data = ItemPriceMethod::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $data->Code = $request->Code;
                $data->Name = $request->Name;
                $data->IsActive = 1;
                $data->SalesAddMethod = $request->SalesAddMethod;
                $data->SalesAddAmount1 = $request->SalesAddAmount1;
                $data->SalesAddAmount2 = $request->SalesAddAmount2;
                $data->SalesAdd1Method = $request->SalesAdd1Method;
                $data->SalesAdd1Amount1 = $request->SalesAdd1Amount1;
                $data->SalesAdd1Amount2 = $request->SalesAdd1Amount2;
                $data->SalesAdd2Method = $request->SalesAdd2Method;
                $data->SalesAdd2Amount1 = $request->SalesAdd2Amount1;
                $data->SalesAdd2Amount2 = $request->SalesAdd2Amount2;
                $data->SalesAdd3Method = $request->SalesAdd3Method;
                $data->SalesAdd3Amount1 = $request->SalesAdd3Amount1;
                $data->SalesAdd3Amount2 = $request->SalesAdd3Amount2;
                $data->SalesAdd4Method = $request->SalesAdd4Method;
                $data->SalesAdd4Amount1 = $request->SalesAdd4Amount1;
                $data->SalesAdd4Amount2 = $request->SalesAdd4Amount2;
                $data->SalesAdd5Method = $request->SalesAdd5Method;
                $data->SalesAdd5Amount1 = $request->SalesAdd5Amount1;
                $data->SalesAdd5Amount2 = $request->SalesAdd5Amount2;
                $data->save();
                if(!$data) throw new \Exception('Data is failed to be saved');
            });

            return response()->json(
                $data, Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }
}
