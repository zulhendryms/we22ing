<?php

namespace App\AdminApi\Travel\Controllers;

use Validator;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Laravel\Http\Controllers\Controller;
use App\Core\Travel\Entities\TravelItemHotelPrice;
use App\Core\Security\Services\RoleModuleService;
use App\AdminApi\Development\Controllers\CRUDLogicController;

class TravelItemHotelPriceController extends Controller
{
    protected $roleService;
    public function __construct(
        RoleModuleService $roleService
    ) {
        $this->roleService = $roleService;
        $this->crudController = new CRUDLogicController();
    }

    public function config(Request $request)
    {
        $data = $this->crudController->config('trvitemhotelprice');
        return response()->json($data, Response::HTTP_OK);
    }

    public function list(Request $request)
    {
        $data = DB::table('trvitemhotelprice as data');
        $data = $this->crudController->list('trvitemhotelprice', $data, $request);
        return response()->json($data, Response::HTTP_OK);
    }

    public function presearch(Request $request)
    {
        return $this->crudController->presearch('trvitemhotelprice');
    }

    public function index(Request $request)
    {
        $data = DB::table('trvitemhotelprice as data');
        if ($request->has('Item')) $data->where('Item',$request->input('Item'));
        $data = $this->crudController->getIndex($data, $request);
        $result = [];
        foreach ($data as $row) $result[] = $this->showSub($row->Oid);
        return response()->json($result, Response::HTTP_OK);
    }

    private function showSub($Oid)
    {
        $data = TravelItemHotelPrice::whereNull('GCRecord');
        $data = $this->crudController->detail('trvitemhotelprice', $data, $Oid);
        return $data;
    }

    public function show(TravelItemHotelPrice $data)
    {
        return response()->json($this->showSub($data->Oid), Response::HTTP_OK);
    }

    public function save(Request $request, $Oid = null)
    {
        try {
            if (!$Oid) $data = new TravelItemHotelPrice();
            else $data = TravelItemHotelPrice::findOrFail($Oid);
            DB::transaction(function () use ($request, &$data) {
                $item = $request->has('Item') ? $request->input('Item') : null;
                $itemContent = $request->has('ItemContent') ? $request->input('ItemContent') : null;
                $request = json_decode(json_encode(object_to_array(json_decode($request->getContent()))));
                if ($item) $data->Item = $item;
                if ($itemContent) $data->ItemContent = $itemContent;
                $data = $this->crudController->save('trvitemhotelprice', $data, $request);
                $data->save();

                if (!$data) throw new \Exception('Data is failed to be saved');
            });

            $role = $this->roleService->list('TravelItemHotelPrice'); //rolepermission
            $data = $this->showSub($data->Oid);
            $data->Action = $this->roleService->generateActionMaster($role);
            return response()->json(
                $data,
                Response::HTTP_CREATED
            );
        } catch (\Exception $e) {
            return response()->json(
                errjson($e),
                Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }
    }

    public function destroy(TravelItemHotelPrice $data)
    {
        return $this->crudController->delete($this->module, $data);
    }
}
